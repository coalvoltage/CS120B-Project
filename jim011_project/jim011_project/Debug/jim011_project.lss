
jim011_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004b6  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800104  00800104  0000054e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f6b  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e9  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e1  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000027a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000693  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082f  00000000  00000000  00002fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	24 c1       	rjmp	.+584    	; 0x27e <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8d 00       	.word	0x008d	; ????
  8e:	9b 00       	.word	0x009b	; ????
  90:	7e 00       	.word	0x007e	; ????
  92:	e9 00       	.word	0x00e9	; ????
  94:	b4 00       	.word	0x00b4	; ????
  96:	c2 00       	.word	0x00c2	; ????
  98:	85 00       	.word	0x0085	; ????
  9a:	9b 00       	.word	0x009b	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e6 eb       	ldi	r30, 0xB6	; 182
  b0:	f4 e0       	ldi	r31, 0x04	; 4
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a4 e0       	ldi	r26, 0x04	; 4
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a6 32       	cpi	r26, 0x26	; 38
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	11 d1       	rcall	.+546    	; 0x2f6 <main>
  d4:	ee c1       	rjmp	.+988    	; 0x4b2 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <TickSNESControl>:
        if(c==0){return b;}
        a = b;
		b = c;
    }
    return 0;
}
  d8:	e8 2f       	mov	r30, r24
  da:	80 b1       	in	r24, 0x00	; 0
  dc:	80 95       	com	r24
  de:	82 fb       	bst	r24, 2
  e0:	22 27       	eor	r18, r18
  e2:	20 f9       	bld	r18, 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	8e 2f       	mov	r24, r30
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	91 05       	cpc	r25, r1
  ee:	20 f4       	brcc	.+8      	; 0xf8 <TickSNESControl+0x20>
  f0:	fc 01       	movw	r30, r24
  f2:	ea 5b       	subi	r30, 0xBA	; 186
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	d4 c1       	rjmp	.+936    	; 0x4a0 <__tablejump2__>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	72 c0       	rjmp	.+228    	; 0x1e0 <TickSNESControl+0x108>
  fc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <countSNESControl>
 100:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <countSNESControl+0x1>
 104:	06 97       	sbiw	r24, 0x06	; 6
 106:	40 f5       	brcc	.+80     	; 0x158 <TickSNESControl+0x80>
 108:	16 c0       	rjmp	.+44     	; 0x136 <TickSNESControl+0x5e>
 10a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <countSNESControl>
 10e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <countSNESControl+0x1>
 112:	0c 97       	sbiw	r24, 0x0c	; 12
 114:	08 f0       	brcs	.+2      	; 0x118 <TickSNESControl+0x40>
 116:	4f c0       	rjmp	.+158    	; 0x1b6 <TickSNESControl+0xde>
 118:	27 c0       	rjmp	.+78     	; 0x168 <TickSNESControl+0x90>
 11a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <countSNESControl+0x1>
 11e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <countSNESControl>
 122:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <SNESOutput+0x1>
 126:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <SNESOutput>
 12a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <dataSNESControl+0x1>
 12e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <dataSNESControl>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	55 c0       	rjmp	.+170    	; 0x1e0 <TickSNESControl+0x108>
 136:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <countSNESControl>
 13a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <countSNESControl+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <countSNESControl+0x1>
 144:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <countSNESControl>
 148:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <dataSNESControl+0x1>
 14c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <dataSNESControl>
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	44 c0       	rjmp	.+136    	; 0x1e0 <TickSNESControl+0x108>
 158:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <countSNESControl+0x1>
 15c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <countSNESControl>
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	3c c0       	rjmp	.+120    	; 0x1e0 <TickSNESControl+0x108>
 168:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dataSNESControl>
 16c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <dataSNESControl+0x1>
 170:	82 2b       	or	r24, r18
 172:	93 2b       	or	r25, r19
 174:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <dataSNESControl+0x1>
 178:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dataSNESControl>
 17c:	85 e0       	ldi	r24, 0x05	; 5
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	2e c0       	rjmp	.+92     	; 0x1e0 <TickSNESControl+0x108>
 184:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <countSNESControl>
 188:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <countSNESControl+0x1>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <countSNESControl+0x1>
 192:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <countSNESControl>
 196:	0c 97       	sbiw	r24, 0x0c	; 12
 198:	00 f5       	brcc	.+64     	; 0x1da <TickSNESControl+0x102>
 19a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dataSNESControl>
 19e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <dataSNESControl+0x1>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <dataSNESControl+0x1>
 1aa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dataSNESControl>
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	51 e0       	ldi	r21, 0x01	; 1
 1b4:	15 c0       	rjmp	.+42     	; 0x1e0 <TickSNESControl+0x108>
 1b6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <countSNESControl+0x1>
 1ba:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <countSNESControl>
 1be:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dataSNESControl>
 1c2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <dataSNESControl+0x1>
 1c6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <SNESOutput+0x1>
 1ca:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <SNESOutput>
 1ce:	87 e0       	ldi	r24, 0x07	; 7
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <TickSNESControl+0x108>
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <TickSNESControl+0x108>
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	51 e0       	ldi	r21, 0x01	; 1
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	25 2b       	or	r18, r21
 1ea:	94 2f       	mov	r25, r20
 1ec:	99 0f       	add	r25, r25
 1ee:	29 2b       	or	r18, r25
 1f0:	22 b9       	out	0x02, r18	; 2
 1f2:	08 95       	ret

000001f4 <TickLED>:
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	60 f4       	brcc	.+24     	; 0x210 <TickLED+0x1c>
 1f8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <SNESOutput>
 1fc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <SNESOutput+0x1>
 200:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <LEDB.1938>
 204:	8b b9       	out	0x0b, r24	; 11
 206:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <LEDB.1938>
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	08 95       	ret
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret

00000214 <TimerSet>:
 214:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 218:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 21c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 220:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 224:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <_avr_timer_cntcurr>
 228:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <_avr_timer_cntcurr+0x1>
 22c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_avr_timer_cntcurr+0x2>
 230:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_avr_timer_cntcurr+0x3>
 234:	08 95       	ret

00000236 <TimerOn>:
 236:	8b e0       	ldi	r24, 0x0B	; 11
 238:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 23c:	8d e7       	ldi	r24, 0x7D	; 125
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 24e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 252:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 25e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 262:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 266:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 26a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 26e:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 272:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 276:	8f b7       	in	r24, 0x3f	; 63
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	8f bf       	out	0x3f, r24	; 63
 27c:	08 95       	ret

0000027e <__vector_13>:
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_cntcurr>
 294:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x1>
 298:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_cntcurr+0x2>
 29c:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_cntcurr+0x3>
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	a1 09       	sbc	r26, r1
 2a4:	b1 09       	sbc	r27, r1
 2a6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 2aa:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 2ae:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 2b2:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 2b6:	89 2b       	or	r24, r25
 2b8:	8a 2b       	or	r24, r26
 2ba:	8b 2b       	or	r24, r27
 2bc:	99 f4       	brne	.+38     	; 0x2e4 <__vector_13+0x66>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <TimerFlag>
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2d4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr>
 2d8:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x1>
 2dc:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <_avr_timer_cntcurr+0x2>
 2e0:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <_avr_timer_cntcurr+0x3>
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <main>:

// --------END User defined FSMs-----------------------------------------------


// Implement scheduler code from PES.
int main(){
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <main+0x6>
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <main+0x8>
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0x03; PORTA = 0xFC;
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	81 b9       	out	0x01, r24	; 1
 306:	8c ef       	ldi	r24, 0xFC	; 252
 308:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF; PORTB = 0x00;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	84 b9       	out	0x04, r24	; 4
 30e:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 310:	8a b9       	out	0x0a, r24	; 10
 312:	1b b8       	out	0x0b, r1	; 11
 314:	0f 2e       	mov	r0, r31
 316:	fd e0       	ldi	r31, 0x0D	; 13
 318:	ef 2e       	mov	r14, r31
 31a:	f0 2d       	mov	r31, r0
 31c:	f1 2c       	mov	r15, r1
 31e:	00 e0       	ldi	r16, 0x00	; 0
 320:	10 e0       	ldi	r17, 0x00	; 0
 322:	51 e0       	ldi	r21, 0x01	; 1
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	04 c0       	rjmp	.+8      	; 0x334 <main+0x3e>
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
        a = b;
		b = c;
 32c:	e6 2e       	mov	r14, r22
 32e:	f7 2e       	mov	r15, r23
 330:	08 2f       	mov	r16, r24
 332:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 334:	65 2f       	mov	r22, r21
 336:	74 2f       	mov	r23, r20
 338:	83 2f       	mov	r24, r19
 33a:	92 2f       	mov	r25, r18
 33c:	2e 2d       	mov	r18, r14
 33e:	3f 2d       	mov	r19, r15
 340:	40 2f       	mov	r20, r16
 342:	51 2f       	mov	r21, r17
 344:	8b d0       	rcall	.+278    	; 0x45c <__udivmodsi4>
 346:	5e 2d       	mov	r21, r14
 348:	4f 2d       	mov	r20, r15
 34a:	30 2f       	mov	r19, r16
 34c:	21 2f       	mov	r18, r17
        if(c==0){return b;}
 34e:	61 15       	cp	r22, r1
 350:	71 05       	cpc	r23, r1
 352:	81 05       	cpc	r24, r1
 354:	91 05       	cpc	r25, r1
 356:	51 f7       	brne	.-44     	; 0x32c <main+0x36>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTickSNES_period = SMTickSNES_calc/GCD;
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	2e 2d       	mov	r18, r14
 362:	3f 2d       	mov	r19, r15
 364:	40 2f       	mov	r20, r16
 366:	51 2f       	mov	r21, r17
 368:	79 d0       	rcall	.+242    	; 0x45c <__udivmodsi4>
	unsigned long int SMTickLED_period = SMTickLED_calc/GCD;

	//Declare an array of tasks 
	static task task1, task2;
	task *tasks[] = { &task1, &task2};
 36a:	ef e0       	ldi	r30, 0x0F	; 15
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	fa 83       	std	Y+2, r31	; 0x02
 370:	e9 83       	std	Y+1, r30	; 0x01
 372:	0f 2e       	mov	r0, r31
 374:	f4 e0       	ldi	r31, 0x04	; 4
 376:	cf 2e       	mov	r12, r31
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	df 2e       	mov	r13, r31
 37c:	f0 2d       	mov	r31, r0
 37e:	dc 82       	std	Y+4, r13	; 0x04
 380:	cb 82       	std	Y+3, r12	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	80 83       	st	Z, r24
	task1.period = SMTickSNES_period;//Task Period.
 386:	21 83       	std	Z+1, r18	; 0x01
 388:	32 83       	std	Z+2, r19	; 0x02
 38a:	43 83       	std	Z+3, r20	; 0x03
 38c:	54 83       	std	Z+4, r21	; 0x04
	task1.elapsedTime = SMTickSNES_period;//Task current elapsed time.
 38e:	25 83       	std	Z+5, r18	; 0x05
 390:	36 83       	std	Z+6, r19	; 0x06
 392:	47 83       	std	Z+7, r20	; 0x07
 394:	50 87       	std	Z+8, r21	; 0x08
	task1.TickFct = &TickSNESControl;//Function pointer for the tick.
 396:	2c e6       	ldi	r18, 0x6C	; 108
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	32 87       	std	Z+10, r19	; 0x0a
 39c:	21 87       	std	Z+9, r18	; 0x09
	
	task2.state = -1;//Task initial state.
 39e:	d6 01       	movw	r26, r12
 3a0:	8c 93       	st	X, r24
	task2.period = SMTickLED_calc;//Task Period.
 3a2:	6d e0       	ldi	r22, 0x0D	; 13
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	f6 01       	movw	r30, r12
 3ac:	61 83       	std	Z+1, r22	; 0x01
 3ae:	72 83       	std	Z+2, r23	; 0x02
 3b0:	83 83       	std	Z+3, r24	; 0x03
 3b2:	94 83       	std	Z+4, r25	; 0x04
	task2.elapsedTime = SMTickLED_period;//Task current elapsed time.
 3b4:	2e 2d       	mov	r18, r14
 3b6:	3f 2d       	mov	r19, r15
 3b8:	40 2f       	mov	r20, r16
 3ba:	51 2f       	mov	r21, r17
 3bc:	4f d0       	rcall	.+158    	; 0x45c <__udivmodsi4>
 3be:	d6 01       	movw	r26, r12
 3c0:	15 96       	adiw	r26, 0x05	; 5
 3c2:	2d 93       	st	X+, r18
 3c4:	3d 93       	st	X+, r19
 3c6:	4d 93       	st	X+, r20
 3c8:	5c 93       	st	X, r21
 3ca:	18 97       	sbiw	r26, 0x08	; 8
	task2.TickFct = &TickLED;//Function pointer for the tick.
 3cc:	8a ef       	ldi	r24, 0xFA	; 250
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	1a 96       	adiw	r26, 0x0a	; 10
 3d2:	9c 93       	st	X, r25
 3d4:	8e 93       	st	-X, r24
 3d6:	19 97       	sbiw	r26, 0x09	; 9
	
	// Set the timer and turn it on
	TimerSet(GCD);
 3d8:	6e 2d       	mov	r22, r14
 3da:	7f 2d       	mov	r23, r15
 3dc:	80 2f       	mov	r24, r16
 3de:	91 2f       	mov	r25, r17
	TimerOn();
 3e0:	19 df       	rcall	.-462    	; 0x214 <TimerSet>
 3e2:	29 df       	rcall	.-430    	; 0x236 <TimerOn>
 3e4:	7e 01       	movw	r14, r28
 3e6:	b5 e0       	ldi	r27, 0x05	; 5
 3e8:	eb 0e       	add	r14, r27
 3ea:	f1 1c       	adc	r15, r1
 3ec:	fe 01       	movw	r30, r28
 3ee:	31 96       	adiw	r30, 0x01	; 1
 3f0:	6f 01       	movw	r12, r30
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3f2:	d6 01       	movw	r26, r12
 3f4:	0d 91       	ld	r16, X+
 3f6:	1d 91       	ld	r17, X+
 3f8:	6d 01       	movw	r12, r26
 3fa:	f8 01       	movw	r30, r16
 3fc:	45 81       	ldd	r20, Z+5	; 0x05
 3fe:	56 81       	ldd	r21, Z+6	; 0x06
 400:	67 81       	ldd	r22, Z+7	; 0x07
 402:	70 85       	ldd	r23, Z+8	; 0x08
 404:	81 81       	ldd	r24, Z+1	; 0x01
 406:	92 81       	ldd	r25, Z+2	; 0x02
 408:	a3 81       	ldd	r26, Z+3	; 0x03
 40a:	b4 81       	ldd	r27, Z+4	; 0x04
 40c:	48 17       	cp	r20, r24
 40e:	59 07       	cpc	r21, r25
 410:	6a 07       	cpc	r22, r26
 412:	7b 07       	cpc	r23, r27
 414:	69 f4       	brne	.+26     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 416:	80 81       	ld	r24, Z
 418:	01 84       	ldd	r0, Z+9	; 0x09
 41a:	f2 85       	ldd	r31, Z+10	; 0x0a
 41c:	e0 2d       	mov	r30, r0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	09 95       	icall
 422:	d8 01       	movw	r26, r16
 424:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 426:	f8 01       	movw	r30, r16
 428:	15 82       	std	Z+5, r1	; 0x05
 42a:	16 82       	std	Z+6, r1	; 0x06
 42c:	17 82       	std	Z+7, r1	; 0x07
 42e:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 430:	f8 01       	movw	r30, r16
 432:	85 81       	ldd	r24, Z+5	; 0x05
 434:	96 81       	ldd	r25, Z+6	; 0x06
 436:	a7 81       	ldd	r26, Z+7	; 0x07
 438:	b0 85       	ldd	r27, Z+8	; 0x08
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	a1 1d       	adc	r26, r1
 43e:	b1 1d       	adc	r27, r1
 440:	85 83       	std	Z+5, r24	; 0x05
 442:	96 83       	std	Z+6, r25	; 0x06
 444:	a7 83       	std	Z+7, r26	; 0x07
 446:	b0 87       	std	Z+8, r27	; 0x08
	TimerOn();
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 448:	ce 14       	cp	r12, r14
 44a:	df 04       	cpc	r13, r15
 44c:	91 f6       	brne	.-92     	; 0x3f2 <main+0xfc>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 44e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TimerFlag>
 452:	88 23       	and	r24, r24
 454:	e1 f3       	breq	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		TimerFlag = 0;
 456:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <TimerFlag>
	}
 45a:	c8 cf       	rjmp	.-112    	; 0x3ec <main+0xf6>

0000045c <__udivmodsi4>:
 45c:	a1 e2       	ldi	r26, 0x21	; 33
 45e:	1a 2e       	mov	r1, r26
 460:	aa 1b       	sub	r26, r26
 462:	bb 1b       	sub	r27, r27
 464:	fd 01       	movw	r30, r26
 466:	0d c0       	rjmp	.+26     	; 0x482 <__udivmodsi4_ep>

00000468 <__udivmodsi4_loop>:
 468:	aa 1f       	adc	r26, r26
 46a:	bb 1f       	adc	r27, r27
 46c:	ee 1f       	adc	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	a2 17       	cp	r26, r18
 472:	b3 07       	cpc	r27, r19
 474:	e4 07       	cpc	r30, r20
 476:	f5 07       	cpc	r31, r21
 478:	20 f0       	brcs	.+8      	; 0x482 <__udivmodsi4_ep>
 47a:	a2 1b       	sub	r26, r18
 47c:	b3 0b       	sbc	r27, r19
 47e:	e4 0b       	sbc	r30, r20
 480:	f5 0b       	sbc	r31, r21

00000482 <__udivmodsi4_ep>:
 482:	66 1f       	adc	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	1a 94       	dec	r1
 48c:	69 f7       	brne	.-38     	; 0x468 <__udivmodsi4_loop>
 48e:	60 95       	com	r22
 490:	70 95       	com	r23
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	9b 01       	movw	r18, r22
 498:	ac 01       	movw	r20, r24
 49a:	bd 01       	movw	r22, r26
 49c:	cf 01       	movw	r24, r30
 49e:	08 95       	ret

000004a0 <__tablejump2__>:
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	00 24       	eor	r0, r0
 4a6:	00 1c       	adc	r0, r0
 4a8:	0b be       	out	0x3b, r0	; 59
 4aa:	07 90       	elpm	r0, Z+
 4ac:	f6 91       	elpm	r31, Z
 4ae:	e0 2d       	mov	r30, r0
 4b0:	09 94       	ijmp

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
