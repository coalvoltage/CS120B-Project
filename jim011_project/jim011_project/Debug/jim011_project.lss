
jim011_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000332  00800100  00002c4a  00002cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000127a  00800432  00800432  00003010  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00003080  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000346a  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1d  00000000  00000000  000066e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f8f  00000000  00000000  000072ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  00009290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010e5  00000000  00000000  000097a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002735  00000000  00000000  0000a885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000cfba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c1       	rjmp	.+700    	; 0x2be <__ctors_end>
       2:	00 00       	nop
       4:	7b c1       	rjmp	.+758    	; 0x2fc <__bad_interrupt>
       6:	00 00       	nop
       8:	79 c1       	rjmp	.+754    	; 0x2fc <__bad_interrupt>
       a:	00 00       	nop
       c:	77 c1       	rjmp	.+750    	; 0x2fc <__bad_interrupt>
       e:	00 00       	nop
      10:	75 c1       	rjmp	.+746    	; 0x2fc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c1       	rjmp	.+742    	; 0x2fc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c1       	rjmp	.+738    	; 0x2fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c1       	rjmp	.+734    	; 0x2fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c1       	rjmp	.+730    	; 0x2fc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c1       	rjmp	.+726    	; 0x2fc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c1       	rjmp	.+722    	; 0x2fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c1       	rjmp	.+718    	; 0x2fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c1       	rjmp	.+714    	; 0x2fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0e c3       	rjmp	.+1564   	; 0x652 <__vector_13>
      36:	00 00       	nop
      38:	61 c1       	rjmp	.+706    	; 0x2fc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c1       	rjmp	.+702    	; 0x2fc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c1       	rjmp	.+698    	; 0x2fc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c1       	rjmp	.+694    	; 0x2fc <__bad_interrupt>
      46:	00 00       	nop
      48:	59 c1       	rjmp	.+690    	; 0x2fc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c1       	rjmp	.+686    	; 0x2fc <__bad_interrupt>
      4e:	00 00       	nop
      50:	55 c1       	rjmp	.+682    	; 0x2fc <__bad_interrupt>
      52:	00 00       	nop
      54:	53 c1       	rjmp	.+678    	; 0x2fc <__bad_interrupt>
      56:	00 00       	nop
      58:	51 c1       	rjmp	.+674    	; 0x2fc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c1       	rjmp	.+670    	; 0x2fc <__bad_interrupt>
      5e:	00 00       	nop
      60:	4d c1       	rjmp	.+666    	; 0x2fc <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c1       	rjmp	.+662    	; 0x2fc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c1       	rjmp	.+658    	; 0x2fc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c1       	rjmp	.+654    	; 0x2fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c1       	rjmp	.+650    	; 0x2fc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c1       	rjmp	.+646    	; 0x2fc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c1       	rjmp	.+642    	; 0x2fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c1       	rjmp	.+638    	; 0x2fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c1       	rjmp	.+634    	; 0x2fc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c1       	rjmp	.+630    	; 0x2fc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c1       	rjmp	.+626    	; 0x2fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c2 01       	movw	r24, r4
      8e:	d0 01       	movw	r26, r0
      90:	b3 01       	movw	r22, r6
      92:	1e 02       	muls	r17, r30
      94:	e9 01       	movw	r28, r18
      96:	f7 01       	movw	r30, r14
      98:	ba 01       	movw	r22, r20
      9a:	d0 01       	movw	r26, r0
      9c:	6a 05       	cpc	r22, r10
      9e:	70 05       	cpc	r23, r0
      a0:	1f 05       	cpc	r17, r15
      a2:	2f 05       	cpc	r18, r15
      a4:	65 05       	cpc	r22, r5
      a6:	55 05       	cpc	r21, r5
      a8:	4f 05       	cpc	r20, r15
      aa:	ab 06       	cpc	r10, r27
      ac:	c7 06       	cpc	r12, r23
      ae:	ea 06       	cpc	r14, r26
      b0:	0e 07       	cpc	r16, r30
      b2:	55 07       	cpc	r21, r21
      b4:	9c 07       	cpc	r25, r28
      b6:	78 07       	cpc	r23, r24
      b8:	31 07       	cpc	r19, r17
      ba:	c2 07       	cpc	r28, r18
      bc:	df 0c       	add	r13, r15
      be:	e9 0c       	add	r14, r9
      c0:	9d 0c       	add	r9, r13
      c2:	ae 0e       	add	r10, r30
      c4:	af 0c       	add	r10, r15
      c6:	d1 0c       	add	r13, r1
      c8:	c3 0c       	add	r12, r3
      ca:	ae 0e       	add	r10, r30
      cc:	ae 0e       	add	r10, r30
      ce:	ca 0c       	add	r12, r10
      d0:	25 12       	cpse	r2, r21
      d2:	02 12       	cpse	r0, r18
      d4:	e4 11       	cpse	r30, r4
      d6:	e9 11       	cpse	r30, r9
      d8:	fe 11       	cpse	r31, r14
      da:	f9 11       	cpse	r31, r9
      dc:	f4 11       	cpse	r31, r4

000000de <CHARSET>:
      de:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      ee:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      fe:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     10e:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     11e:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     12e:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     13e:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     14e:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     15e:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     16e:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     17e:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     18e:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     19e:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     1ae:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1be:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1ce:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1de:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1ee:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1fe:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     20e:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     21e:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     22e:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     23e:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     24e:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     25e:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     26e:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     27e:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     28e:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     29e:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     2ae:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

000002be <__ctors_end>:
     2be:	11 24       	eor	r1, r1
     2c0:	1f be       	out	0x3f, r1	; 63
     2c2:	cf ef       	ldi	r28, 0xFF	; 255
     2c4:	d0 e4       	ldi	r29, 0x40	; 64
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	cd bf       	out	0x3d, r28	; 61

000002ca <__do_copy_data>:
     2ca:	14 e0       	ldi	r17, 0x04	; 4
     2cc:	a0 e0       	ldi	r26, 0x00	; 0
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	ea e4       	ldi	r30, 0x4A	; 74
     2d2:	fc e2       	ldi	r31, 0x2C	; 44
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	0b bf       	out	0x3b, r16	; 59
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <__do_copy_data+0x14>
     2da:	07 90       	elpm	r0, Z+
     2dc:	0d 92       	st	X+, r0
     2de:	a2 33       	cpi	r26, 0x32	; 50
     2e0:	b1 07       	cpc	r27, r17
     2e2:	d9 f7       	brne	.-10     	; 0x2da <__do_copy_data+0x10>

000002e4 <__do_clear_bss>:
     2e4:	26 e1       	ldi	r18, 0x16	; 22
     2e6:	a2 e3       	ldi	r26, 0x32	; 50
     2e8:	b4 e0       	ldi	r27, 0x04	; 4
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <.do_clear_bss_start>

000002ec <.do_clear_bss_loop>:
     2ec:	1d 92       	st	X+, r1

000002ee <.do_clear_bss_start>:
     2ee:	ac 3a       	cpi	r26, 0xAC	; 172
     2f0:	b2 07       	cpc	r27, r18
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <.do_clear_bss_loop>
     2f4:	0e 94 27 12 	call	0x244e	; 0x244e <main>
     2f8:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <_exit>

000002fc <__bad_interrupt>:
     2fc:	81 ce       	rjmp	.-766    	; 0x0 <__vectors>

000002fe <write>:
		default:
		break;
	}
	
	return state;
}
     2fe:	59 98       	cbi	0x0b, 1	; 11
     300:	66 23       	and	r22, r22
     302:	11 f0       	breq	.+4      	; 0x308 <write+0xa>
     304:	5b 9a       	sbi	0x0b, 3	; 11
     306:	15 c0       	rjmp	.+42     	; 0x332 <write+0x34>
     308:	5b 98       	cbi	0x0b, 3	; 11
     30a:	13 c0       	rjmp	.+38     	; 0x332 <write+0x34>
     30c:	ac 01       	movw	r20, r24
     30e:	02 2e       	mov	r0, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <write+0x18>
     312:	55 95       	asr	r21
     314:	47 95       	ror	r20
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <write+0x14>
     31a:	40 ff       	sbrs	r20, 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <write+0x24>
     31e:	5c 9a       	sbi	0x0b, 4	; 11
     320:	01 c0       	rjmp	.+2      	; 0x324 <write+0x26>
     322:	5c 98       	cbi	0x0b, 4	; 11
     324:	5d 9a       	sbi	0x0b, 5	; 11
     326:	5d 98       	cbi	0x0b, 5	; 11
     328:	21 50       	subi	r18, 0x01	; 1
     32a:	31 09       	sbc	r19, r1
     32c:	78 f7       	brcc	.-34     	; 0x30c <write+0xe>
     32e:	59 9a       	sbi	0x0b, 1	; 11
     330:	08 95       	ret
     332:	27 e0       	ldi	r18, 0x07	; 7
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	e9 cf       	rjmp	.-46     	; 0x30c <write+0xe>

0000033a <write_cmd>:
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	e0 cf       	rjmp	.-64     	; 0x2fe <write>
     33e:	08 95       	ret

00000340 <TickSNESControl>:
     340:	e8 2f       	mov	r30, r24
     342:	80 b1       	in	r24, 0x00	; 0
     344:	80 95       	com	r24
     346:	82 fb       	bst	r24, 2
     348:	22 27       	eor	r18, r18
     34a:	20 f9       	bld	r18, 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	8e 2f       	mov	r24, r30
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	88 30       	cpi	r24, 0x08	; 8
     354:	91 05       	cpc	r25, r1
     356:	28 f4       	brcc	.+10     	; 0x362 <TickSNESControl+0x22>
     358:	fc 01       	movw	r30, r24
     35a:	ea 5b       	subi	r30, 0xBA	; 186
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__tablejump2__>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	72 c0       	rjmp	.+228    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     366:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <countSNESControl>
     36a:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <countSNESControl+0x1>
     36e:	06 97       	sbiw	r24, 0x06	; 6
     370:	40 f5       	brcc	.+80     	; 0x3c2 <TickSNESControl+0x82>
     372:	16 c0       	rjmp	.+44     	; 0x3a0 <TickSNESControl+0x60>
     374:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <countSNESControl>
     378:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <countSNESControl+0x1>
     37c:	40 97       	sbiw	r24, 0x10	; 16
     37e:	08 f0       	brcs	.+2      	; 0x382 <TickSNESControl+0x42>
     380:	4f c0       	rjmp	.+158    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     382:	27 c0       	rjmp	.+78     	; 0x3d2 <TickSNESControl+0x92>
     384:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <countSNESControl+0x1>
     388:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <countSNESControl>
     38c:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <SNESOutput+0x1>
     390:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <SNESOutput>
     394:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <dataSNESControl+0x1>
     398:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <dataSNESControl>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	55 c0       	rjmp	.+170    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3a0:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <countSNESControl>
     3a4:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <countSNESControl+0x1>
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <countSNESControl+0x1>
     3ae:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <countSNESControl>
     3b2:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <dataSNESControl+0x1>
     3b6:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <dataSNESControl>
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	44 c0       	rjmp	.+136    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3c2:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <countSNESControl+0x1>
     3c6:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <countSNESControl>
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	3c c0       	rjmp	.+120    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3d2:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <dataSNESControl>
     3d6:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <dataSNESControl+0x1>
     3da:	82 2b       	or	r24, r18
     3dc:	93 2b       	or	r25, r19
     3de:	90 93 a2 06 	sts	0x06A2, r25	; 0x8006a2 <dataSNESControl+0x1>
     3e2:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <dataSNESControl>
     3e6:	85 e0       	ldi	r24, 0x05	; 5
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	2e c0       	rjmp	.+92     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3ee:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <countSNESControl>
     3f2:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <countSNESControl+0x1>
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <countSNESControl+0x1>
     3fc:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <countSNESControl>
     400:	40 97       	sbiw	r24, 0x10	; 16
     402:	00 f5       	brcc	.+64     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     404:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <dataSNESControl>
     408:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <dataSNESControl+0x1>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	90 93 a2 06 	sts	0x06A2, r25	; 0x8006a2 <dataSNESControl+0x1>
     414:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <dataSNESControl>
     418:	86 e0       	ldi	r24, 0x06	; 6
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	51 e0       	ldi	r21, 0x01	; 1
     41e:	15 c0       	rjmp	.+42     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     420:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <countSNESControl+0x1>
     424:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <countSNESControl>
     428:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <dataSNESControl>
     42c:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <dataSNESControl+0x1>
     430:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <SNESOutput+0x1>
     434:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <SNESOutput>
     438:	87 e0       	ldi	r24, 0x07	; 7
     43a:	07 c0       	rjmp	.+14     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     43c:	84 e0       	ldi	r24, 0x04	; 4
     43e:	40 e0       	ldi	r20, 0x00	; 0
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     444:	86 e0       	ldi	r24, 0x06	; 6
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	51 e0       	ldi	r21, 0x01	; 1
     44a:	22 0f       	add	r18, r18
     44c:	33 1f       	adc	r19, r19
     44e:	22 0f       	add	r18, r18
     450:	33 1f       	adc	r19, r19
     452:	25 2b       	or	r18, r21
     454:	94 2f       	mov	r25, r20
     456:	99 0f       	add	r25, r25
     458:	29 2b       	or	r18, r25
     45a:	22 b9       	out	0x02, r18	; 2
     45c:	08 95       	ret

0000045e <TickPWMMotor>:
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	09 f4       	brne	.+2      	; 0x464 <TickPWMMotor+0x6>
     462:	56 c0       	rjmp	.+172    	; 0x510 <TickPWMMotor+0xb2>
     464:	e0 f0       	brcs	.+56     	; 0x49e <TickPWMMotor+0x40>
     466:	84 30       	cpi	r24, 0x04	; 4
     468:	19 f0       	breq	.+6      	; 0x470 <TickPWMMotor+0x12>
     46a:	85 30       	cpi	r24, 0x05	; 5
     46c:	69 f0       	breq	.+26     	; 0x488 <TickPWMMotor+0x2a>
     46e:	46 c0       	rjmp	.+140    	; 0x4fc <TickPWMMotor+0x9e>
     470:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <PWMCount>
     474:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <PWMCount+0x1>
     478:	05 97       	sbiw	r24, 0x05	; 5
     47a:	08 f4       	brcc	.+2      	; 0x47e <TickPWMMotor+0x20>
     47c:	49 c0       	rjmp	.+146    	; 0x510 <TickPWMMotor+0xb2>
     47e:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <PWMCount+0x1>
     482:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <PWMCount>
     486:	3f c0       	rjmp	.+126    	; 0x506 <TickPWMMotor+0xa8>
     488:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <PWMCount>
     48c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <PWMCount+0x1>
     490:	05 97       	sbiw	r24, 0x05	; 5
     492:	c8 f1       	brcs	.+114    	; 0x506 <TickPWMMotor+0xa8>
     494:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <PWMCount+0x1>
     498:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <PWMCount>
     49c:	39 c0       	rjmp	.+114    	; 0x510 <TickPWMMotor+0xb2>
     49e:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <tempC>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	2c c0       	rjmp	.+88     	; 0x4fe <TickPWMMotor+0xa0>
     4a6:	8f ef       	ldi	r24, 0xFF	; 255
     4a8:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <tempC>
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <rumbleMes>
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <TickPWMMotor+0x5e>
     4b4:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <tempC>
     4b8:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <rumbleMes>
     4bc:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <PWMCount>
     4c0:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <PWMCount+0x1>
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <PWMCount+0x1>
     4ca:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <PWMCount>
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	16 c0       	rjmp	.+44     	; 0x4fe <TickPWMMotor+0xa0>
     4d2:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <tempC>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <rumbleMes>
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <TickPWMMotor+0x88>
     4de:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <tempC>
     4e2:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <rumbleMes>
     4e6:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <PWMCount>
     4ea:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <PWMCount+0x1>
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <PWMCount+0x1>
     4f4:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <PWMCount>
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <TickPWMMotor+0xa0>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <tempC>
     502:	98 b9       	out	0x08, r25	; 8
     504:	08 95       	ret
     506:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <rumbleOn>
     50a:	81 11       	cpse	r24, r1
     50c:	e2 cf       	rjmp	.-60     	; 0x4d2 <TickPWMMotor+0x74>
     50e:	e7 cf       	rjmp	.-50     	; 0x4de <TickPWMMotor+0x80>
     510:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <rumbleOn>
     514:	81 11       	cpse	r24, r1
     516:	c7 cf       	rjmp	.-114    	; 0x4a6 <TickPWMMotor+0x48>
     518:	cd cf       	rjmp	.-102    	; 0x4b4 <TickPWMMotor+0x56>

0000051a <TickPWMMotorManager>:
     51a:	82 30       	cpi	r24, 0x02	; 2
     51c:	61 f0       	breq	.+24     	; 0x536 <TickPWMMotorManager+0x1c>
     51e:	28 f4       	brcc	.+10     	; 0x52a <TickPWMMotorManager+0x10>
     520:	88 23       	and	r24, r24
     522:	d1 f0       	breq	.+52     	; 0x558 <TickPWMMotorManager+0x3e>
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	21 f1       	breq	.+72     	; 0x570 <TickPWMMotorManager+0x56>
     528:	5d c0       	rjmp	.+186    	; 0x5e4 <TickPWMMotorManager+0xca>
     52a:	84 30       	cpi	r24, 0x04	; 4
     52c:	49 f0       	breq	.+18     	; 0x540 <TickPWMMotorManager+0x26>
     52e:	a8 f1       	brcs	.+106    	; 0x59a <TickPWMMotorManager+0x80>
     530:	85 30       	cpi	r24, 0x05	; 5
     532:	f1 f0       	breq	.+60     	; 0x570 <TickPWMMotorManager+0x56>
     534:	57 c0       	rjmp	.+174    	; 0x5e4 <TickPWMMotorManager+0xca>
     536:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <vibrateQueueSize>
     53a:	81 11       	cpse	r24, r1
     53c:	1d c0       	rjmp	.+58     	; 0x578 <TickPWMMotorManager+0x5e>
     53e:	18 c0       	rjmp	.+48     	; 0x570 <TickPWMMotorManager+0x56>
     540:	20 91 b7 06 	lds	r18, 0x06B7	; 0x8006b7 <vibrateDuration>
     544:	30 91 b8 06 	lds	r19, 0x06B8	; 0x8006b8 <vibrateDuration+0x1>
     548:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <vibrateQueueCount>
     54c:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <vibrateQueueCount+0x1>
     550:	82 17       	cp	r24, r18
     552:	93 07       	cpc	r25, r19
     554:	80 f5       	brcc	.+96     	; 0x5b6 <TickPWMMotorManager+0x9c>
     556:	21 c0       	rjmp	.+66     	; 0x59a <TickPWMMotorManager+0x80>
     558:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <vibrateQueueSize>
     55c:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <vibrateQueueStart>
     560:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <vibrateQueueEnd>
     564:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <vibrateDuration+0x1>
     568:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <vibrateDuration>
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret
     570:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <rumbleOn>
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	08 95       	ret
     578:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <vibrateQueueStart>
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	ea 56       	subi	r30, 0x6A	; 106
     580:	f9 4f       	sbci	r31, 0xF9	; 249
     582:	80 81       	ld	r24, Z
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <vibrateDuration+0x1>
     58a:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <vibrateDuration>
     58e:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <vibrateQueueCount+0x1>
     592:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <vibrateQueueCount>
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	08 95       	ret
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <rumbleOn>
     5a0:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <vibrateQueueCount>
     5a4:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <vibrateQueueCount+0x1>
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <vibrateQueueCount+0x1>
     5ae:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <vibrateQueueCount>
     5b2:	84 e0       	ldi	r24, 0x04	; 4
     5b4:	08 95       	ret
     5b6:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <rumbleOn>
     5ba:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <vibrateQueueStart>
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	18 f0       	brcs	.+6      	; 0x5c8 <TickPWMMotorManager+0xae>
     5c2:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <vibrateQueueStart>
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <TickPWMMotorManager+0xb4>
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <vibrateQueueStart>
     5ce:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <vibrateQueueSize>
     5d2:	81 50       	subi	r24, 0x01	; 1
     5d4:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <vibrateQueueSize>
     5d8:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <vibrateQueueCount+0x1>
     5dc:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <vibrateQueueCount>
     5e0:	85 e0       	ldi	r24, 0x05	; 5
     5e2:	08 95       	ret
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret

000005e8 <TimerSet>:
     5e8:	60 93 c0 03 	sts	0x03C0, r22	; 0x8003c0 <_avr_timer_M>
     5ec:	70 93 c1 03 	sts	0x03C1, r23	; 0x8003c1 <_avr_timer_M+0x1>
     5f0:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <_avr_timer_M+0x2>
     5f4:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <_avr_timer_M+0x3>
     5f8:	60 93 89 06 	sts	0x0689, r22	; 0x800689 <_avr_timer_cntcurr>
     5fc:	70 93 8a 06 	sts	0x068A, r23	; 0x80068a <_avr_timer_cntcurr+0x1>
     600:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <_avr_timer_cntcurr+0x2>
     604:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <_avr_timer_cntcurr+0x3>
     608:	08 95       	ret

0000060a <TimerOn>:
     60a:	8b e0       	ldi	r24, 0x0B	; 11
     60c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     610:	8d e7       	ldi	r24, 0x7D	; 125
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     618:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     622:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     626:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     62a:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_avr_timer_M>
     62e:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <_avr_timer_M+0x1>
     632:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <_avr_timer_M+0x2>
     636:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <_avr_timer_M+0x3>
     63a:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <_avr_timer_cntcurr>
     63e:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <_avr_timer_cntcurr+0x1>
     642:	a0 93 8b 06 	sts	0x068B, r26	; 0x80068b <_avr_timer_cntcurr+0x2>
     646:	b0 93 8c 06 	sts	0x068C, r27	; 0x80068c <_avr_timer_cntcurr+0x3>
     64a:	8f b7       	in	r24, 0x3f	; 63
     64c:	80 68       	ori	r24, 0x80	; 128
     64e:	8f bf       	out	0x3f, r24	; 63
     650:	08 95       	ret

00000652 <__vector_13>:
     652:	1f 92       	push	r1
     654:	0f 92       	push	r0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	0f 92       	push	r0
     65a:	11 24       	eor	r1, r1
     65c:	8f 93       	push	r24
     65e:	9f 93       	push	r25
     660:	af 93       	push	r26
     662:	bf 93       	push	r27
     664:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <_avr_timer_cntcurr>
     668:	90 91 8a 06 	lds	r25, 0x068A	; 0x80068a <_avr_timer_cntcurr+0x1>
     66c:	a0 91 8b 06 	lds	r26, 0x068B	; 0x80068b <_avr_timer_cntcurr+0x2>
     670:	b0 91 8c 06 	lds	r27, 0x068C	; 0x80068c <_avr_timer_cntcurr+0x3>
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	a1 09       	sbc	r26, r1
     678:	b1 09       	sbc	r27, r1
     67a:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <_avr_timer_cntcurr>
     67e:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <_avr_timer_cntcurr+0x1>
     682:	a0 93 8b 06 	sts	0x068B, r26	; 0x80068b <_avr_timer_cntcurr+0x2>
     686:	b0 93 8c 06 	sts	0x068C, r27	; 0x80068c <_avr_timer_cntcurr+0x3>
     68a:	89 2b       	or	r24, r25
     68c:	8a 2b       	or	r24, r26
     68e:	8b 2b       	or	r24, r27
     690:	99 f4       	brne	.+38     	; 0x6b8 <__vector_13+0x66>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <TimerFlag>
     698:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_avr_timer_M>
     69c:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <_avr_timer_M+0x1>
     6a0:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <_avr_timer_M+0x2>
     6a4:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <_avr_timer_M+0x3>
     6a8:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <_avr_timer_cntcurr>
     6ac:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <_avr_timer_cntcurr+0x1>
     6b0:	a0 93 8b 06 	sts	0x068B, r26	; 0x80068b <_avr_timer_cntcurr+0x2>
     6b4:	b0 93 8c 06 	sts	0x068C, r27	; 0x80068c <_avr_timer_cntcurr+0x3>
     6b8:	bf 91       	pop	r27
     6ba:	af 91       	pop	r26
     6bc:	9f 91       	pop	r25
     6be:	8f 91       	pop	r24
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <nokia_lcd_init>:
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	51 9a       	sbi	0x0a, 1	; 10
     6d0:	52 9a       	sbi	0x0a, 2	; 10
     6d2:	53 9a       	sbi	0x0a, 3	; 10
     6d4:	54 9a       	sbi	0x0a, 4	; 10
     6d6:	55 9a       	sbi	0x0a, 5	; 10
     6d8:	5a 9a       	sbi	0x0b, 2	; 11
     6da:	59 9a       	sbi	0x0b, 1	; 11
     6dc:	8f e4       	ldi	r24, 0x4F	; 79
     6de:	93 ec       	ldi	r25, 0xC3	; 195
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <nokia_lcd_init+0x16>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <nokia_lcd_init+0x1c>
     6e6:	00 00       	nop
     6e8:	5a 98       	cbi	0x0b, 2	; 11
     6ea:	9f eb       	ldi	r25, 0xBF	; 191
     6ec:	25 e4       	ldi	r18, 0x45	; 69
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	91 50       	subi	r25, 0x01	; 1
     6f2:	20 40       	sbci	r18, 0x00	; 0
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	e1 f7       	brne	.-8      	; 0x6f0 <nokia_lcd_init+0x26>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <nokia_lcd_init+0x30>
     6fa:	00 00       	nop
     6fc:	5a 9a       	sbi	0x0b, 2	; 11
     6fe:	59 98       	cbi	0x0b, 1	; 11
     700:	81 e2       	ldi	r24, 0x21	; 33
     702:	1b de       	rcall	.-970    	; 0x33a <write_cmd>
     704:	83 e1       	ldi	r24, 0x13	; 19
     706:	19 de       	rcall	.-974    	; 0x33a <write_cmd>
     708:	86 e0       	ldi	r24, 0x06	; 6
     70a:	17 de       	rcall	.-978    	; 0x33a <write_cmd>
     70c:	82 ec       	ldi	r24, 0xC2	; 194
     70e:	15 de       	rcall	.-982    	; 0x33a <write_cmd>
     710:	80 e2       	ldi	r24, 0x20	; 32
     712:	13 de       	rcall	.-986    	; 0x33a <write_cmd>
     714:	89 e0       	ldi	r24, 0x09	; 9
     716:	11 de       	rcall	.-990    	; 0x33a <write_cmd>
     718:	80 e8       	ldi	r24, 0x80	; 128
     71a:	0f de       	rcall	.-994    	; 0x33a <write_cmd>
     71c:	80 e4       	ldi	r24, 0x40	; 64
     71e:	0d de       	rcall	.-998    	; 0x33a <write_cmd>
     720:	c8 ef       	ldi	r28, 0xF8	; 248
     722:	d1 e0       	ldi	r29, 0x01	; 1
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	ea dd       	rcall	.-1068   	; 0x2fe <write>
     72a:	21 97       	sbiw	r28, 0x01	; 1
     72c:	d9 f7       	brne	.-10     	; 0x724 <nokia_lcd_init+0x5a>
     72e:	88 e0       	ldi	r24, 0x08	; 8
     730:	04 de       	rcall	.-1016   	; 0x33a <write_cmd>
     732:	8c e0       	ldi	r24, 0x0C	; 12
     734:	02 de       	rcall	.-1020   	; 0x33a <write_cmd>
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <nokia_lcd_clear>:
     73c:	80 e8       	ldi	r24, 0x80	; 128
     73e:	fd dd       	rcall	.-1030   	; 0x33a <write_cmd>
     740:	80 e4       	ldi	r24, 0x40	; 64
     742:	fb dd       	rcall	.-1034   	; 0x33a <write_cmd>
     744:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <nokia_lcd+0x1f8>
     748:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <nokia_lcd+0x1f9>
     74c:	ef e8       	ldi	r30, 0x8F	; 143
     74e:	f4 e0       	ldi	r31, 0x04	; 4
     750:	87 e8       	ldi	r24, 0x87	; 135
     752:	96 e0       	ldi	r25, 0x06	; 6
     754:	11 92       	st	Z+, r1
     756:	e8 17       	cp	r30, r24
     758:	f9 07       	cpc	r31, r25
     75a:	e1 f7       	brne	.-8      	; 0x754 <nokia_lcd_clear+0x18>
     75c:	08 95       	ret

0000075e <nokia_lcd_set_pixel>:
     75e:	26 2f       	mov	r18, r22
     760:	26 95       	lsr	r18
     762:	26 95       	lsr	r18
     764:	26 95       	lsr	r18
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	34 e5       	ldi	r19, 0x54	; 84
     76a:	23 9f       	mul	r18, r19
     76c:	80 0d       	add	r24, r0
     76e:	91 1d       	adc	r25, r1
     770:	11 24       	eor	r1, r1
     772:	44 23       	and	r20, r20
     774:	79 f0       	breq	.+30     	; 0x794 <nokia_lcd_set_pixel+0x36>
     776:	fc 01       	movw	r30, r24
     778:	e1 57       	subi	r30, 0x71	; 113
     77a:	fb 4f       	sbci	r31, 0xFB	; 251
     77c:	67 70       	andi	r22, 0x07	; 7
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <nokia_lcd_set_pixel+0x2a>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	6a 95       	dec	r22
     78a:	e2 f7       	brpl	.-8      	; 0x784 <nokia_lcd_set_pixel+0x26>
     78c:	90 81       	ld	r25, Z
     78e:	89 2b       	or	r24, r25
     790:	80 83       	st	Z, r24
     792:	08 95       	ret
     794:	fc 01       	movw	r30, r24
     796:	e1 57       	subi	r30, 0x71	; 113
     798:	fb 4f       	sbci	r31, 0xFB	; 251
     79a:	67 70       	andi	r22, 0x07	; 7
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <nokia_lcd_set_pixel+0x48>
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	6a 95       	dec	r22
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <nokia_lcd_set_pixel+0x44>
     7aa:	80 95       	com	r24
     7ac:	90 81       	ld	r25, Z
     7ae:	89 23       	and	r24, r25
     7b0:	80 83       	st	Z, r24
     7b2:	08 95       	ret

000007b4 <nokia_lcd_write_char>:
     7b4:	5f 92       	push	r5
     7b6:	6f 92       	push	r6
     7b8:	7f 92       	push	r7
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	56 2e       	mov	r5, r22
     7d4:	26 2f       	mov	r18, r22
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	49 01       	movw	r8, r18
     7da:	88 0c       	add	r8, r8
     7dc:	99 1c       	adc	r9, r9
     7de:	88 0c       	add	r8, r8
     7e0:	99 1c       	adc	r9, r9
     7e2:	82 0e       	add	r8, r18
     7e4:	93 1e       	adc	r9, r19
     7e6:	18 14       	cp	r1, r8
     7e8:	19 04       	cpc	r1, r9
     7ea:	0c f0       	brlt	.+2      	; 0x7ee <nokia_lcd_write_char+0x3a>
     7ec:	5b c0       	rjmp	.+182    	; 0x8a4 <nokia_lcd_write_char+0xf0>
     7ee:	89 01       	movw	r16, r18
     7f0:	00 0f       	add	r16, r16
     7f2:	11 1f       	adc	r17, r17
     7f4:	00 0f       	add	r16, r16
     7f6:	11 1f       	adc	r17, r17
     7f8:	00 0f       	add	r16, r16
     7fa:	11 1f       	adc	r17, r17
     7fc:	02 1b       	sub	r16, r18
     7fe:	13 0b       	sbc	r17, r19
     800:	61 2c       	mov	r6, r1
     802:	a8 2e       	mov	r10, r24
     804:	b1 2c       	mov	r11, r1
     806:	c5 01       	movw	r24, r10
     808:	80 97       	sbiw	r24, 0x20	; 32
     80a:	5c 01       	movw	r10, r24
     80c:	aa 0c       	add	r10, r10
     80e:	bb 1c       	adc	r11, r11
     810:	aa 0c       	add	r10, r10
     812:	bb 1c       	adc	r11, r11
     814:	a8 0e       	add	r10, r24
     816:	b9 1e       	adc	r11, r25
     818:	0f 2e       	mov	r0, r31
     81a:	f8 e8       	ldi	r31, 0x88	; 136
     81c:	cf 2e       	mov	r12, r31
     81e:	f6 e0       	ldi	r31, 0x06	; 6
     820:	df 2e       	mov	r13, r31
     822:	f0 2d       	mov	r31, r0
     824:	0f 2e       	mov	r0, r31
     826:	f7 e8       	ldi	r31, 0x87	; 135
     828:	ef 2e       	mov	r14, r31
     82a:	f6 e0       	ldi	r31, 0x06	; 6
     82c:	ff 2e       	mov	r15, r31
     82e:	f0 2d       	mov	r31, r0
     830:	2b c0       	rjmp	.+86     	; 0x888 <nokia_lcd_write_char+0xd4>
     832:	fe 01       	movw	r30, r28
     834:	24 91       	lpm	r18, Z
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	87 2d       	mov	r24, r7
     83a:	65 2d       	mov	r22, r5
     83c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__udivmodqi4>
     840:	02 c0       	rjmp	.+4      	; 0x846 <nokia_lcd_write_char+0x92>
     842:	35 95       	asr	r19
     844:	27 95       	ror	r18
     846:	8a 95       	dec	r24
     848:	e2 f7       	brpl	.-8      	; 0x842 <nokia_lcd_write_char+0x8e>
     84a:	20 ff       	sbrs	r18, 0
     84c:	09 c0       	rjmp	.+18     	; 0x860 <nokia_lcd_write_char+0xac>
     84e:	f6 01       	movw	r30, r12
     850:	60 81       	ld	r22, Z
     852:	67 0d       	add	r22, r7
     854:	f7 01       	movw	r30, r14
     856:	80 81       	ld	r24, Z
     858:	41 e0       	ldi	r20, 0x01	; 1
     85a:	86 0d       	add	r24, r6
     85c:	80 df       	rcall	.-256    	; 0x75e <nokia_lcd_set_pixel>
     85e:	08 c0       	rjmp	.+16     	; 0x870 <nokia_lcd_write_char+0xbc>
     860:	f6 01       	movw	r30, r12
     862:	60 81       	ld	r22, Z
     864:	67 0d       	add	r22, r7
     866:	f7 01       	movw	r30, r14
     868:	80 81       	ld	r24, Z
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	86 0d       	add	r24, r6
     86e:	77 df       	rcall	.-274    	; 0x75e <nokia_lcd_set_pixel>
     870:	73 94       	inc	r7
     872:	87 2d       	mov	r24, r7
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	80 17       	cp	r24, r16
     878:	91 07       	cpc	r25, r17
     87a:	dc f2       	brlt	.-74     	; 0x832 <nokia_lcd_write_char+0x7e>
     87c:	63 94       	inc	r6
     87e:	86 2d       	mov	r24, r6
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	88 15       	cp	r24, r8
     884:	99 05       	cpc	r25, r9
     886:	74 f4       	brge	.+28     	; 0x8a4 <nokia_lcd_write_char+0xf0>
     888:	10 16       	cp	r1, r16
     88a:	11 06       	cpc	r1, r17
     88c:	bc f7       	brge	.-18     	; 0x87c <nokia_lcd_write_char+0xc8>
     88e:	86 2d       	mov	r24, r6
     890:	65 2d       	mov	r22, r5
     892:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__udivmodqi4>
     896:	e5 01       	movw	r28, r10
     898:	c8 0f       	add	r28, r24
     89a:	d1 1d       	adc	r29, r1
     89c:	c2 52       	subi	r28, 0x22	; 34
     89e:	df 4f       	sbci	r29, 0xFF	; 255
     8a0:	71 2c       	mov	r7, r1
     8a2:	c7 cf       	rjmp	.-114    	; 0x832 <nokia_lcd_write_char+0x7e>
     8a4:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <nokia_lcd+0x1f8>
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	98 0f       	add	r25, r24
     8ac:	85 2d       	mov	r24, r5
     8ae:	88 0f       	add	r24, r24
     8b0:	88 0f       	add	r24, r24
     8b2:	85 0d       	add	r24, r5
     8b4:	89 0f       	add	r24, r25
     8b6:	84 35       	cpi	r24, 0x54	; 84
     8b8:	18 f4       	brcc	.+6      	; 0x8c0 <nokia_lcd_write_char+0x10c>
     8ba:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <nokia_lcd+0x1f8>
     8be:	0e c0       	rjmp	.+28     	; 0x8dc <nokia_lcd_write_char+0x128>
     8c0:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <nokia_lcd+0x1f8>
     8c4:	e8 e8       	ldi	r30, 0x88	; 136
     8c6:	f6 e0       	ldi	r31, 0x06	; 6
     8c8:	80 81       	ld	r24, Z
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	98 0f       	add	r25, r24
     8ce:	85 2d       	mov	r24, r5
     8d0:	88 0f       	add	r24, r24
     8d2:	88 0f       	add	r24, r24
     8d4:	88 0f       	add	r24, r24
     8d6:	85 19       	sub	r24, r5
     8d8:	89 0f       	add	r24, r25
     8da:	80 83       	st	Z, r24
     8dc:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <nokia_lcd+0x1f9>
     8e0:	80 33       	cpi	r24, 0x30	; 48
     8e2:	20 f0       	brcs	.+8      	; 0x8ec <nokia_lcd_write_char+0x138>
     8e4:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <nokia_lcd+0x1f8>
     8e8:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <nokia_lcd+0x1f9>
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	bf 90       	pop	r11
     8fe:	af 90       	pop	r10
     900:	9f 90       	pop	r9
     902:	8f 90       	pop	r8
     904:	7f 90       	pop	r7
     906:	6f 90       	pop	r6
     908:	5f 90       	pop	r5
     90a:	08 95       	ret

0000090c <nokia_lcd_write_string>:
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	88 81       	ld	r24, Y
     916:	88 23       	and	r24, r24
     918:	39 f0       	breq	.+14     	; 0x928 <nokia_lcd_write_string+0x1c>
     91a:	16 2f       	mov	r17, r22
     91c:	21 96       	adiw	r28, 0x01	; 1
     91e:	61 2f       	mov	r22, r17
     920:	49 df       	rcall	.-366    	; 0x7b4 <nokia_lcd_write_char>
     922:	89 91       	ld	r24, Y+
     924:	81 11       	cpse	r24, r1
     926:	fb cf       	rjmp	.-10     	; 0x91e <nokia_lcd_write_string+0x12>
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	08 95       	ret

00000930 <nokia_lcd_render>:
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	80 e8       	ldi	r24, 0x80	; 128
     93a:	ff dc       	rcall	.-1538   	; 0x33a <write_cmd>
     93c:	80 e4       	ldi	r24, 0x40	; 64
     93e:	fd dc       	rcall	.-1542   	; 0x33a <write_cmd>
     940:	cf e8       	ldi	r28, 0x8F	; 143
     942:	d4 e0       	ldi	r29, 0x04	; 4
     944:	07 e8       	ldi	r16, 0x87	; 135
     946:	16 e0       	ldi	r17, 0x06	; 6
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	89 91       	ld	r24, Y+
     94c:	d8 dc       	rcall	.-1616   	; 0x2fe <write>
     94e:	c0 17       	cp	r28, r16
     950:	d1 07       	cpc	r29, r17
     952:	d1 f7       	brne	.-12     	; 0x948 <nokia_lcd_render+0x18>
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <set_PWM>:
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	6b 01       	movw	r12, r22
     968:	7c 01       	movw	r14, r24
     96a:	9b 01       	movw	r18, r22
     96c:	ac 01       	movw	r20, r24
     96e:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <current_frequency.2317>
     972:	70 91 75 04 	lds	r23, 0x0475	; 0x800475 <current_frequency.2317+0x1>
     976:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <current_frequency.2317+0x2>
     97a:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <current_frequency.2317+0x3>
     97e:	0e 94 01 14 	call	0x2802	; 0x2802 <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <set_PWM+0x2a>
     986:	46 c0       	rjmp	.+140    	; 0xa14 <set_PWM+0xb6>
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	a9 01       	movw	r20, r18
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 01 14 	call	0x2802	; 0x2802 <__cmpsf2>
     996:	81 11       	cpse	r24, r1
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <set_PWM+0x44>
     99a:	85 b5       	in	r24, 0x25	; 37
     99c:	88 70       	andi	r24, 0x08	; 8
     99e:	85 bd       	out	0x25, r24	; 37
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <set_PWM+0x4a>
     9a2:	85 b5       	in	r24, 0x25	; 37
     9a4:	83 60       	ori	r24, 0x03	; 3
     9a6:	85 bd       	out	0x25, r24	; 37
     9a8:	28 e5       	ldi	r18, 0x58	; 88
     9aa:	39 e3       	ldi	r19, 0x39	; 57
     9ac:	44 e7       	ldi	r20, 0x74	; 116
     9ae:	5f e3       	ldi	r21, 0x3F	; 63
     9b0:	c7 01       	movw	r24, r14
     9b2:	b6 01       	movw	r22, r12
     9b4:	0e 94 01 14 	call	0x2802	; 0x2802 <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	1c f4       	brge	.+6      	; 0x9c2 <set_PWM+0x64>
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	87 bd       	out	0x27, r24	; 39
     9c0:	20 c0       	rjmp	.+64     	; 0xa02 <set_PWM+0xa4>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	34 e2       	ldi	r19, 0x24	; 36
     9c6:	44 ef       	ldi	r20, 0xF4	; 244
     9c8:	56 e4       	ldi	r21, 0x46	; 70
     9ca:	c7 01       	movw	r24, r14
     9cc:	b6 01       	movw	r22, r12
     9ce:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__gesf2>
     9d2:	18 16       	cp	r1, r24
     9d4:	14 f4       	brge	.+4      	; 0x9da <set_PWM+0x7c>
     9d6:	17 bc       	out	0x27, r1	; 39
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <set_PWM+0xa4>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	53 e4       	ldi	r21, 0x43	; 67
     9e2:	c7 01       	movw	r24, r14
     9e4:	b6 01       	movw	r22, r12
     9e6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__mulsf3>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	74 e2       	ldi	r23, 0x24	; 36
     9f2:	84 ef       	ldi	r24, 0xF4	; 244
     9f4:	9a e4       	ldi	r25, 0x4A	; 74
     9f6:	0e 94 05 14 	call	0x280a	; 0x280a <__divsf3>
     9fa:	0e 94 6d 14 	call	0x28da	; 0x28da <__fixsfsi>
     9fe:	61 50       	subi	r22, 0x01	; 1
     a00:	67 bd       	out	0x27, r22	; 39
     a02:	16 bc       	out	0x26, r1	; 38
     a04:	c0 92 74 04 	sts	0x0474, r12	; 0x800474 <current_frequency.2317>
     a08:	d0 92 75 04 	sts	0x0475, r13	; 0x800475 <current_frequency.2317+0x1>
     a0c:	e0 92 76 04 	sts	0x0476, r14	; 0x800476 <current_frequency.2317+0x2>
     a10:	f0 92 77 04 	sts	0x0477, r15	; 0x800477 <current_frequency.2317+0x3>
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	08 95       	ret

00000a1e <TickSound>:
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	c8 2f       	mov	r28, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	87 30       	cpi	r24, 0x07	; 7
     a2e:	91 05       	cpc	r25, r1
     a30:	08 f0       	brcs	.+2      	; 0xa34 <TickSound+0x16>
     a32:	1c c1       	rjmp	.+568    	; 0xc6c <TickSound+0x24e>
     a34:	fc 01       	movw	r30, r24
     a36:	e2 5b       	subi	r30, 0xB2	; 178
     a38:	ff 4f       	sbci	r31, 0xFF	; 255
     a3a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__tablejump2__>
     a3e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	09 f0       	breq	.+2      	; 0xa48 <TickSound+0x2a>
     a46:	4c c0       	rjmp	.+152    	; 0xae0 <TickSound+0xc2>
     a48:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <soundQueueSize>
     a4c:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <soundQueueStart>
     a50:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <soundQueueEnd>
     a54:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <soundQueueCount+0x1>
     a58:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <soundQueueCount>
     a5c:	ca c0       	rjmp	.+404    	; 0xbf2 <TickSound+0x1d4>
     a5e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	e9 f1       	breq	.+122    	; 0xae0 <TickSound+0xc2>
     a66:	85 30       	cpi	r24, 0x05	; 5
     a68:	09 f4       	brne	.+2      	; 0xa6c <TickSound+0x4e>
     a6a:	44 c0       	rjmp	.+136    	; 0xaf4 <TickSound+0xd6>
     a6c:	86 30       	cpi	r24, 0x06	; 6
     a6e:	51 f4       	brne	.+20     	; 0xa84 <TickSound+0x66>
     a70:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <noteIndex>
     a74:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <countSound+0x1>
     a78:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <countSound>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	c1 c0       	rjmp	.+386    	; 0xc06 <TickSound+0x1e8>
     a84:	89 30       	cpi	r24, 0x09	; 9
     a86:	09 f0       	breq	.+2      	; 0xa8a <TickSound+0x6c>
     a88:	fb c0       	rjmp	.+502    	; 0xc80 <TickSound+0x262>
     a8a:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <noteIndex>
     a8e:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <countSound+0x1>
     a92:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <countSound>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	35 c0       	rjmp	.+106    	; 0xb08 <TickSound+0xea>
     a9e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     aa2:	82 30       	cpi	r24, 0x02	; 2
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <TickSound+0x8a>
     aa6:	f1 c0       	rjmp	.+482    	; 0xc8a <TickSound+0x26c>
     aa8:	1b c0       	rjmp	.+54     	; 0xae0 <TickSound+0xc2>
     aaa:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     aae:	84 30       	cpi	r24, 0x04	; 4
     ab0:	09 f0       	breq	.+2      	; 0xab4 <TickSound+0x96>
     ab2:	de c0       	rjmp	.+444    	; 0xc70 <TickSound+0x252>
     ab4:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <soundQueueSize>
     ab8:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <soundQueueStart>
     abc:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <soundQueueEnd>
     ac0:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <soundQueueCount+0x1>
     ac4:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <soundQueueCount>
     ac8:	94 c0       	rjmp	.+296    	; 0xbf2 <TickSound+0x1d4>
     aca:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	89 f4       	brne	.+34     	; 0xaf4 <TickSound+0xd6>
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <TickSound+0xc2>
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	cb 01       	movw	r24, r22
     ada:	41 df       	rcall	.-382    	; 0x95e <set_PWM>
     adc:	c1 e0       	ldi	r28, 0x01	; 1
     ade:	dd c0       	rjmp	.+442    	; 0xc9a <TickSound+0x27c>
     ae0:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <freqOut>
     ae4:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <freqOut+0x1>
     ae8:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <freqOut+0x2>
     aec:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <freqOut+0x3>
     af0:	c2 e0       	ldi	r28, 0x02	; 2
     af2:	d3 c0       	rjmp	.+422    	; 0xc9a <TickSound+0x27c>
     af4:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <freqOut>
     af8:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <freqOut+0x1>
     afc:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <freqOut+0x2>
     b00:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <freqOut+0x3>
     b04:	c4 e0       	ldi	r28, 0x04	; 4
     b06:	c9 c0       	rjmp	.+402    	; 0xc9a <TickSound+0x27c>
     b08:	fc 01       	movw	r30, r24
     b0a:	e0 5b       	subi	r30, 0xB0	; 176
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	80 81       	ld	r24, Z
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	40 91 7c 04 	lds	r20, 0x047C	; 0x80047c <countSound>
     b16:	50 91 7d 04 	lds	r21, 0x047D	; 0x80047d <countSound+0x1>
     b1a:	84 17       	cp	r24, r20
     b1c:	95 07       	cpc	r25, r21
     b1e:	38 f0       	brcs	.+14     	; 0xb2e <TickSound+0x110>
     b20:	2f 5f       	subi	r18, 0xFF	; 255
     b22:	20 93 cf 06 	sts	0x06CF, r18	; 0x8006cf <noteIndex>
     b26:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <countSound+0x1>
     b2a:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <countSound>
     b2e:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <noteIndex>
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	e2 56       	subi	r30, 0x62	; 98
     b3e:	fe 4f       	sbci	r31, 0xFE	; 254
     b40:	80 81       	ld	r24, Z
     b42:	91 81       	ldd	r25, Z+1	; 0x01
     b44:	a2 81       	ldd	r26, Z+2	; 0x02
     b46:	b3 81       	ldd	r27, Z+3	; 0x03
     b48:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <freqOut>
     b4c:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <freqOut+0x1>
     b50:	a0 93 7a 04 	sts	0x047A, r26	; 0x80047a <freqOut+0x2>
     b54:	b0 93 7b 04 	sts	0x047B, r27	; 0x80047b <freqOut+0x3>
     b58:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <countSound>
     b5c:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <countSound+0x1>
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <countSound+0x1>
     b66:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <countSound>
     b6a:	c6 e0       	ldi	r28, 0x06	; 6
     b6c:	96 c0       	rjmp	.+300    	; 0xc9a <TickSound+0x27c>
     b6e:	00 91 a4 06 	lds	r16, 0x06A4	; 0x8006a4 <soundQueueCount>
     b72:	10 91 a5 06 	lds	r17, 0x06A5	; 0x8006a5 <soundQueueCount+0x1>
     b76:	03 30       	cpi	r16, 0x03	; 3
     b78:	11 05       	cpc	r17, r1
     b7a:	48 f5       	brcc	.+82     	; 0xbce <TickSound+0x1b0>
     b7c:	e0 90 7f 04 	lds	r14, 0x047F	; 0x80047f <soundQueueStart>
     b80:	f1 2c       	mov	r15, r1
     b82:	c7 01       	movw	r24, r14
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	9c 01       	movw	r18, r24
     b8e:	27 55       	subi	r18, 0x57	; 87
     b90:	39 4f       	sbci	r19, 0xF9	; 249
     b92:	79 01       	movw	r14, r18
     b94:	b8 01       	movw	r22, r16
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 9e 14 	call	0x293c	; 0x293c <__floatunsisf>
     b9e:	9b 01       	movw	r18, r22
     ba0:	ac 01       	movw	r20, r24
     ba2:	f7 01       	movw	r30, r14
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	82 81       	ldd	r24, Z+2	; 0x02
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	0e 94 9d 13 	call	0x273a	; 0x273a <__addsf3>
     bb0:	60 93 78 04 	sts	0x0478, r22	; 0x800478 <freqOut>
     bb4:	70 93 79 04 	sts	0x0479, r23	; 0x800479 <freqOut+0x1>
     bb8:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <freqOut+0x2>
     bbc:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <freqOut+0x3>
     bc0:	0f 5f       	subi	r16, 0xFF	; 255
     bc2:	1f 4f       	sbci	r17, 0xFF	; 255
     bc4:	10 93 a5 06 	sts	0x06A5, r17	; 0x8006a5 <soundQueueCount+0x1>
     bc8:	00 93 a4 06 	sts	0x06A4, r16	; 0x8006a4 <soundQueueCount>
     bcc:	66 c0       	rjmp	.+204    	; 0xc9a <TickSound+0x27c>
     bce:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <soundQueueStart>
     bd2:	92 30       	cpi	r25, 0x02	; 2
     bd4:	18 f0       	brcs	.+6      	; 0xbdc <TickSound+0x1be>
     bd6:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <soundQueueStart>
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <TickSound+0x1c4>
     bdc:	9f 5f       	subi	r25, 0xFF	; 255
     bde:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <soundQueueStart>
     be2:	81 50       	subi	r24, 0x01	; 1
     be4:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <soundQueueSize>
     be8:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <soundQueueCount+0x1>
     bec:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <soundQueueCount>
     bf0:	54 c0       	rjmp	.+168    	; 0xc9a <TickSound+0x27c>
     bf2:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <freqOut>
     bf6:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <freqOut+0x1>
     bfa:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <freqOut+0x2>
     bfe:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <freqOut+0x3>
     c02:	c3 e0       	ldi	r28, 0x03	; 3
     c04:	4a c0       	rjmp	.+148    	; 0xc9a <TickSound+0x27c>
     c06:	fc 01       	movw	r30, r24
     c08:	e0 50       	subi	r30, 0x00	; 0
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	80 81       	ld	r24, Z
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	40 91 7c 04 	lds	r20, 0x047C	; 0x80047c <countSound>
     c14:	50 91 7d 04 	lds	r21, 0x047D	; 0x80047d <countSound+0x1>
     c18:	84 17       	cp	r24, r20
     c1a:	95 07       	cpc	r25, r21
     c1c:	38 f0       	brcs	.+14     	; 0xc2c <TickSound+0x20e>
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	20 93 cf 06 	sts	0x06CF, r18	; 0x8006cf <noteIndex>
     c24:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <countSound+0x1>
     c28:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <countSound>
     c2c:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <noteIndex>
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	e0 5f       	subi	r30, 0xF0	; 240
     c3c:	fe 4f       	sbci	r31, 0xFE	; 254
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	a2 81       	ldd	r26, Z+2	; 0x02
     c44:	b3 81       	ldd	r27, Z+3	; 0x03
     c46:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <freqOut>
     c4a:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <freqOut+0x1>
     c4e:	a0 93 7a 04 	sts	0x047A, r26	; 0x80047a <freqOut+0x2>
     c52:	b0 93 7b 04 	sts	0x047B, r27	; 0x80047b <freqOut+0x3>
     c56:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <countSound>
     c5a:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <countSound+0x1>
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <countSound+0x1>
     c64:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <countSound>
     c68:	c5 e0       	ldi	r28, 0x05	; 5
     c6a:	17 c0       	rjmp	.+46     	; 0xc9a <TickSound+0x27c>
     c6c:	c0 e0       	ldi	r28, 0x00	; 0
     c6e:	15 c0       	rjmp	.+42     	; 0xc9a <TickSound+0x27c>
     c70:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <noteIndex>
     c74:	82 2f       	mov	r24, r18
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	8f 30       	cpi	r24, 0x0F	; 15
     c7a:	91 05       	cpc	r25, r1
     c7c:	24 f2       	brlt	.-120    	; 0xc06 <TickSound+0x1e8>
     c7e:	0d c0       	rjmp	.+26     	; 0xc9a <TickSound+0x27c>
     c80:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <soundQueueSize>
     c84:	81 11       	cpse	r24, r1
     c86:	73 cf       	rjmp	.-282    	; 0xb6e <TickSound+0x150>
     c88:	b4 cf       	rjmp	.-152    	; 0xbf2 <TickSound+0x1d4>
     c8a:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <noteIndex>
     c8e:	82 2f       	mov	r24, r18
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	8d 34       	cpi	r24, 0x4D	; 77
     c94:	91 05       	cpc	r25, r1
     c96:	0c f4       	brge	.+2      	; 0xc9a <TickSound+0x27c>
     c98:	37 cf       	rjmp	.-402    	; 0xb08 <TickSound+0xea>
     c9a:	60 91 78 04 	lds	r22, 0x0478	; 0x800478 <freqOut>
     c9e:	70 91 79 04 	lds	r23, 0x0479	; 0x800479 <freqOut+0x1>
     ca2:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <freqOut+0x2>
     ca6:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <freqOut+0x3>
     caa:	59 de       	rcall	.-846    	; 0x95e <set_PWM>
     cac:	8c 2f       	mov	r24, r28
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	08 95       	ret

00000cba <PWM_on>:
     cba:	89 e4       	ldi	r24, 0x49	; 73
     cbc:	84 bd       	out	0x24, r24	; 36
     cbe:	8b e0       	ldi	r24, 0x0B	; 11
     cc0:	85 bd       	out	0x25, r24	; 37
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	cb 01       	movw	r24, r22
     cc8:	4a ce       	rjmp	.-876    	; 0x95e <set_PWM>
     cca:	08 95       	ret

00000ccc <transferObjToDis>:
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEnemy, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
     ccc:	2f 92       	push	r2
     cce:	3f 92       	push	r3
     cd0:	4f 92       	push	r4
     cd2:	5f 92       	push	r5
     cd4:	6f 92       	push	r6
     cd6:	7f 92       	push	r7
     cd8:	8f 92       	push	r8
     cda:	9f 92       	push	r9
     cdc:	af 92       	push	r10
     cde:	bf 92       	push	r11
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <transferObjToDis+0x26>
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <transferObjToDis+0x28>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <transferObjToDis+0x2a>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	86 e9       	ldi	r24, 0x96	; 150
     cfc:	96 e1       	ldi	r25, 0x16	; 22
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	0f 2e       	mov	r0, r31
     d04:	f8 ea       	ldi	r31, 0xA8	; 168
     d06:	af 2e       	mov	r10, r31
     d08:	f3 e0       	ldi	r31, 0x03	; 3
     d0a:	bf 2e       	mov	r11, r31
     d0c:	f0 2d       	mov	r31, r0
     d0e:	0f 2e       	mov	r0, r31
     d10:	f0 ec       	ldi	r31, 0xC0	; 192
     d12:	8f 2e       	mov	r8, r31
     d14:	f3 e0       	ldi	r31, 0x03	; 3
     d16:	9f 2e       	mov	r9, r31
     d18:	f0 2d       	mov	r31, r0
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f0 e6       	ldi	r31, 0x60	; 96
     d1e:	6f 2e       	mov	r6, r31
     d20:	f3 e0       	ldi	r31, 0x03	; 3
     d22:	7f 2e       	mov	r7, r31
     d24:	f0 2d       	mov	r31, r0
     d26:	0f 2e       	mov	r0, r31
     d28:	f0 e3       	ldi	r31, 0x30	; 48
     d2a:	4f 2e       	mov	r4, r31
     d2c:	f3 e0       	ldi	r31, 0x03	; 3
     d2e:	5f 2e       	mov	r5, r31
     d30:	f0 2d       	mov	r31, r0
     d32:	40 e9       	ldi	r20, 0x90	; 144
     d34:	53 e0       	ldi	r21, 0x03	; 3
     d36:	1c 01       	movw	r2, r24
     d38:	7a 83       	std	Y+2, r23	; 0x02
     d3a:	69 83       	std	Y+1, r22	; 0x01
     d3c:	6a c1       	rjmp	.+724    	; 0x1012 <transferObjToDis+0x346>
     d3e:	ed 91       	ld	r30, X+
     d40:	ce 2e       	mov	r12, r30
     d42:	d1 2c       	mov	r13, r1
     d44:	89 e0       	ldi	r24, 0x09	; 9
     d46:	c8 16       	cp	r12, r24
     d48:	d1 04       	cpc	r13, r1
     d4a:	68 f4       	brcc	.+26     	; 0xd66 <transferObjToDis+0x9a>
     d4c:	f6 01       	movw	r30, r12
     d4e:	eb 5a       	subi	r30, 0xAB	; 171
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__tablejump2__>
     d56:	69 81       	ldd	r22, Y+1	; 0x01
     d58:	7a 81       	ldd	r23, Y+2	; 0x02
     d5a:	62 0f       	add	r22, r18
     d5c:	73 1f       	adc	r23, r19
     d5e:	6b 52       	subi	r22, 0x2B	; 43
     d60:	79 4f       	sbci	r23, 0xF9	; 249
     d62:	9c e0       	ldi	r25, 0x0C	; 12
     d64:	11 c0       	rjmp	.+34     	; 0xd88 <transferObjToDis+0xbc>
     d66:	69 81       	ldd	r22, Y+1	; 0x01
     d68:	7a 81       	ldd	r23, Y+2	; 0x02
     d6a:	62 0f       	add	r22, r18
     d6c:	73 1f       	adc	r23, r19
     d6e:	6b 52       	subi	r22, 0x2B	; 43
     d70:	79 4f       	sbci	r23, 0xF9	; 249
     d72:	9c e0       	ldi	r25, 0x0C	; 12
     d74:	37 c1       	rjmp	.+622    	; 0xfe4 <transferObjToDis+0x318>
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = 0x0000;
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     d76:	11 92       	st	Z+, r1
     d78:	81 50       	subi	r24, 0x01	; 1
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = 0x0000;
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     d7a:	e9 f7       	brne	.-6      	; 0xd76 <transferObjToDis+0xaa>
     d7c:	91 50       	subi	r25, 0x01	; 1
     d7e:	6c 5a       	subi	r22, 0xAC	; 172
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     d82:	99 23       	and	r25, r25
     d84:	09 f4       	brne	.+2      	; 0xd88 <transferObjToDis+0xbc>
     d86:	31 c1       	rjmp	.+610    	; 0xfea <transferObjToDis+0x31e>
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEnemy, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
     d88:	fb 01       	movw	r30, r22
     d8a:	8c e0       	ldi	r24, 0x0C	; 12
     d8c:	f4 cf       	rjmp	.-24     	; 0xd76 <transferObjToDis+0xaa>
     d8e:	e8 e7       	ldi	r30, 0x78	; 120
     d90:	f3 e0       	ldi	r31, 0x03	; 3
     d92:	fc 83       	std	Y+4, r31	; 0x04
     d94:	eb 83       	std	Y+3, r30	; 0x03
     d96:	69 81       	ldd	r22, Y+1	; 0x01
     d98:	7a 81       	ldd	r23, Y+2	; 0x02
     d9a:	62 0f       	add	r22, r18
     d9c:	73 1f       	adc	r23, r19
     d9e:	6b 52       	subi	r22, 0x2B	; 43
     da0:	79 4f       	sbci	r23, 0xF9	; 249
     da2:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
     da4:	f7 01       	movw	r30, r14
     da6:	c1 90       	ld	r12, Z+
     da8:	d1 90       	ld	r13, Z+
     daa:	7f 01       	movw	r14, r30
     dac:	8b 01       	movw	r16, r22
     dae:	8c e0       	ldi	r24, 0x0C	; 12
     db0:	f6 01       	movw	r30, r12
     db2:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     db4:	9e 2f       	mov	r25, r30
     db6:	91 70       	andi	r25, 0x01	; 1
     db8:	d8 01       	movw	r26, r16
     dba:	9d 93       	st	X+, r25
     dbc:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     dbe:	f6 95       	lsr	r31
     dc0:	e7 95       	ror	r30
     dc2:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     dc4:	b9 f7       	brne	.-18     	; 0xdb4 <transferObjToDis+0xe8>
     dc6:	d6 01       	movw	r26, r12
     dc8:	6c 5a       	subi	r22, 0xAC	; 172
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     dcc:	4e 15       	cp	r20, r14
     dce:	5f 05       	cpc	r21, r15
     dd0:	49 f7       	brne	.-46     	; 0xda4 <transferObjToDis+0xd8>
     dd2:	0b c1       	rjmp	.+534    	; 0xfea <transferObjToDis+0x31e>
     dd4:	e8 e7       	ldi	r30, 0x78	; 120
     dd6:	f3 e0       	ldi	r31, 0x03	; 3
     dd8:	fc 83       	std	Y+4, r31	; 0x04
     dda:	eb 83       	std	Y+3, r30	; 0x03
     ddc:	69 81       	ldd	r22, Y+1	; 0x01
     dde:	7a 81       	ldd	r23, Y+2	; 0x02
     de0:	62 0f       	add	r22, r18
     de2:	73 1f       	adc	r23, r19
     de4:	6b 52       	subi	r22, 0x2B	; 43
     de6:	79 4f       	sbci	r23, 0xF9	; 249
     de8:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
     dea:	f7 01       	movw	r30, r14
     dec:	c1 90       	ld	r12, Z+
     dee:	d1 90       	ld	r13, Z+
     df0:	7f 01       	movw	r14, r30
     df2:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	f6 01       	movw	r30, r12
     df8:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     dfa:	9e 2f       	mov	r25, r30
     dfc:	91 70       	andi	r25, 0x01	; 1
     dfe:	d8 01       	movw	r26, r16
     e00:	9d 93       	st	X+, r25
     e02:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     e04:	f6 95       	lsr	r31
     e06:	e7 95       	ror	r30
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	8c 30       	cpi	r24, 0x0C	; 12
     e0c:	b1 f7       	brne	.-20     	; 0xdfa <transferObjToDis+0x12e>
     e0e:	d6 01       	movw	r26, r12
     e10:	6c 5a       	subi	r22, 0xAC	; 172
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     e14:	4e 15       	cp	r20, r14
     e16:	5f 05       	cpc	r21, r15
     e18:	41 f7       	brne	.-48     	; 0xdea <transferObjToDis+0x11e>
     e1a:	e7 c0       	rjmp	.+462    	; 0xfea <transferObjToDis+0x31e>
     e1c:	e8 e1       	ldi	r30, 0x18	; 24
     e1e:	f3 e0       	ldi	r31, 0x03	; 3
     e20:	fc 83       	std	Y+4, r31	; 0x04
     e22:	eb 83       	std	Y+3, r30	; 0x03
     e24:	69 81       	ldd	r22, Y+1	; 0x01
     e26:	7a 81       	ldd	r23, Y+2	; 0x02
     e28:	62 0f       	add	r22, r18
     e2a:	73 1f       	adc	r23, r19
     e2c:	6b 52       	subi	r22, 0x2B	; 43
     e2e:	79 4f       	sbci	r23, 0xF9	; 249
     e30:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = door_img[tileY];
     e32:	f7 01       	movw	r30, r14
     e34:	c1 90       	ld	r12, Z+
     e36:	d1 90       	ld	r13, Z+
     e38:	7f 01       	movw	r14, r30
     e3a:	8b 01       	movw	r16, r22
     e3c:	8c e0       	ldi	r24, 0x0C	; 12
     e3e:	f6 01       	movw	r30, r12
     e40:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     e42:	9e 2f       	mov	r25, r30
     e44:	91 70       	andi	r25, 0x01	; 1
     e46:	d8 01       	movw	r26, r16
     e48:	9d 93       	st	X+, r25
     e4a:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     e4c:	f6 95       	lsr	r31
     e4e:	e7 95       	ror	r30
     e50:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = door_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     e52:	b9 f7       	brne	.-18     	; 0xe42 <transferObjToDis+0x176>
     e54:	d6 01       	movw	r26, r12
     e56:	6c 5a       	subi	r22, 0xAC	; 172
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     e5a:	4e 14       	cp	r4, r14
     e5c:	5f 04       	cpc	r5, r15
     e5e:	49 f7       	brne	.-46     	; 0xe32 <transferObjToDis+0x166>
     e60:	c4 c0       	rjmp	.+392    	; 0xfea <transferObjToDis+0x31e>
     e62:	e8 e4       	ldi	r30, 0x48	; 72
     e64:	f3 e0       	ldi	r31, 0x03	; 3
     e66:	fc 83       	std	Y+4, r31	; 0x04
     e68:	eb 83       	std	Y+3, r30	; 0x03
     e6a:	69 81       	ldd	r22, Y+1	; 0x01
     e6c:	7a 81       	ldd	r23, Y+2	; 0x02
     e6e:	62 0f       	add	r22, r18
     e70:	73 1f       	adc	r23, r19
     e72:	6b 52       	subi	r22, 0x2B	; 43
     e74:	79 4f       	sbci	r23, 0xF9	; 249
     e76:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = block_img[tileY];
     e78:	f7 01       	movw	r30, r14
     e7a:	c1 90       	ld	r12, Z+
     e7c:	d1 90       	ld	r13, Z+
     e7e:	7f 01       	movw	r14, r30
     e80:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	f6 01       	movw	r30, r12
     e86:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     e88:	9e 2f       	mov	r25, r30
     e8a:	91 70       	andi	r25, 0x01	; 1
     e8c:	d8 01       	movw	r26, r16
     e8e:	9d 93       	st	X+, r25
     e90:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     e92:	f6 95       	lsr	r31
     e94:	e7 95       	ror	r30
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = block_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	8c 30       	cpi	r24, 0x0C	; 12
     e9a:	b1 f7       	brne	.-20     	; 0xe88 <transferObjToDis+0x1bc>
     e9c:	d6 01       	movw	r26, r12
     e9e:	6c 5a       	subi	r22, 0xAC	; 172
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     ea2:	6e 14       	cp	r6, r14
     ea4:	7f 04       	cpc	r7, r15
     ea6:	41 f7       	brne	.-48     	; 0xe78 <transferObjToDis+0x1ac>
     ea8:	a0 c0       	rjmp	.+320    	; 0xfea <transferObjToDis+0x31e>
     eaa:	e8 ea       	ldi	r30, 0xA8	; 168
     eac:	f3 e0       	ldi	r31, 0x03	; 3
     eae:	fc 83       	std	Y+4, r31	; 0x04
     eb0:	eb 83       	std	Y+3, r30	; 0x03
     eb2:	69 81       	ldd	r22, Y+1	; 0x01
     eb4:	7a 81       	ldd	r23, Y+2	; 0x02
     eb6:	62 0f       	add	r22, r18
     eb8:	73 1f       	adc	r23, r19
     eba:	6b 52       	subi	r22, 0x2B	; 43
     ebc:	79 4f       	sbci	r23, 0xF9	; 249
     ebe:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bombperson_img[tileY];
     ec0:	f7 01       	movw	r30, r14
     ec2:	c1 90       	ld	r12, Z+
     ec4:	d1 90       	ld	r13, Z+
     ec6:	7f 01       	movw	r14, r30
     ec8:	8b 01       	movw	r16, r22
     eca:	8c e0       	ldi	r24, 0x0C	; 12
     ecc:	f6 01       	movw	r30, r12
     ece:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     ed0:	9e 2f       	mov	r25, r30
     ed2:	91 70       	andi	r25, 0x01	; 1
     ed4:	d8 01       	movw	r26, r16
     ed6:	9d 93       	st	X+, r25
     ed8:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     eda:	f6 95       	lsr	r31
     edc:	e7 95       	ror	r30
     ede:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bombperson_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     ee0:	b9 f7       	brne	.-18     	; 0xed0 <transferObjToDis+0x204>
     ee2:	d6 01       	movw	r26, r12
     ee4:	6c 5a       	subi	r22, 0xAC	; 172
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     ee8:	e8 14       	cp	r14, r8
     eea:	f9 04       	cpc	r15, r9
     eec:	49 f7       	brne	.-46     	; 0xec0 <transferObjToDis+0x1f4>
     eee:	7d c0       	rjmp	.+250    	; 0xfea <transferObjToDis+0x31e>
     ef0:	e0 e9       	ldi	r30, 0x90	; 144
     ef2:	f3 e0       	ldi	r31, 0x03	; 3
     ef4:	fc 83       	std	Y+4, r31	; 0x04
     ef6:	eb 83       	std	Y+3, r30	; 0x03
     ef8:	69 81       	ldd	r22, Y+1	; 0x01
     efa:	7a 81       	ldd	r23, Y+2	; 0x02
     efc:	62 0f       	add	r22, r18
     efe:	73 1f       	adc	r23, r19
     f00:	6b 52       	subi	r22, 0x2B	; 43
     f02:	79 4f       	sbci	r23, 0xF9	; 249
     f04:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bomb_img[tileY];
     f06:	f7 01       	movw	r30, r14
     f08:	c1 90       	ld	r12, Z+
     f0a:	d1 90       	ld	r13, Z+
     f0c:	7f 01       	movw	r14, r30
     f0e:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	f6 01       	movw	r30, r12
     f14:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     f16:	9e 2f       	mov	r25, r30
     f18:	91 70       	andi	r25, 0x01	; 1
     f1a:	d8 01       	movw	r26, r16
     f1c:	9d 93       	st	X+, r25
     f1e:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     f20:	f6 95       	lsr	r31
     f22:	e7 95       	ror	r30
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bomb_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	8c 30       	cpi	r24, 0x0C	; 12
     f28:	b1 f7       	brne	.-20     	; 0xf16 <transferObjToDis+0x24a>
     f2a:	d6 01       	movw	r26, r12
     f2c:	6c 5a       	subi	r22, 0xAC	; 172
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     f30:	ae 14       	cp	r10, r14
     f32:	bf 04       	cpc	r11, r15
     f34:	41 f7       	brne	.-48     	; 0xf06 <transferObjToDis+0x23a>
     f36:	59 c0       	rjmp	.+178    	; 0xfea <transferObjToDis+0x31e>
     f38:	e0 e6       	ldi	r30, 0x60	; 96
     f3a:	f3 e0       	ldi	r31, 0x03	; 3
     f3c:	fc 83       	std	Y+4, r31	; 0x04
     f3e:	eb 83       	std	Y+3, r30	; 0x03
     f40:	69 81       	ldd	r22, Y+1	; 0x01
     f42:	7a 81       	ldd	r23, Y+2	; 0x02
     f44:	62 0f       	add	r22, r18
     f46:	73 1f       	adc	r23, r19
     f48:	6b 52       	subi	r22, 0x2B	; 43
     f4a:	79 4f       	sbci	r23, 0xF9	; 249
     f4c:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
     f4e:	f7 01       	movw	r30, r14
     f50:	c1 90       	ld	r12, Z+
     f52:	d1 90       	ld	r13, Z+
     f54:	7f 01       	movw	r14, r30
     f56:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	f6 01       	movw	r30, r12
     f5c:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     f5e:	9e 2f       	mov	r25, r30
     f60:	91 70       	andi	r25, 0x01	; 1
     f62:	d8 01       	movw	r26, r16
     f64:	9d 93       	st	X+, r25
     f66:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     f68:	f6 95       	lsr	r31
     f6a:	e7 95       	ror	r30
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	8c 30       	cpi	r24, 0x0C	; 12
     f70:	b1 f7       	brne	.-20     	; 0xf5e <transferObjToDis+0x292>
     f72:	d6 01       	movw	r26, r12
     f74:	6c 5a       	subi	r22, 0xAC	; 172
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     f78:	e8 e7       	ldi	r30, 0x78	; 120
     f7a:	f3 e0       	ldi	r31, 0x03	; 3
     f7c:	ee 15       	cp	r30, r14
     f7e:	ff 05       	cpc	r31, r15
     f80:	31 f7       	brne	.-52     	; 0xf4e <transferObjToDis+0x282>
     f82:	33 c0       	rjmp	.+102    	; 0xfea <transferObjToDis+0x31e>
     f84:	80 e3       	ldi	r24, 0x30	; 48
     f86:	93 e0       	ldi	r25, 0x03	; 3
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
     f8c:	69 81       	ldd	r22, Y+1	; 0x01
     f8e:	7a 81       	ldd	r23, Y+2	; 0x02
     f90:	62 0f       	add	r22, r18
     f92:	73 1f       	adc	r23, r19
     f94:	6b 52       	subi	r22, 0x2B	; 43
     f96:	79 4f       	sbci	r23, 0xF9	; 249
     f98:	7c 01       	movw	r14, r24
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
     f9a:	f7 01       	movw	r30, r14
     f9c:	c1 90       	ld	r12, Z+
     f9e:	d1 90       	ld	r13, Z+
     fa0:	7f 01       	movw	r14, r30
     fa2:	8b 01       	movw	r16, r22
     fa4:	8c e0       	ldi	r24, 0x0C	; 12
     fa6:	be 83       	std	Y+6, r27	; 0x06
     fa8:	ad 83       	std	Y+5, r26	; 0x05
     faa:	f6 01       	movw	r30, r12
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     fac:	9e 2f       	mov	r25, r30
     fae:	91 70       	andi	r25, 0x01	; 1
     fb0:	d8 01       	movw	r26, r16
     fb2:	9d 93       	st	X+, r25
     fb4:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     fb6:	f6 95       	lsr	r31
     fb8:	e7 95       	ror	r30
     fba:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     fbc:	b9 f7       	brne	.-18     	; 0xfac <transferObjToDis+0x2e0>
     fbe:	ad 81       	ldd	r26, Y+5	; 0x05
     fc0:	be 81       	ldd	r27, Y+6	; 0x06
     fc2:	6c 5a       	subi	r22, 0xAC	; 172
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     fc6:	e8 e4       	ldi	r30, 0x48	; 72
     fc8:	ee 16       	cp	r14, r30
     fca:	e3 e0       	ldi	r30, 0x03	; 3
     fcc:	fe 06       	cpc	r15, r30
     fce:	29 f7       	brne	.-54     	; 0xf9a <transferObjToDis+0x2ce>
     fd0:	0c c0       	rjmp	.+24     	; 0xfea <transferObjToDis+0x31e>
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0;
     fd2:	11 92       	st	Z+, r1
				}
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	8c 30       	cpi	r24, 0x0C	; 12
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <transferObjToDis+0x306>
     fda:	91 50       	subi	r25, 0x01	; 1
     fdc:	6c 5a       	subi	r22, 0xAC	; 172
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     fe0:	99 23       	and	r25, r25
     fe2:	19 f0       	breq	.+6      	; 0xfea <transferObjToDis+0x31e>
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
     fe4:	fb 01       	movw	r30, r22
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	f4 cf       	rjmp	.-24     	; 0xfd2 <transferObjToDis+0x306>
     fea:	24 5f       	subi	r18, 0xF4	; 244
     fec:	3f 4f       	sbci	r19, 0xFF	; 255

const unsigned TILESIZE = 12;
void transferObjToDis() {
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
     fee:	24 35       	cpi	r18, 0x54	; 84
     ff0:	31 05       	cpc	r19, r1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <transferObjToDis+0x32a>
     ff4:	a4 ce       	rjmp	.-696    	; 0xd3e <transferObjToDis+0x72>
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	80 51       	subi	r24, 0x10	; 16
     ffc:	9c 4f       	sbci	r25, 0xFC	; 252
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	97 e0       	ldi	r25, 0x07	; 7
    1004:	29 0e       	add	r2, r25
    1006:	31 1c       	adc	r3, r1
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
    1008:	a9 81       	ldd	r26, Y+1	; 0x01
    100a:	ba 81       	ldd	r27, Y+2	; 0x02
    100c:	a0 3d       	cpi	r26, 0xD0	; 208
    100e:	bb 40       	sbci	r27, 0x0B	; 11
    1010:	21 f0       	breq	.+8      	; 0x101a <transferObjToDis+0x34e>
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEnemy, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
    1012:	d1 01       	movw	r26, r2
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	92 ce       	rjmp	.-732    	; 0xd3e <transferObjToDis+0x72>
				}
				break;
			}
		}
	}
}
    101a:	26 96       	adiw	r28, 0x06	; 6
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	4f 90       	pop	r4
    1046:	3f 90       	pop	r3
    1048:	2f 90       	pop	r2
    104a:	08 95       	ret

0000104c <gamePlayingPlayerActions>:
unsigned short soundQueueCount;

void gamePlayingPlayerActions(){
	
	//Player Input and Actions
	if(player1.isBombPlaced == 0 && (SNESOutput & 0x8000) == 0x8000) {
    104c:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <player1+0x3>
    1050:	81 11       	cpse	r24, r1
    1052:	10 c0       	rjmp	.+32     	; 0x1074 <gamePlayingPlayerActions+0x28>
    1054:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    1058:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    105c:	99 23       	and	r25, r25
    105e:	54 f4       	brge	.+20     	; 0x1074 <gamePlayingPlayerActions+0x28>
		player1.isBombPlaced = 1;
    1060:	e9 e9       	ldi	r30, 0x99	; 153
    1062:	f6 e0       	ldi	r31, 0x06	; 6
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	83 83       	std	Z+3, r24	; 0x03
		player1.bombPosX = player1.playerPosX;
    1068:	80 81       	ld	r24, Z
    106a:	84 83       	std	Z+4, r24	; 0x04
		player1.bombPosY = player1.playerPosY;
    106c:	81 81       	ldd	r24, Z+1	; 0x01
    106e:	85 83       	std	Z+5, r24	; 0x05
		player1.bombCount = 0;
    1070:	17 82       	std	Z+7, r1	; 0x07
    1072:	16 82       	std	Z+6, r1	; 0x06
	}
	unsigned char tempObj;
	if(player1.playerPosX != 6 && (SNESOutput & 0x0100) == 0x0100) {
    1074:	60 91 99 06 	lds	r22, 0x0699	; 0x800699 <player1>
    1078:	66 30       	cpi	r22, 0x06	; 6
    107a:	09 f4       	brne	.+2      	; 0x107e <gamePlayingPlayerActions+0x32>
    107c:	58 c0       	rjmp	.+176    	; 0x112e <gamePlayingPlayerActions+0xe2>
    107e:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    1082:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    1086:	90 ff       	sbrs	r25, 0
    1088:	4f c0       	rjmp	.+158    	; 0x1128 <gamePlayingPlayerActions+0xdc>
		tempObj = objectLocMatrix[player1.playerPosY][(player1.playerPosX + 1)];
    108a:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <player1+0x1>
    108e:	26 2f       	mov	r18, r22
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	48 2f       	mov	r20, r24
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	f9 01       	movw	r30, r18
    1098:	97 e0       	ldi	r25, 0x07	; 7
    109a:	89 9f       	mul	r24, r25
    109c:	e0 0d       	add	r30, r0
    109e:	f1 1d       	adc	r31, r1
    10a0:	11 24       	eor	r1, r1
    10a2:	ea 56       	subi	r30, 0x6A	; 106
    10a4:	f9 4e       	sbci	r31, 0xE9	; 233
    10a6:	81 81       	ldd	r24, Z+1	; 0x01
		if(tempObj == OBJEmpty){
    10a8:	81 11       	cpse	r24, r1
    10aa:	19 c0       	rjmp	.+50     	; 0x10de <gamePlayingPlayerActions+0x92>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    10ac:	ca 01       	movw	r24, r20
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	84 1b       	sub	r24, r20
    10bc:	95 0b       	sbc	r25, r21
    10be:	8a 56       	subi	r24, 0x6A	; 106
    10c0:	99 4e       	sbci	r25, 0xE9	; 233
    10c2:	fc 01       	movw	r30, r24
    10c4:	e2 0f       	add	r30, r18
    10c6:	f3 1f       	adc	r31, r19
    10c8:	10 82       	st	Z, r1
			player1.playerPosX = player1.playerPosX + 1;
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	26 0f       	add	r18, r22
    10ce:	20 93 99 06 	sts	0x0699, r18	; 0x800699 <player1>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    10d2:	fc 01       	movw	r30, r24
    10d4:	e2 0f       	add	r30, r18
    10d6:	f1 1d       	adc	r31, r1
    10d8:	24 e0       	ldi	r18, 0x04	; 4
    10da:	20 83       	st	Z, r18
    10dc:	45 c1       	rjmp	.+650    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
		else if(tempObj == OBJDoor) {
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	e1 f4       	brne	.+56     	; 0x111a <gamePlayingPlayerActions+0xce>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    10e2:	ca 01       	movw	r24, r20
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	84 1b       	sub	r24, r20
    10f2:	95 0b       	sbc	r25, r21
    10f4:	8a 56       	subi	r24, 0x6A	; 106
    10f6:	99 4e       	sbci	r25, 0xE9	; 233
    10f8:	fc 01       	movw	r30, r24
    10fa:	e2 0f       	add	r30, r18
    10fc:	f3 1f       	adc	r31, r19
    10fe:	10 82       	st	Z, r1
			player1.playerPosX = player1.playerPosX + 1;
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	26 0f       	add	r18, r22
    1104:	20 93 99 06 	sts	0x0699, r18	; 0x800699 <player1>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1108:	fc 01       	movw	r30, r24
    110a:	e2 0f       	add	r30, r18
    110c:	f1 1d       	adc	r31, r1
    110e:	24 e0       	ldi	r18, 0x04	; 4
    1110:	20 83       	st	Z, r18
			levelFinish = 1;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <levelFinish>
    1118:	27 c1       	rjmp	.+590    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
		else if(tempObj == OBJEnemy) {
    111a:	85 30       	cpi	r24, 0x05	; 5
    111c:	09 f0       	breq	.+2      	; 0x1120 <gamePlayingPlayerActions+0xd4>
    111e:	24 c1       	rjmp	.+584    	; 0x1368 <gamePlayingPlayerActions+0x31c>
			gameOver = 1;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
    1126:	20 c1       	rjmp	.+576    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
	}
	else if(player1.playerPosX != 0 && (SNESOutput & 0x0200) == 0x0200) {
    1128:	66 23       	and	r22, r22
    112a:	09 f4       	brne	.+2      	; 0x112e <gamePlayingPlayerActions+0xe2>
    112c:	55 c0       	rjmp	.+170    	; 0x11d8 <gamePlayingPlayerActions+0x18c>
    112e:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    1132:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    1136:	91 ff       	sbrs	r25, 1
    1138:	4f c0       	rjmp	.+158    	; 0x11d8 <gamePlayingPlayerActions+0x18c>
		tempObj = objectLocMatrix[player1.playerPosY][(player1.playerPosX - 1)];
    113a:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <player1+0x1>
    113e:	26 2f       	mov	r18, r22
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	48 2f       	mov	r20, r24
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	f9 01       	movw	r30, r18
    1148:	97 e0       	ldi	r25, 0x07	; 7
    114a:	89 9f       	mul	r24, r25
    114c:	e0 0d       	add	r30, r0
    114e:	f1 1d       	adc	r31, r1
    1150:	11 24       	eor	r1, r1
    1152:	eb 56       	subi	r30, 0x6B	; 107
    1154:	f9 4e       	sbci	r31, 0xE9	; 233
    1156:	80 81       	ld	r24, Z
		if(tempObj == OBJEmpty){
    1158:	81 11       	cpse	r24, r1
    115a:	19 c0       	rjmp	.+50     	; 0x118e <gamePlayingPlayerActions+0x142>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    115c:	ca 01       	movw	r24, r20
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	84 1b       	sub	r24, r20
    116c:	95 0b       	sbc	r25, r21
    116e:	8a 56       	subi	r24, 0x6A	; 106
    1170:	99 4e       	sbci	r25, 0xE9	; 233
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	10 82       	st	Z, r1
			player1.playerPosX = player1.playerPosX - 1;
    117a:	2f ef       	ldi	r18, 0xFF	; 255
    117c:	26 0f       	add	r18, r22
    117e:	20 93 99 06 	sts	0x0699, r18	; 0x800699 <player1>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1182:	fc 01       	movw	r30, r24
    1184:	e2 0f       	add	r30, r18
    1186:	f1 1d       	adc	r31, r1
    1188:	24 e0       	ldi	r18, 0x04	; 4
    118a:	20 83       	st	Z, r18
    118c:	ed c0       	rjmp	.+474    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
		else if(tempObj == OBJDoor) {
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	e1 f4       	brne	.+56     	; 0x11ca <gamePlayingPlayerActions+0x17e>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    1192:	ca 01       	movw	r24, r20
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	84 1b       	sub	r24, r20
    11a2:	95 0b       	sbc	r25, r21
    11a4:	8a 56       	subi	r24, 0x6A	; 106
    11a6:	99 4e       	sbci	r25, 0xE9	; 233
    11a8:	fc 01       	movw	r30, r24
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	10 82       	st	Z, r1
			player1.playerPosX = player1.playerPosX - 1;
    11b0:	2f ef       	ldi	r18, 0xFF	; 255
    11b2:	26 0f       	add	r18, r22
    11b4:	20 93 99 06 	sts	0x0699, r18	; 0x800699 <player1>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    11b8:	fc 01       	movw	r30, r24
    11ba:	e2 0f       	add	r30, r18
    11bc:	f1 1d       	adc	r31, r1
    11be:	24 e0       	ldi	r18, 0x04	; 4
    11c0:	20 83       	st	Z, r18
			levelFinish = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <levelFinish>
    11c8:	cf c0       	rjmp	.+414    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
		else if(tempObj == OBJEnemy) {
    11ca:	85 30       	cpi	r24, 0x05	; 5
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <gamePlayingPlayerActions+0x184>
    11ce:	cc c0       	rjmp	.+408    	; 0x1368 <gamePlayingPlayerActions+0x31c>
			gameOver = 1;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
    11d6:	c8 c0       	rjmp	.+400    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
	}
	else if(player1.playerPosY != 0 && (SNESOutput & 0x0800) == 0x0800) {
    11d8:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <player1+0x1>
    11dc:	88 23       	and	r24, r24
    11de:	09 f4       	brne	.+2      	; 0x11e2 <gamePlayingPlayerActions+0x196>
    11e0:	64 c0       	rjmp	.+200    	; 0x12aa <gamePlayingPlayerActions+0x25e>
    11e2:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <SNESOutput>
    11e6:	30 91 8e 04 	lds	r19, 0x048E	; 0x80048e <SNESOutput+0x1>
    11ea:	33 ff       	sbrs	r19, 3
    11ec:	5b c0       	rjmp	.+182    	; 0x12a4 <gamePlayingPlayerActions+0x258>
		tempObj = objectLocMatrix[player1.playerPosY - 1][(player1.playerPosX)];
    11ee:	48 2f       	mov	r20, r24
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	26 2f       	mov	r18, r22
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	ba 01       	movw	r22, r20
    11f8:	61 50       	subi	r22, 0x01	; 1
    11fa:	71 09       	sbc	r23, r1
    11fc:	fb 01       	movw	r30, r22
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	e6 1b       	sub	r30, r22
    120c:	f7 0b       	sbc	r31, r23
    120e:	ea 56       	subi	r30, 0x6A	; 106
    1210:	f9 4e       	sbci	r31, 0xE9	; 233
    1212:	e2 0f       	add	r30, r18
    1214:	f3 1f       	adc	r31, r19
    1216:	90 81       	ld	r25, Z
		if(tempObj == OBJEmpty){
    1218:	91 11       	cpse	r25, r1
    121a:	1c c0       	rjmp	.+56     	; 0x1254 <gamePlayingPlayerActions+0x208>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    121c:	fa 01       	movw	r30, r20
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	e4 1b       	sub	r30, r20
    122c:	f5 0b       	sbc	r31, r21
    122e:	ea 56       	subi	r30, 0x6A	; 106
    1230:	f9 4e       	sbci	r31, 0xE9	; 233
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	10 82       	st	Z, r1
			player1.playerPosY = player1.playerPosY - 1;
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <player1+0x1>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    123e:	97 e0       	ldi	r25, 0x07	; 7
    1240:	89 9f       	mul	r24, r25
    1242:	20 0d       	add	r18, r0
    1244:	31 1d       	adc	r19, r1
    1246:	11 24       	eor	r1, r1
    1248:	f9 01       	movw	r30, r18
    124a:	ea 56       	subi	r30, 0x6A	; 106
    124c:	f9 4e       	sbci	r31, 0xE9	; 233
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	80 83       	st	Z, r24
    1252:	8a c0       	rjmp	.+276    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
		else if(tempObj == OBJDoor) {
    1254:	93 30       	cpi	r25, 0x03	; 3
    1256:	f9 f4       	brne	.+62     	; 0x1296 <gamePlayingPlayerActions+0x24a>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    1258:	fa 01       	movw	r30, r20
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	e4 1b       	sub	r30, r20
    1268:	f5 0b       	sbc	r31, r21
    126a:	ea 56       	subi	r30, 0x6A	; 106
    126c:	f9 4e       	sbci	r31, 0xE9	; 233
    126e:	e2 0f       	add	r30, r18
    1270:	f3 1f       	adc	r31, r19
    1272:	10 82       	st	Z, r1
			player1.playerPosY = player1.playerPosY - 1;
    1274:	81 50       	subi	r24, 0x01	; 1
    1276:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <player1+0x1>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    127a:	97 e0       	ldi	r25, 0x07	; 7
    127c:	89 9f       	mul	r24, r25
    127e:	20 0d       	add	r18, r0
    1280:	31 1d       	adc	r19, r1
    1282:	11 24       	eor	r1, r1
    1284:	f9 01       	movw	r30, r18
    1286:	ea 56       	subi	r30, 0x6A	; 106
    1288:	f9 4e       	sbci	r31, 0xE9	; 233
    128a:	84 e0       	ldi	r24, 0x04	; 4
    128c:	80 83       	st	Z, r24
			levelFinish = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <levelFinish>
    1294:	69 c0       	rjmp	.+210    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
		else if(tempObj == OBJEnemy) {
    1296:	95 30       	cpi	r25, 0x05	; 5
    1298:	09 f0       	breq	.+2      	; 0x129c <gamePlayingPlayerActions+0x250>
    129a:	66 c0       	rjmp	.+204    	; 0x1368 <gamePlayingPlayerActions+0x31c>
			gameOver = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
    12a2:	62 c0       	rjmp	.+196    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
	}
	else if(player1.playerPosY != 2 && (SNESOutput & 0x0400) == 0x0400) {
    12a4:	82 30       	cpi	r24, 0x02	; 2
    12a6:	09 f4       	brne	.+2      	; 0x12aa <gamePlayingPlayerActions+0x25e>
    12a8:	5f c0       	rjmp	.+190    	; 0x1368 <gamePlayingPlayerActions+0x31c>
    12aa:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <SNESOutput>
    12ae:	30 91 8e 04 	lds	r19, 0x048E	; 0x80048e <SNESOutput+0x1>
    12b2:	32 ff       	sbrs	r19, 2
    12b4:	59 c0       	rjmp	.+178    	; 0x1368 <gamePlayingPlayerActions+0x31c>
		tempObj = objectLocMatrix[player1.playerPosY + 1][(player1.playerPosX)];
    12b6:	48 2f       	mov	r20, r24
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	26 2f       	mov	r18, r22
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	ba 01       	movw	r22, r20
    12c0:	6f 5f       	subi	r22, 0xFF	; 255
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	fb 01       	movw	r30, r22
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	e6 1b       	sub	r30, r22
    12d4:	f7 0b       	sbc	r31, r23
    12d6:	ea 56       	subi	r30, 0x6A	; 106
    12d8:	f9 4e       	sbci	r31, 0xE9	; 233
    12da:	e2 0f       	add	r30, r18
    12dc:	f3 1f       	adc	r31, r19
    12de:	90 81       	ld	r25, Z
		if(tempObj == OBJEmpty){
    12e0:	91 11       	cpse	r25, r1
    12e2:	1c c0       	rjmp	.+56     	; 0x131c <gamePlayingPlayerActions+0x2d0>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    12e4:	fa 01       	movw	r30, r20
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	e4 1b       	sub	r30, r20
    12f4:	f5 0b       	sbc	r31, r21
    12f6:	ea 56       	subi	r30, 0x6A	; 106
    12f8:	f9 4e       	sbci	r31, 0xE9	; 233
    12fa:	e2 0f       	add	r30, r18
    12fc:	f3 1f       	adc	r31, r19
    12fe:	10 82       	st	Z, r1
			player1.playerPosY = player1.playerPosY + 1;
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <player1+0x1>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1306:	97 e0       	ldi	r25, 0x07	; 7
    1308:	89 9f       	mul	r24, r25
    130a:	20 0d       	add	r18, r0
    130c:	31 1d       	adc	r19, r1
    130e:	11 24       	eor	r1, r1
    1310:	f9 01       	movw	r30, r18
    1312:	ea 56       	subi	r30, 0x6A	; 106
    1314:	f9 4e       	sbci	r31, 0xE9	; 233
    1316:	84 e0       	ldi	r24, 0x04	; 4
    1318:	80 83       	st	Z, r24
    131a:	26 c0       	rjmp	.+76     	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
		else if(tempObj == OBJDoor) {
    131c:	93 30       	cpi	r25, 0x03	; 3
    131e:	f9 f4       	brne	.+62     	; 0x135e <gamePlayingPlayerActions+0x312>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    1320:	fa 01       	movw	r30, r20
    1322:	ee 0f       	add	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	ee 0f       	add	r30, r30
    1328:	ff 1f       	adc	r31, r31
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	e4 1b       	sub	r30, r20
    1330:	f5 0b       	sbc	r31, r21
    1332:	ea 56       	subi	r30, 0x6A	; 106
    1334:	f9 4e       	sbci	r31, 0xE9	; 233
    1336:	e2 0f       	add	r30, r18
    1338:	f3 1f       	adc	r31, r19
    133a:	10 82       	st	Z, r1
			player1.playerPosY = player1.playerPosY + 1;
    133c:	8f 5f       	subi	r24, 0xFF	; 255
    133e:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <player1+0x1>
			objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1342:	97 e0       	ldi	r25, 0x07	; 7
    1344:	89 9f       	mul	r24, r25
    1346:	20 0d       	add	r18, r0
    1348:	31 1d       	adc	r19, r1
    134a:	11 24       	eor	r1, r1
    134c:	f9 01       	movw	r30, r18
    134e:	ea 56       	subi	r30, 0x6A	; 106
    1350:	f9 4e       	sbci	r31, 0xE9	; 233
    1352:	84 e0       	ldi	r24, 0x04	; 4
    1354:	80 83       	st	Z, r24
			levelFinish = 1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <levelFinish>
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <gamePlayingPlayerActions+0x31c>
		}
		else if(tempObj == OBJEnemy) {
    135e:	95 30       	cpi	r25, 0x05	; 5
    1360:	19 f4       	brne	.+6      	; 0x1368 <gamePlayingPlayerActions+0x31c>
			gameOver = 1;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
		}
	}
	if((player1.playerPosX != player1.bombPosX || player1.playerPosY != player1.bombPosY) && player1.isBombPlaced != 0) {
    1368:	e9 e9       	ldi	r30, 0x99	; 153
    136a:	f6 e0       	ldi	r31, 0x06	; 6
    136c:	84 81       	ldd	r24, Z+4	; 0x04
    136e:	90 81       	ld	r25, Z
    1370:	98 13       	cpse	r25, r24
    1372:	04 c0       	rjmp	.+8      	; 0x137c <gamePlayingPlayerActions+0x330>
    1374:	21 81       	ldd	r18, Z+1	; 0x01
    1376:	95 81       	ldd	r25, Z+5	; 0x05
    1378:	29 17       	cp	r18, r25
    137a:	81 f0       	breq	.+32     	; 0x139c <gamePlayingPlayerActions+0x350>
    137c:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <player1+0x3>
    1380:	99 23       	and	r25, r25
    1382:	61 f0       	breq	.+24     	; 0x139c <gamePlayingPlayerActions+0x350>
		objectLocMatrix[player1.bombPosY][player1.bombPosX] = OBJBomb;
    1384:	e0 91 9e 06 	lds	r30, 0x069E	; 0x80069e <player1+0x5>
    1388:	97 e0       	ldi	r25, 0x07	; 7
    138a:	e9 9f       	mul	r30, r25
    138c:	f0 01       	movw	r30, r0
    138e:	11 24       	eor	r1, r1
    1390:	ea 56       	subi	r30, 0x6A	; 106
    1392:	f9 4e       	sbci	r31, 0xE9	; 233
    1394:	e8 0f       	add	r30, r24
    1396:	f1 1d       	adc	r31, r1
    1398:	86 e0       	ldi	r24, 0x06	; 6
    139a:	80 83       	st	Z, r24
    139c:	08 95       	ret

0000139e <gamePlayingBombCheck>:
	}
}

void gamePlayingBombCheck() {
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
	unsigned char tempObj;
	
	
	//Check Bomb And Explosion Objs
	while(explodeStackSize != 0) {
    13a6:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <explodeStackSize>
    13aa:	88 23       	and	r24, r24
    13ac:	b9 f0       	breq	.+46     	; 0x13dc <gamePlayingBombCheck+0x3e>
		objectLocMatrix[explodeStack[explodeStackSize - 1].posY][explodeStack[explodeStackSize - 1].posX] = OBJEmpty;
    13ae:	a8 2f       	mov	r26, r24
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	aa 0f       	add	r26, r26
    13b4:	bb 1f       	adc	r27, r27
    13b6:	a9 54       	subi	r26, 0x49	; 73
    13b8:	b9 4f       	sbci	r27, 0xF9	; 249
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	ec 91       	ld	r30, X
    13be:	11 97       	sbiw	r26, 0x01	; 1
    13c0:	9c 91       	ld	r25, X
    13c2:	27 e0       	ldi	r18, 0x07	; 7
    13c4:	e2 9f       	mul	r30, r18
    13c6:	f0 01       	movw	r30, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	ea 56       	subi	r30, 0x6A	; 106
    13cc:	f9 4e       	sbci	r31, 0xE9	; 233
    13ce:	e9 0f       	add	r30, r25
    13d0:	f1 1d       	adc	r31, r1
    13d2:	10 82       	st	Z, r1
		explodeStackSize = explodeStackSize - 1;
    13d4:	81 50       	subi	r24, 0x01	; 1
void gamePlayingBombCheck() {
	unsigned char tempObj;
	
	
	//Check Bomb And Explosion Objs
	while(explodeStackSize != 0) {
    13d6:	59 f7       	brne	.-42     	; 0x13ae <gamePlayingBombCheck+0x10>
    13d8:	10 92 95 16 	sts	0x1695, r1	; 0x801695 <explodeStackSize>
		objectLocMatrix[explodeStack[explodeStackSize - 1].posY][explodeStack[explodeStackSize - 1].posX] = OBJEmpty;
		explodeStackSize = explodeStackSize - 1;
	}
	
	if(player1.bombCount < BOMBPERIOD && player1.isBombPlaced != 0) {
    13dc:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <player1+0x6>
    13e0:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <player1+0x7>
    13e4:	8e 31       	cpi	r24, 0x1E	; 30
    13e6:	91 05       	cpc	r25, r1
    13e8:	58 f4       	brcc	.+22     	; 0x1400 <gamePlayingBombCheck+0x62>
    13ea:	20 91 9c 06 	lds	r18, 0x069C	; 0x80069c <player1+0x3>
    13ee:	22 23       	and	r18, r18
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <gamePlayingBombCheck+0x56>
    13f2:	92 c2       	rjmp	.+1316   	; 0x1918 <gamePlayingBombCheck+0x57a>
		player1.bombCount += 1;
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <player1+0x7>
    13fa:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <player1+0x6>
    13fe:	8c c2       	rjmp	.+1304   	; 0x1918 <gamePlayingBombCheck+0x57a>
	}
	else if(player1.bombCount >= BOMBPERIOD && player1.isBombPlaced != 0) {
    1400:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <player1+0x3>
    1404:	88 23       	and	r24, r24
    1406:	09 f4       	brne	.+2      	; 0x140a <gamePlayingBombCheck+0x6c>
    1408:	87 c2       	rjmp	.+1294   	; 0x1918 <gamePlayingBombCheck+0x57a>
		tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX)];
    140a:	e9 e9       	ldi	r30, 0x99	; 153
    140c:	f6 e0       	ldi	r31, 0x06	; 6
    140e:	65 81       	ldd	r22, Z+5	; 0x05
    1410:	74 81       	ldd	r23, Z+4	; 0x04
    1412:	27 2f       	mov	r18, r23
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	46 2f       	mov	r20, r22
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	f9 01       	movw	r30, r18
    141c:	87 e0       	ldi	r24, 0x07	; 7
    141e:	68 9f       	mul	r22, r24
    1420:	e0 0d       	add	r30, r0
    1422:	f1 1d       	adc	r31, r1
    1424:	11 24       	eor	r1, r1
    1426:	ea 56       	subi	r30, 0x6A	; 106
    1428:	f9 4e       	sbci	r31, 0xE9	; 233
    142a:	90 81       	ld	r25, Z
		vibrateQueue[vibrateQueueEnd] = 10;
    142c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <vibrateQueueEnd>
    1430:	e8 2f       	mov	r30, r24
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	ea 56       	subi	r30, 0x6A	; 106
    1436:	f9 4f       	sbci	r31, 0xF9	; 249
    1438:	aa e0       	ldi	r26, 0x0A	; 10
    143a:	a0 83       	st	Z, r26
		if(vibrateQueueEnd >= 2) {
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	18 f0       	brcs	.+6      	; 0x1446 <gamePlayingBombCheck+0xa8>
			vibrateQueueEnd = 0;
    1440:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <vibrateQueueEnd>
    1444:	03 c0       	rjmp	.+6      	; 0x144c <gamePlayingBombCheck+0xae>
		}
		else {
			vibrateQueueEnd = vibrateQueueEnd + 1;
    1446:	8f 5f       	subi	r24, 0xFF	; 255
    1448:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <vibrateQueueEnd>
		}
		vibrateQueueSize = vibrateQueueSize + 1;
    144c:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <vibrateQueueSize>
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <vibrateQueueSize>
		
		soundQueue[soundQueueEnd] = NOTE_B0;
    1456:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <soundQueueEnd>
    145a:	e8 2f       	mov	r30, r24
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	e7 55       	subi	r30, 0x57	; 87
    1468:	f9 4f       	sbci	r31, 0xF9	; 249
    146a:	0f 2e       	mov	r0, r31
    146c:	c1 2c       	mov	r12, r1
    146e:	d1 2c       	mov	r13, r1
    1470:	f8 ef       	ldi	r31, 0xF8	; 248
    1472:	ef 2e       	mov	r14, r31
    1474:	f1 e4       	ldi	r31, 0x41	; 65
    1476:	ff 2e       	mov	r15, r31
    1478:	f0 2d       	mov	r31, r0
    147a:	c0 82       	st	Z, r12
    147c:	d1 82       	std	Z+1, r13	; 0x01
    147e:	e2 82       	std	Z+2, r14	; 0x02
    1480:	f3 82       	std	Z+3, r15	; 0x03
		if(soundQueueEnd >= 2) {
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	18 f0       	brcs	.+6      	; 0x148c <gamePlayingBombCheck+0xee>
			soundQueueEnd = 0;
    1486:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <soundQueueEnd>
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <gamePlayingBombCheck+0xf4>
		}
		else {
			soundQueueEnd = soundQueueEnd + 1;
    148c:	8f 5f       	subi	r24, 0xFF	; 255
    148e:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <soundQueueEnd>
		}
		soundQueueSize = soundQueueSize + 1;
    1492:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <soundQueueSize>
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <soundQueueSize>
		
		if(tempObj == OBJPlayer){
    149c:	94 30       	cpi	r25, 0x04	; 4
    149e:	21 f4       	brne	.+8      	; 0x14a8 <gamePlayingBombCheck+0x10a>
			gameOver = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
    14a6:	17 c0       	rjmp	.+46     	; 0x14d6 <gamePlayingBombCheck+0x138>
		}
		else {
			struct explodeNode tempExplo;
			tempExplo.posX = player1.bombPosX;
			tempExplo.posY = player1.bombPosY;
			objectLocMatrix[player1.bombPosY][(player1.bombPosX)] = OBJExplode;
    14a8:	ca 01       	movw	r24, r20
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	84 1b       	sub	r24, r20
    14b8:	95 0b       	sbc	r25, r21
    14ba:	8a 56       	subi	r24, 0x6A	; 106
    14bc:	99 4e       	sbci	r25, 0xE9	; 233
    14be:	fc 01       	movw	r30, r24
    14c0:	e2 0f       	add	r30, r18
    14c2:	f3 1f       	adc	r31, r19
    14c4:	28 e0       	ldi	r18, 0x08	; 8
    14c6:	20 83       	st	Z, r18
			explodeStack[explodeStackSize] = tempExplo;
    14c8:	e9 eb       	ldi	r30, 0xB9	; 185
    14ca:	f6 e0       	ldi	r31, 0x06	; 6
    14cc:	70 83       	st	Z, r23
    14ce:	61 83       	std	Z+1, r22	; 0x01
			explodeStackSize = explodeStackSize + 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	80 93 95 16 	sts	0x1695, r24	; 0x801695 <explodeStackSize>
		}
		
		if(player1.bombPosX != 6) {
    14d6:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <player1+0x4>
    14da:	86 30       	cpi	r24, 0x06	; 6
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <gamePlayingBombCheck+0x142>
    14de:	69 c0       	rjmp	.+210    	; 0x15b2 <gamePlayingBombCheck+0x214>
			tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)];
    14e0:	a0 91 9e 06 	lds	r26, 0x069E	; 0x80069e <player1+0x5>
    14e4:	e8 2f       	mov	r30, r24
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	bf 01       	movw	r22, r30
    14ea:	6f 5f       	subi	r22, 0xFF	; 255
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	2a 2f       	mov	r18, r26
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	fb 01       	movw	r30, r22
    14f4:	97 e0       	ldi	r25, 0x07	; 7
    14f6:	a9 9f       	mul	r26, r25
    14f8:	e0 0d       	add	r30, r0
    14fa:	f1 1d       	adc	r31, r1
    14fc:	11 24       	eor	r1, r1
    14fe:	ea 56       	subi	r30, 0x6A	; 106
    1500:	f9 4e       	sbci	r31, 0xE9	; 233
    1502:	90 81       	ld	r25, Z
			if(tempObj == OBJEmpty || tempObj == OBJWall || tempObj == OBJEnemy){
    1504:	92 30       	cpi	r25, 0x02	; 2
    1506:	18 f0       	brcs	.+6      	; 0x150e <gamePlayingBombCheck+0x170>
    1508:	95 30       	cpi	r25, 0x05	; 5
    150a:	79 f5       	brne	.+94     	; 0x156a <gamePlayingBombCheck+0x1cc>
    150c:	8a c1       	rjmp	.+788    	; 0x1822 <gamePlayingBombCheck+0x484>
				struct explodeNode tempExplo;
				tempExplo.posX = player1.bombPosX + 1;
				tempExplo.posY = player1.bombPosY;
				objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)] = OBJExplode;
    150e:	a9 01       	movw	r20, r18
    1510:	44 0f       	add	r20, r20
    1512:	55 1f       	adc	r21, r21
    1514:	44 0f       	add	r20, r20
    1516:	55 1f       	adc	r21, r21
    1518:	44 0f       	add	r20, r20
    151a:	55 1f       	adc	r21, r21
    151c:	fa 01       	movw	r30, r20
    151e:	e2 1b       	sub	r30, r18
    1520:	f3 0b       	sbc	r31, r19
    1522:	9f 01       	movw	r18, r30
    1524:	2a 56       	subi	r18, 0x6A	; 106
    1526:	39 4e       	sbci	r19, 0xE9	; 233
    1528:	f9 01       	movw	r30, r18
    152a:	e6 0f       	add	r30, r22
    152c:	f7 1f       	adc	r31, r23
    152e:	28 e0       	ldi	r18, 0x08	; 8
    1530:	20 83       	st	Z, r18
				explodeStack[explodeStackSize] = tempExplo;
    1532:	20 91 95 16 	lds	r18, 0x1695	; 0x801695 <explodeStackSize>
    1536:	e2 2f       	mov	r30, r18
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	e7 54       	subi	r30, 0x47	; 71
    1540:	f9 4f       	sbci	r31, 0xF9	; 249
    1542:	31 e0       	ldi	r19, 0x01	; 1
    1544:	38 0f       	add	r19, r24
    1546:	30 83       	st	Z, r19
    1548:	a1 83       	std	Z+1, r26	; 0x01
				explodeStackSize = explodeStackSize + 1;
    154a:	2f 5f       	subi	r18, 0xFF	; 255
    154c:	20 93 95 16 	sts	0x1695, r18	; 0x801695 <explodeStackSize>
				if(tempObj == OBJWall) {
    1550:	91 30       	cpi	r25, 0x01	; 1
    1552:	61 f5       	brne	.+88     	; 0x15ac <gamePlayingBombCheck+0x20e>
					tempScore = tempScore + 1;
    1554:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    1558:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    155c:	2f 5f       	subi	r18, 0xFF	; 255
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    1564:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    1568:	21 c0       	rjmp	.+66     	; 0x15ac <gamePlayingBombCheck+0x20e>
				}
			}
			else if(tempObj == OBJHidden){
    156a:	92 30       	cpi	r25, 0x02	; 2
    156c:	d1 f4       	brne	.+52     	; 0x15a2 <gamePlayingBombCheck+0x204>
				objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)] = OBJDoor;
    156e:	f9 01       	movw	r30, r18
    1570:	ee 0f       	add	r30, r30
    1572:	ff 1f       	adc	r31, r31
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	e2 1b       	sub	r30, r18
    157e:	f3 0b       	sbc	r31, r19
    1580:	ea 56       	subi	r30, 0x6A	; 106
    1582:	f9 4e       	sbci	r31, 0xE9	; 233
    1584:	e6 0f       	add	r30, r22
    1586:	f7 1f       	adc	r31, r23
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	90 83       	st	Z, r25
				tempScore = tempScore + 5;
    158c:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    1590:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1594:	2b 5f       	subi	r18, 0xFB	; 251
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    159c:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <gamePlayingBombCheck+0x20e>
			}
			else if(tempObj == OBJPlayer){
    15a2:	94 30       	cpi	r25, 0x04	; 4
    15a4:	19 f4       	brne	.+6      	; 0x15ac <gamePlayingBombCheck+0x20e>
				gameOver = 1;
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <gameOver>
			}
		}
		if(player1.bombPosX != 0) {
    15ac:	88 23       	and	r24, r24
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <gamePlayingBombCheck+0x214>
    15b0:	63 c0       	rjmp	.+198    	; 0x1678 <gamePlayingBombCheck+0x2da>
			tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)];
    15b2:	60 91 9e 06 	lds	r22, 0x069E	; 0x80069e <player1+0x5>
    15b6:	e8 2f       	mov	r30, r24
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	af 01       	movw	r20, r30
    15bc:	41 50       	subi	r20, 0x01	; 1
    15be:	51 09       	sbc	r21, r1
    15c0:	26 2f       	mov	r18, r22
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	fa 01       	movw	r30, r20
    15c6:	97 e0       	ldi	r25, 0x07	; 7
    15c8:	69 9f       	mul	r22, r25
    15ca:	e0 0d       	add	r30, r0
    15cc:	f1 1d       	adc	r31, r1
    15ce:	11 24       	eor	r1, r1
    15d0:	ea 56       	subi	r30, 0x6A	; 106
    15d2:	f9 4e       	sbci	r31, 0xE9	; 233
    15d4:	90 81       	ld	r25, Z
			if(tempObj == OBJEmpty || tempObj == OBJWall || tempObj == OBJEnemy){
    15d6:	92 30       	cpi	r25, 0x02	; 2
    15d8:	18 f0       	brcs	.+6      	; 0x15e0 <gamePlayingBombCheck+0x242>
    15da:	95 30       	cpi	r25, 0x05	; 5
    15dc:	61 f5       	brne	.+88     	; 0x1636 <gamePlayingBombCheck+0x298>
    15de:	40 c1       	rjmp	.+640    	; 0x1860 <gamePlayingBombCheck+0x4c2>
				struct explodeNode tempExplo;
				tempExplo.posX = player1.bombPosX - 1;
				tempExplo.posY = player1.bombPosY;
				objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)] = OBJExplode;
    15e0:	f9 01       	movw	r30, r18
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	e2 1b       	sub	r30, r18
    15f0:	f3 0b       	sbc	r31, r19
    15f2:	ea 56       	subi	r30, 0x6A	; 106
    15f4:	f9 4e       	sbci	r31, 0xE9	; 233
    15f6:	e4 0f       	add	r30, r20
    15f8:	f5 1f       	adc	r31, r21
    15fa:	28 e0       	ldi	r18, 0x08	; 8
    15fc:	20 83       	st	Z, r18
				explodeStack[explodeStackSize] = tempExplo;
    15fe:	20 91 95 16 	lds	r18, 0x1695	; 0x801695 <explodeStackSize>
    1602:	e2 2f       	mov	r30, r18
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	ee 0f       	add	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	e7 54       	subi	r30, 0x47	; 71
    160c:	f9 4f       	sbci	r31, 0xF9	; 249
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	38 0f       	add	r19, r24
    1612:	30 83       	st	Z, r19
    1614:	61 83       	std	Z+1, r22	; 0x01
				explodeStackSize = explodeStackSize + 1;
    1616:	2f 5f       	subi	r18, 0xFF	; 255
    1618:	20 93 95 16 	sts	0x1695, r18	; 0x801695 <explodeStackSize>
				if(tempObj == OBJWall) {
    161c:	91 30       	cpi	r25, 0x01	; 1
    161e:	61 f5       	brne	.+88     	; 0x1678 <gamePlayingBombCheck+0x2da>
					tempScore = tempScore + 1;
    1620:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    1624:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1628:	2f 5f       	subi	r18, 0xFF	; 255
    162a:	3f 4f       	sbci	r19, 0xFF	; 255
    162c:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    1630:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    1634:	21 c0       	rjmp	.+66     	; 0x1678 <gamePlayingBombCheck+0x2da>
				}
			}
			else if(tempObj == OBJHidden){
    1636:	92 30       	cpi	r25, 0x02	; 2
    1638:	d1 f4       	brne	.+52     	; 0x166e <gamePlayingBombCheck+0x2d0>
				objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)] = OBJDoor;
    163a:	f9 01       	movw	r30, r18
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	e2 1b       	sub	r30, r18
    164a:	f3 0b       	sbc	r31, r19
    164c:	ea 56       	subi	r30, 0x6A	; 106
    164e:	f9 4e       	sbci	r31, 0xE9	; 233
    1650:	e4 0f       	add	r30, r20
    1652:	f5 1f       	adc	r31, r21
    1654:	93 e0       	ldi	r25, 0x03	; 3
    1656:	90 83       	st	Z, r25
				tempScore = tempScore + 5;
    1658:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    165c:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1660:	2b 5f       	subi	r18, 0xFB	; 251
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    1668:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <gamePlayingBombCheck+0x2da>
			}
			else if(tempObj == OBJPlayer){
    166e:	94 30       	cpi	r25, 0x04	; 4
    1670:	19 f4       	brne	.+6      	; 0x1678 <gamePlayingBombCheck+0x2da>
				gameOver = 1;
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <gameOver>
			}
		}
		if(player1.bombPosY != 0) {
    1678:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <player1+0x5>
    167c:	99 23       	and	r25, r25
    167e:	09 f4       	brne	.+2      	; 0x1682 <gamePlayingBombCheck+0x2e4>
    1680:	68 c0       	rjmp	.+208    	; 0x1752 <gamePlayingBombCheck+0x3b4>
			tempObj = objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)];
    1682:	29 2f       	mov	r18, r25
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	21 50       	subi	r18, 0x01	; 1
    1688:	31 09       	sbc	r19, r1
    168a:	68 2f       	mov	r22, r24
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	f9 01       	movw	r30, r18
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	e2 1b       	sub	r30, r18
    169e:	f3 0b       	sbc	r31, r19
    16a0:	ea 56       	subi	r30, 0x6A	; 106
    16a2:	f9 4e       	sbci	r31, 0xE9	; 233
    16a4:	e6 0f       	add	r30, r22
    16a6:	f7 1f       	adc	r31, r23
    16a8:	40 81       	ld	r20, Z
			if(tempObj == OBJEmpty || tempObj == OBJWall || tempObj == OBJEnemy){
    16aa:	42 30       	cpi	r20, 0x02	; 2
    16ac:	18 f0       	brcs	.+6      	; 0x16b4 <gamePlayingBombCheck+0x316>
    16ae:	45 30       	cpi	r20, 0x05	; 5
    16b0:	61 f5       	brne	.+88     	; 0x170a <gamePlayingBombCheck+0x36c>
    16b2:	f5 c0       	rjmp	.+490    	; 0x189e <gamePlayingBombCheck+0x500>
				struct explodeNode tempExplo;
				tempExplo.posX = player1.bombPosX;
				tempExplo.posY = player1.bombPosY - 1;
				objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)] = OBJExplode;
    16b4:	f9 01       	movw	r30, r18
    16b6:	ee 0f       	add	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	e2 1b       	sub	r30, r18
    16c4:	f3 0b       	sbc	r31, r19
    16c6:	ea 56       	subi	r30, 0x6A	; 106
    16c8:	f9 4e       	sbci	r31, 0xE9	; 233
    16ca:	e6 0f       	add	r30, r22
    16cc:	f7 1f       	adc	r31, r23
    16ce:	28 e0       	ldi	r18, 0x08	; 8
    16d0:	20 83       	st	Z, r18
				explodeStack[explodeStackSize] = tempExplo;
    16d2:	20 91 95 16 	lds	r18, 0x1695	; 0x801695 <explodeStackSize>
    16d6:	e2 2f       	mov	r30, r18
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	e7 54       	subi	r30, 0x47	; 71
    16e0:	f9 4f       	sbci	r31, 0xF9	; 249
    16e2:	80 83       	st	Z, r24
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	39 0f       	add	r19, r25
    16e8:	31 83       	std	Z+1, r19	; 0x01
				explodeStackSize = explodeStackSize + 1;
    16ea:	2f 5f       	subi	r18, 0xFF	; 255
    16ec:	20 93 95 16 	sts	0x1695, r18	; 0x801695 <explodeStackSize>
				if(tempObj == OBJWall) {
    16f0:	41 30       	cpi	r20, 0x01	; 1
    16f2:	61 f5       	brne	.+88     	; 0x174c <gamePlayingBombCheck+0x3ae>
					tempScore = tempScore + 1;
    16f4:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    16f8:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    16fc:	2f 5f       	subi	r18, 0xFF	; 255
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1700:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    1704:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    1708:	21 c0       	rjmp	.+66     	; 0x174c <gamePlayingBombCheck+0x3ae>
				}
			}
			else if(tempObj == OBJHidden){
    170a:	42 30       	cpi	r20, 0x02	; 2
    170c:	d1 f4       	brne	.+52     	; 0x1742 <gamePlayingBombCheck+0x3a4>
				objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)] = OBJDoor;
    170e:	f9 01       	movw	r30, r18
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	ee 0f       	add	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	e2 1b       	sub	r30, r18
    171e:	f3 0b       	sbc	r31, r19
    1720:	ea 56       	subi	r30, 0x6A	; 106
    1722:	f9 4e       	sbci	r31, 0xE9	; 233
    1724:	e6 0f       	add	r30, r22
    1726:	f7 1f       	adc	r31, r23
    1728:	23 e0       	ldi	r18, 0x03	; 3
    172a:	20 83       	st	Z, r18
				tempScore = tempScore + 5;
    172c:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    1730:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1734:	2b 5f       	subi	r18, 0xFB	; 251
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    173c:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    1740:	05 c0       	rjmp	.+10     	; 0x174c <gamePlayingBombCheck+0x3ae>
			}
			else if(tempObj == OBJPlayer){
    1742:	44 30       	cpi	r20, 0x04	; 4
    1744:	19 f4       	brne	.+6      	; 0x174c <gamePlayingBombCheck+0x3ae>
				gameOver = 1;
    1746:	21 e0       	ldi	r18, 0x01	; 1
    1748:	20 93 a3 06 	sts	0x06A3, r18	; 0x8006a3 <gameOver>
			}
		}
		if(player1.bombPosY != 2) {
    174c:	92 30       	cpi	r25, 0x02	; 2
    174e:	09 f4       	brne	.+2      	; 0x1752 <gamePlayingBombCheck+0x3b4>
    1750:	62 c0       	rjmp	.+196    	; 0x1816 <gamePlayingBombCheck+0x478>
			tempObj = objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)];
    1752:	29 2f       	mov	r18, r25
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	2f 5f       	subi	r18, 0xFF	; 255
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	68 2f       	mov	r22, r24
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	f9 01       	movw	r30, r18
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e2 1b       	sub	r30, r18
    176e:	f3 0b       	sbc	r31, r19
    1770:	ea 56       	subi	r30, 0x6A	; 106
    1772:	f9 4e       	sbci	r31, 0xE9	; 233
    1774:	e6 0f       	add	r30, r22
    1776:	f7 1f       	adc	r31, r23
    1778:	40 81       	ld	r20, Z
			if(tempObj == OBJEmpty || tempObj == OBJWall || tempObj == OBJEnemy){
    177a:	42 30       	cpi	r20, 0x02	; 2
    177c:	18 f0       	brcs	.+6      	; 0x1784 <gamePlayingBombCheck+0x3e6>
    177e:	45 30       	cpi	r20, 0x05	; 5
    1780:	51 f5       	brne	.+84     	; 0x17d6 <gamePlayingBombCheck+0x438>
    1782:	ac c0       	rjmp	.+344    	; 0x18dc <gamePlayingBombCheck+0x53e>
				struct explodeNode tempExplo;
				tempExplo.posX = player1.bombPosX;
				tempExplo.posY = player1.bombPosY + 1;
				objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)] = OBJExplode;
    1784:	f9 01       	movw	r30, r18
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	ee 0f       	add	r30, r30
    178c:	ff 1f       	adc	r31, r31
    178e:	ee 0f       	add	r30, r30
    1790:	ff 1f       	adc	r31, r31
    1792:	e2 1b       	sub	r30, r18
    1794:	f3 0b       	sbc	r31, r19
    1796:	ea 56       	subi	r30, 0x6A	; 106
    1798:	f9 4e       	sbci	r31, 0xE9	; 233
    179a:	e6 0f       	add	r30, r22
    179c:	f7 1f       	adc	r31, r23
    179e:	28 e0       	ldi	r18, 0x08	; 8
    17a0:	20 83       	st	Z, r18
				explodeStack[explodeStackSize] = tempExplo;
    17a2:	20 91 95 16 	lds	r18, 0x1695	; 0x801695 <explodeStackSize>
    17a6:	e2 2f       	mov	r30, r18
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	e7 54       	subi	r30, 0x47	; 71
    17b0:	f9 4f       	sbci	r31, 0xF9	; 249
    17b2:	80 83       	st	Z, r24
    17b4:	9f 5f       	subi	r25, 0xFF	; 255
    17b6:	91 83       	std	Z+1, r25	; 0x01
				explodeStackSize = explodeStackSize + 1;
    17b8:	2f 5f       	subi	r18, 0xFF	; 255
    17ba:	20 93 95 16 	sts	0x1695, r18	; 0x801695 <explodeStackSize>
				if(tempObj == OBJWall) {
    17be:	41 30       	cpi	r20, 0x01	; 1
    17c0:	51 f5       	brne	.+84     	; 0x1816 <gamePlayingBombCheck+0x478>
					tempScore = tempScore + 1;
    17c2:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <tempScore>
    17c6:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <tempScore+0x1>
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <tempScore+0x1>
    17d0:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <tempScore>
    17d4:	20 c0       	rjmp	.+64     	; 0x1816 <gamePlayingBombCheck+0x478>
				}
			}
			else if(tempObj == OBJHidden){
    17d6:	42 30       	cpi	r20, 0x02	; 2
    17d8:	c9 f4       	brne	.+50     	; 0x180c <gamePlayingBombCheck+0x46e>
				objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)] = OBJDoor;
    17da:	f9 01       	movw	r30, r18
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	ee 0f       	add	r30, r30
    17e2:	ff 1f       	adc	r31, r31
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	e2 1b       	sub	r30, r18
    17ea:	f3 0b       	sbc	r31, r19
    17ec:	ea 56       	subi	r30, 0x6A	; 106
    17ee:	f9 4e       	sbci	r31, 0xE9	; 233
    17f0:	e6 0f       	add	r30, r22
    17f2:	f7 1f       	adc	r31, r23
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	80 83       	st	Z, r24
				tempScore = tempScore + 5;
    17f8:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <tempScore>
    17fc:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <tempScore+0x1>
    1800:	05 96       	adiw	r24, 0x05	; 5
    1802:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <tempScore+0x1>
    1806:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <tempScore>
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <gamePlayingBombCheck+0x478>
			}
			else if(tempObj == OBJPlayer){
    180c:	44 30       	cpi	r20, 0x04	; 4
    180e:	19 f4       	brne	.+6      	; 0x1816 <gamePlayingBombCheck+0x478>
				gameOver = 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
			}
		}
		player1.bombCount = 0;
    1816:	e9 e9       	ldi	r30, 0x99	; 153
    1818:	f6 e0       	ldi	r31, 0x06	; 6
    181a:	17 82       	std	Z+7, r1	; 0x07
    181c:	16 82       	std	Z+6, r1	; 0x06
		player1.isBombPlaced = 0;
    181e:	13 82       	std	Z+3, r1	; 0x03
	}
}
    1820:	7b c0       	rjmp	.+246    	; 0x1918 <gamePlayingBombCheck+0x57a>
			tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)];
			if(tempObj == OBJEmpty || tempObj == OBJWall || tempObj == OBJEnemy){
				struct explodeNode tempExplo;
				tempExplo.posX = player1.bombPosX + 1;
				tempExplo.posY = player1.bombPosY;
				objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)] = OBJExplode;
    1822:	f9 01       	movw	r30, r18
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	e2 1b       	sub	r30, r18
    1832:	f3 0b       	sbc	r31, r19
    1834:	ea 56       	subi	r30, 0x6A	; 106
    1836:	f9 4e       	sbci	r31, 0xE9	; 233
    1838:	e6 0f       	add	r30, r22
    183a:	f7 1f       	adc	r31, r23
    183c:	98 e0       	ldi	r25, 0x08	; 8
    183e:	90 83       	st	Z, r25
				explodeStack[explodeStackSize] = tempExplo;
    1840:	90 91 95 16 	lds	r25, 0x1695	; 0x801695 <explodeStackSize>
    1844:	e9 2f       	mov	r30, r25
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	e7 54       	subi	r30, 0x47	; 71
    184e:	f9 4f       	sbci	r31, 0xF9	; 249
    1850:	21 e0       	ldi	r18, 0x01	; 1
    1852:	28 0f       	add	r18, r24
    1854:	20 83       	st	Z, r18
    1856:	a1 83       	std	Z+1, r26	; 0x01
				explodeStackSize = explodeStackSize + 1;
    1858:	9f 5f       	subi	r25, 0xFF	; 255
    185a:	90 93 95 16 	sts	0x1695, r25	; 0x801695 <explodeStackSize>
    185e:	a6 ce       	rjmp	.-692    	; 0x15ac <gamePlayingBombCheck+0x20e>
			tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)];
			if(tempObj == OBJEmpty || tempObj == OBJWall || tempObj == OBJEnemy){
				struct explodeNode tempExplo;
				tempExplo.posX = player1.bombPosX - 1;
				tempExplo.posY = player1.bombPosY;
				objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)] = OBJExplode;
    1860:	f9 01       	movw	r30, r18
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	ee 0f       	add	r30, r30
    1868:	ff 1f       	adc	r31, r31
    186a:	ee 0f       	add	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	e2 1b       	sub	r30, r18
    1870:	f3 0b       	sbc	r31, r19
    1872:	ea 56       	subi	r30, 0x6A	; 106
    1874:	f9 4e       	sbci	r31, 0xE9	; 233
    1876:	e4 0f       	add	r30, r20
    1878:	f5 1f       	adc	r31, r21
    187a:	98 e0       	ldi	r25, 0x08	; 8
    187c:	90 83       	st	Z, r25
				explodeStack[explodeStackSize] = tempExplo;
    187e:	90 91 95 16 	lds	r25, 0x1695	; 0x801695 <explodeStackSize>
    1882:	e9 2f       	mov	r30, r25
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	e7 54       	subi	r30, 0x47	; 71
    188c:	f9 4f       	sbci	r31, 0xF9	; 249
    188e:	2f ef       	ldi	r18, 0xFF	; 255
    1890:	28 0f       	add	r18, r24
    1892:	20 83       	st	Z, r18
    1894:	61 83       	std	Z+1, r22	; 0x01
				explodeStackSize = explodeStackSize + 1;
    1896:	9f 5f       	subi	r25, 0xFF	; 255
    1898:	90 93 95 16 	sts	0x1695, r25	; 0x801695 <explodeStackSize>
    189c:	ed ce       	rjmp	.-550    	; 0x1678 <gamePlayingBombCheck+0x2da>
			tempObj = objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)];
			if(tempObj == OBJEmpty || tempObj == OBJWall || tempObj == OBJEnemy){
				struct explodeNode tempExplo;
				tempExplo.posX = player1.bombPosX;
				tempExplo.posY = player1.bombPosY - 1;
				objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)] = OBJExplode;
    189e:	f9 01       	movw	r30, r18
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	e2 1b       	sub	r30, r18
    18ae:	f3 0b       	sbc	r31, r19
    18b0:	ea 56       	subi	r30, 0x6A	; 106
    18b2:	f9 4e       	sbci	r31, 0xE9	; 233
    18b4:	e6 0f       	add	r30, r22
    18b6:	f7 1f       	adc	r31, r23
    18b8:	28 e0       	ldi	r18, 0x08	; 8
    18ba:	20 83       	st	Z, r18
				explodeStack[explodeStackSize] = tempExplo;
    18bc:	20 91 95 16 	lds	r18, 0x1695	; 0x801695 <explodeStackSize>
    18c0:	e2 2f       	mov	r30, r18
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	e7 54       	subi	r30, 0x47	; 71
    18ca:	f9 4f       	sbci	r31, 0xF9	; 249
    18cc:	80 83       	st	Z, r24
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	39 0f       	add	r19, r25
    18d2:	31 83       	std	Z+1, r19	; 0x01
				explodeStackSize = explodeStackSize + 1;
    18d4:	2f 5f       	subi	r18, 0xFF	; 255
    18d6:	20 93 95 16 	sts	0x1695, r18	; 0x801695 <explodeStackSize>
    18da:	38 cf       	rjmp	.-400    	; 0x174c <gamePlayingBombCheck+0x3ae>
			tempObj = objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)];
			if(tempObj == OBJEmpty || tempObj == OBJWall || tempObj == OBJEnemy){
				struct explodeNode tempExplo;
				tempExplo.posX = player1.bombPosX;
				tempExplo.posY = player1.bombPosY + 1;
				objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)] = OBJExplode;
    18dc:	f9 01       	movw	r30, r18
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	e2 1b       	sub	r30, r18
    18ec:	f3 0b       	sbc	r31, r19
    18ee:	ea 56       	subi	r30, 0x6A	; 106
    18f0:	f9 4e       	sbci	r31, 0xE9	; 233
    18f2:	e6 0f       	add	r30, r22
    18f4:	f7 1f       	adc	r31, r23
    18f6:	28 e0       	ldi	r18, 0x08	; 8
    18f8:	20 83       	st	Z, r18
				explodeStack[explodeStackSize] = tempExplo;
    18fa:	20 91 95 16 	lds	r18, 0x1695	; 0x801695 <explodeStackSize>
    18fe:	e2 2f       	mov	r30, r18
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	e7 54       	subi	r30, 0x47	; 71
    1908:	f9 4f       	sbci	r31, 0xF9	; 249
    190a:	80 83       	st	Z, r24
    190c:	9f 5f       	subi	r25, 0xFF	; 255
    190e:	91 83       	std	Z+1, r25	; 0x01
				explodeStackSize = explodeStackSize + 1;
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	20 93 95 16 	sts	0x1695, r18	; 0x801695 <explodeStackSize>
    1916:	7f cf       	rjmp	.-258    	; 0x1816 <gamePlayingBombCheck+0x478>
			}
		}
		player1.bombCount = 0;
		player1.isBombPlaced = 0;
	}
}
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	08 95       	ret

00001922 <TickGameLogic>:

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
	switch(state) {
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	8a 30       	cpi	r24, 0x0A	; 10
    192a:	91 05       	cpc	r25, r1
    192c:	08 f0       	brcs	.+2      	; 0x1930 <TickGameLogic+0xe>
    192e:	08 c3       	rjmp	.+1552   	; 0x1f40 <TickGameLogic+0x61e>
    1930:	fc 01       	movw	r30, r24
    1932:	e2 5a       	subi	r30, 0xA2	; 162
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__tablejump2__>
		case GLogicInit:
		state = GLogicMenu;
		break;
		
		case GLogicMenu:
		if(((SNESOutput & 0x1000) == 0x1000) && menuInputDelayCount >= menuInputDelay){
    193a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    193e:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    1942:	94 ff       	sbrs	r25, 4
    1944:	46 c0       	rjmp	.+140    	; 0x19d2 <TickGameLogic+0xb0>
    1946:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <menuInputDelayCount>
    194a:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <menuInputDelayCount+0x1>
    194e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <menuInputDelay>
    1952:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <menuInputDelay+0x1>
    1956:	28 17       	cp	r18, r24
    1958:	39 07       	cpc	r19, r25
    195a:	50 f5       	brcc	.+84     	; 0x19b0 <TickGameLogic+0x8e>
    195c:	3a c0       	rjmp	.+116    	; 0x19d2 <TickGameLogic+0xb0>
		case GLogicLevelInit:
		state = GLogicPlaying;
		break;
		
		case GLogicPlaying:
		if(levelFinish != 0 && levelCount < LEVELMAX) {
    195e:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <levelFinish>
    1962:	88 23       	and	r24, r24
    1964:	31 f0       	breq	.+12     	; 0x1972 <TickGameLogic+0x50>
    1966:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <levelCount>
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	08 f4       	brcc	.+2      	; 0x1970 <TickGameLogic+0x4e>
    196e:	fd c0       	rjmp	.+506    	; 0x1b6a <TickGameLogic+0x248>
    1970:	45 c1       	rjmp	.+650    	; 0x1bfc <TickGameLogic+0x2da>
			state = GLogicLevelComplete;
		}
		else if(levelFinish != 0 && levelCount >= LEVELMAX) {
			state = GLogicWin;
		}
		else if(gameOver != 0 && playerLives > 0) {
    1972:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <gameOver>
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <TickGameLogic+0x5a>
    197a:	f0 c1       	rjmp	.+992    	; 0x1d5c <TickGameLogic+0x43a>
    197c:	80 91 ab 16 	lds	r24, 0x16AB	; 0x8016ab <playerLives>
    1980:	81 11       	cpse	r24, r1
    1982:	ae c1       	rjmp	.+860    	; 0x1ce0 <TickGameLogic+0x3be>
    1984:	c5 c2       	rjmp	.+1418   	; 0x1f10 <TickGameLogic+0x5ee>
		case GLogicNextLevel:
		state = GLogicPlaying;
		break;
		
		case GLogicLevelComplete:
		if((SNESOutput & 0x1000) == 0x1000){
    1986:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    198a:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    198e:	94 fd       	sbrc	r25, 4
    1990:	f0 c0       	rjmp	.+480    	; 0x1b72 <TickGameLogic+0x250>
    1992:	eb c0       	rjmp	.+470    	; 0x1b6a <TickGameLogic+0x248>
			state = GLogicNextLevel;
		}
		break;
		
		case GLogicWin:
		if((SNESOutput & 0x1000) == 0x1000){
    1994:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    1998:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    199c:	94 fd       	sbrc	r25, 4
    199e:	19 c0       	rjmp	.+50     	; 0x19d2 <TickGameLogic+0xb0>
    19a0:	2d c1       	rjmp	.+602    	; 0x1bfc <TickGameLogic+0x2da>
		case GLogicRestartLevel:
		state = GLogicPlaying;
		break;
		
		case GLogicGameOver:
		if((SNESOutput &0x1000) == 0x1000){
    19a2:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    19a6:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    19aa:	94 fd       	sbrc	r25, 4
    19ac:	12 c0       	rjmp	.+36     	; 0x19d2 <TickGameLogic+0xb0>
    19ae:	b0 c2       	rjmp	.+1376   	; 0x1f10 <TickGameLogic+0x5ee>
    19b0:	29 ed       	ldi	r18, 0xD9	; 217
    19b2:	32 e0       	ldi	r19, 0x02	; 2
    19b4:	46 e9       	ldi	r20, 0x96	; 150
    19b6:	56 e1       	ldi	r21, 0x16	; 22
    19b8:	6e ee       	ldi	r22, 0xEE	; 238
    19ba:	72 e0       	ldi	r23, 0x02	; 2
    19bc:	b2 c0       	rjmp	.+356    	; 0x1b22 <TickGameLogic+0x200>
		break;
	}
	switch(state) {
			case GLogicInit:
			//SNES_init();
			highScore = 0;
    19be:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <highScore+0x1>
    19c2:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <highScore>
			menuInputDelayCount = 0;
    19c6:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <menuInputDelayCount+0x1>
    19ca:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <menuInputDelayCount>
			break;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	ba c2       	rjmp	.+1396   	; 0x1f46 <TickGameLogic+0x624>
			
			case GLogicMenu:
			currentGameState = GLogicMenu;
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			displayScore[2] = (highScore % 10) + '0';
    19d8:	e0 91 b5 06 	lds	r30, 0x06B5	; 0x8006b5 <highScore>
    19dc:	f0 91 b6 06 	lds	r31, 0x06B6	; 0x8006b6 <highScore+0x1>
    19e0:	c2 e9       	ldi	r28, 0x92	; 146
    19e2:	d6 e0       	ldi	r29, 0x06	; 6
    19e4:	9f 01       	movw	r18, r30
    19e6:	ad ec       	ldi	r26, 0xCD	; 205
    19e8:	bc ec       	ldi	r27, 0xCC	; 204
    19ea:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    19ee:	ac 01       	movw	r20, r24
    19f0:	56 95       	lsr	r21
    19f2:	47 95       	ror	r20
    19f4:	56 95       	lsr	r21
    19f6:	47 95       	ror	r20
    19f8:	56 95       	lsr	r21
    19fa:	47 95       	ror	r20
    19fc:	9a 01       	movw	r18, r20
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	ca 01       	movw	r24, r20
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	82 0f       	add	r24, r18
    1a12:	93 1f       	adc	r25, r19
    1a14:	9f 01       	movw	r18, r30
    1a16:	28 1b       	sub	r18, r24
    1a18:	39 0b       	sbc	r19, r25
    1a1a:	c9 01       	movw	r24, r18
    1a1c:	80 5d       	subi	r24, 0xD0	; 208
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
			displayScore[1] = ((highScore / 10) % 10) + '0';
    1a20:	9a 01       	movw	r18, r20
    1a22:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    1a26:	96 95       	lsr	r25
    1a28:	87 95       	ror	r24
    1a2a:	96 95       	lsr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	96 95       	lsr	r25
    1a30:	87 95       	ror	r24
    1a32:	9c 01       	movw	r18, r24
    1a34:	22 0f       	add	r18, r18
    1a36:	33 1f       	adc	r19, r19
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	82 0f       	add	r24, r18
    1a46:	93 1f       	adc	r25, r19
    1a48:	48 1b       	sub	r20, r24
    1a4a:	59 0b       	sbc	r21, r25
    1a4c:	40 5d       	subi	r20, 0xD0	; 208
    1a4e:	49 83       	std	Y+1, r20	; 0x01
			displayScore[0] = ((highScore / 100) % 10) + '0';
    1a50:	9f 01       	movw	r18, r30
    1a52:	36 95       	lsr	r19
    1a54:	27 95       	ror	r18
    1a56:	36 95       	lsr	r19
    1a58:	27 95       	ror	r18
    1a5a:	ab e7       	ldi	r26, 0x7B	; 123
    1a5c:	b4 e1       	ldi	r27, 0x14	; 20
    1a5e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    1a62:	ac 01       	movw	r20, r24
    1a64:	56 95       	lsr	r21
    1a66:	47 95       	ror	r20
    1a68:	9a 01       	movw	r18, r20
    1a6a:	ad ec       	ldi	r26, 0xCD	; 205
    1a6c:	bc ec       	ldi	r27, 0xCC	; 204
    1a6e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__umulhisi3>
    1a72:	96 95       	lsr	r25
    1a74:	87 95       	ror	r24
    1a76:	96 95       	lsr	r25
    1a78:	87 95       	ror	r24
    1a7a:	96 95       	lsr	r25
    1a7c:	87 95       	ror	r24
    1a7e:	9c 01       	movw	r18, r24
    1a80:	22 0f       	add	r18, r18
    1a82:	33 1f       	adc	r19, r19
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	82 0f       	add	r24, r18
    1a92:	93 1f       	adc	r25, r19
    1a94:	48 1b       	sub	r20, r24
    1a96:	59 0b       	sbc	r21, r25
    1a98:	40 5d       	subi	r20, 0xD0	; 208
    1a9a:	48 83       	st	Y, r20
			if((SNESOutput & 0x0010) == 0x0010) {
    1a9c:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    1aa0:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    1aa4:	84 ff       	sbrs	r24, 4
    1aa6:	08 c0       	rjmp	.+16     	; 0x1ab8 <TickGameLogic+0x196>
				//Save Score = "R"
				eeprom_write_word(EEPROM_ADDRESS_0, highScore);
    1aa8:	bf 01       	movw	r22, r30
    1aaa:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <EEPROM_ADDRESS_0>
    1aae:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <EEPROM_ADDRESS_0+0x1>
    1ab2:	0e 94 02 16 	call	0x2c04	; 0x2c04 <eeprom_write_word>
    1ab6:	17 c0       	rjmp	.+46     	; 0x1ae6 <TickGameLogic+0x1c4>
			}
			else if((SNESOutput & 0x0020) == 0x0020) {
    1ab8:	85 ff       	sbrs	r24, 5
    1aba:	0b c0       	rjmp	.+22     	; 0x1ad2 <TickGameLogic+0x1b0>
				//Load Score = "L"
				highScore = eeprom_read_word(EEPROM_ADDRESS_0);
    1abc:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <EEPROM_ADDRESS_0>
    1ac0:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <EEPROM_ADDRESS_0+0x1>
    1ac4:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <eeprom_read_word>
    1ac8:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <highScore+0x1>
    1acc:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <highScore>
    1ad0:	0a c0       	rjmp	.+20     	; 0x1ae6 <TickGameLogic+0x1c4>
			}
			else if((SNESOutput & 0x2000) == 0x2000) {
    1ad2:	95 ff       	sbrs	r25, 5
    1ad4:	08 c0       	rjmp	.+16     	; 0x1ae6 <TickGameLogic+0x1c4>
				//Clear Score = "SELECT"
				eeprom_write_word(EEPROM_ADDRESS_0, 0x0000);
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <EEPROM_ADDRESS_0>
    1ade:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <EEPROM_ADDRESS_0+0x1>
    1ae2:	0e 94 02 16 	call	0x2c04	; 0x2c04 <eeprom_write_word>
			}
			
			if(menuInputDelayCount < menuInputDelay) {
    1ae6:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <menuInputDelayCount>
    1aea:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <menuInputDelayCount+0x1>
    1aee:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <menuInputDelay>
    1af2:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <menuInputDelay+0x1>
    1af6:	82 17       	cp	r24, r18
    1af8:	93 07       	cpc	r25, r19
    1afa:	08 f0       	brcs	.+2      	; 0x1afe <TickGameLogic+0x1dc>
    1afc:	23 c2       	rjmp	.+1094   	; 0x1f44 <TickGameLogic+0x622>
				menuInputDelayCount = menuInputDelayCount + 1;
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <menuInputDelayCount+0x1>
    1b04:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <menuInputDelayCount>
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	1d c2       	rjmp	.+1082   	; 0x1f46 <TickGameLogic+0x624>
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = levelDatabase[0][tempY][tempX];
    1b0c:	91 91       	ld	r25, Z+
    1b0e:	9d 93       	st	X+, r25
    1b10:	81 50       	subi	r24, 0x01	; 1
			
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
    1b12:	e1 f7       	brne	.-8      	; 0x1b0c <TickGameLogic+0x1ea>
    1b14:	29 5f       	subi	r18, 0xF9	; 249
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	49 5f       	subi	r20, 0xF9	; 249
    1b1a:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
    1b1c:	26 17       	cp	r18, r22
    1b1e:	37 07       	cpc	r19, r23
    1b20:	21 f0       	breq	.+8      	; 0x1b2a <TickGameLogic+0x208>
}

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
    1b22:	da 01       	movw	r26, r20
    1b24:	f9 01       	movw	r30, r18
    1b26:	87 e0       	ldi	r24, 0x07	; 7
    1b28:	f1 cf       	rjmp	.-30     	; 0x1b0c <TickGameLogic+0x1ea>
					objectLocMatrix[tempY][tempX] = levelDatabase[0][tempY][tempX];
				}
			}
			
			//Reset Game values
			player1.playerPosX = 0;
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	f6 e0       	ldi	r31, 0x06	; 6
    1b2e:	10 82       	st	Z, r1
			player1.playerPosY = 0;
    1b30:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
    1b32:	13 82       	std	Z+3, r1	; 0x03
			
			
			currentGameState = GLogicPlaying;
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			levelFinish = 0;
    1b3a:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <levelFinish>
			levelCount = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <levelCount>
			gameOver = 0;
    1b44:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <gameOver>
			tempScore = 0;
    1b48:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <tempScore+0x1>
    1b4c:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <tempScore>
			gameTimer = ROUNDPERIOD;
    1b50:	24 e1       	ldi	r18, 0x14	; 20
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	30 93 ce 06 	sts	0x06CE, r19	; 0x8006ce <gameTimer+0x1>
    1b58:	20 93 cd 06 	sts	0x06CD, r18	; 0x8006cd <gameTimer>
			gameTimerCountSecond = 0;
    1b5c:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <gameTimerCountSecond>
			playerLives = LIVESAMOUNT;
    1b60:	80 93 ab 16 	sts	0x16AB, r24	; 0x8016ab <playerLives>
			transferObjToDis();
    1b64:	b3 d8       	rcall	.-3738   	; 0xccc <transferObjToDis>
			break;
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	ee c1       	rjmp	.+988    	; 0x1f46 <TickGameLogic+0x624>
			
			case GLogicLevelComplete:
			currentGameState = GLogicLevelComplete;
    1b6a:	86 e0       	ldi	r24, 0x06	; 6
    1b6c:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			break;
    1b70:	ea c1       	rjmp	.+980    	; 0x1f46 <TickGameLogic+0x624>
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
    1b72:	20 91 8e 06 	lds	r18, 0x068E	; 0x80068e <levelCount>
    1b76:	2f 5f       	subi	r18, 0xFF	; 255
    1b78:	20 93 8e 06 	sts	0x068E, r18	; 0x80068e <levelCount>
    1b7c:	85 e1       	ldi	r24, 0x15	; 21
    1b7e:	28 9f       	mul	r18, r24
    1b80:	90 01       	movw	r18, r0
    1b82:	11 24       	eor	r1, r1
    1b84:	2c 53       	subi	r18, 0x3C	; 60
    1b86:	3d 4f       	sbci	r19, 0xFD	; 253
    1b88:	46 e9       	ldi	r20, 0x96	; 150
    1b8a:	56 e1       	ldi	r21, 0x16	; 22
    1b8c:	6b ea       	ldi	r22, 0xAB	; 171
    1b8e:	76 e1       	ldi	r23, 0x16	; 22
    1b90:	0c c0       	rjmp	.+24     	; 0x1baa <TickGameLogic+0x288>
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
    1b92:	91 91       	ld	r25, Z+
    1b94:	9d 93       	st	X+, r25
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	87 30       	cpi	r24, 0x07	; 7
    1b9a:	d9 f7       	brne	.-10     	; 0x1b92 <TickGameLogic+0x270>
    1b9c:	29 5f       	subi	r18, 0xF9	; 249
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	49 5f       	subi	r20, 0xF9	; 249
    1ba2:	5f 4f       	sbci	r21, 0xFF	; 255
			break;
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
    1ba4:	46 17       	cp	r20, r22
    1ba6:	57 07       	cpc	r21, r23
    1ba8:	21 f0       	breq	.+8      	; 0x1bb2 <TickGameLogic+0x290>
}

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
    1baa:	da 01       	movw	r26, r20
    1bac:	f9 01       	movw	r30, r18
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	f0 cf       	rjmp	.-32     	; 0x1b92 <TickGameLogic+0x270>
				}
			}
			
			
			//Reset Game values
			player1.playerPosX = 0;
    1bb2:	e9 e9       	ldi	r30, 0x99	; 153
    1bb4:	f6 e0       	ldi	r31, 0x06	; 6
    1bb6:	10 82       	st	Z, r1
			player1.playerPosY = 0;
    1bb8:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
    1bba:	13 82       	std	Z+3, r1	; 0x03
			tempScore = tempScore + gameTimer;
    1bbc:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    1bc0:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1bc4:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <gameTimer>
    1bc8:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <gameTimer+0x1>
    1bcc:	82 0f       	add	r24, r18
    1bce:	93 1f       	adc	r25, r19
    1bd0:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <tempScore+0x1>
    1bd4:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <tempScore>
			
			currentGameState = GLogicPlaying;
    1bd8:	84 e0       	ldi	r24, 0x04	; 4
    1bda:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			levelFinish = 0;
    1bde:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <levelFinish>
			gameOver = 0;
    1be2:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <gameOver>
			gameTimer = ROUNDPERIOD;
    1be6:	84 e1       	ldi	r24, 0x14	; 20
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <gameTimer+0x1>
    1bee:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <gameTimer>
			gameTimerCountSecond = 0;
    1bf2:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <gameTimerCountSecond>
			transferObjToDis();
    1bf6:	6a d8       	rcall	.-3884   	; 0xccc <transferObjToDis>
			break;
    1bf8:	87 e0       	ldi	r24, 0x07	; 7
    1bfa:	a5 c1       	rjmp	.+842    	; 0x1f46 <TickGameLogic+0x624>
			
			case GLogicWin:
			currentGameState = GLogicWin;
    1bfc:	89 e0       	ldi	r24, 0x09	; 9
    1bfe:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			displayScore[2] = (tempScore % 10) + '0';
    1c02:	e0 91 8f 06 	lds	r30, 0x068F	; 0x80068f <tempScore>
    1c06:	f0 91 90 06 	lds	r31, 0x0690	; 0x800690 <tempScore+0x1>
    1c0a:	c2 e9       	ldi	r28, 0x92	; 146
    1c0c:	d6 e0       	ldi	r29, 0x06	; 6
    1c0e:	9f 01       	movw	r18, r30
    1c10:	ad ec       	ldi	r26, 0xCD	; 205
    1c12:	bc ec       	ldi	r27, 0xCC	; 204
    1c14:	e3 d7       	rcall	.+4038   	; 0x2bdc <__umulhisi3>
    1c16:	ac 01       	movw	r20, r24
    1c18:	56 95       	lsr	r21
    1c1a:	47 95       	ror	r20
    1c1c:	56 95       	lsr	r21
    1c1e:	47 95       	ror	r20
    1c20:	56 95       	lsr	r21
    1c22:	47 95       	ror	r20
    1c24:	9a 01       	movw	r18, r20
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	ca 01       	movw	r24, r20
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	82 0f       	add	r24, r18
    1c3a:	93 1f       	adc	r25, r19
    1c3c:	9f 01       	movw	r18, r30
    1c3e:	28 1b       	sub	r18, r24
    1c40:	39 0b       	sbc	r19, r25
    1c42:	c9 01       	movw	r24, r18
    1c44:	80 5d       	subi	r24, 0xD0	; 208
			displayScore[1] = ((tempScore / 10) % 10) + '0';
    1c46:	8a 83       	std	Y+2, r24	; 0x02
    1c48:	9a 01       	movw	r18, r20
    1c4a:	c8 d7       	rcall	.+3984   	; 0x2bdc <__umulhisi3>
    1c4c:	96 95       	lsr	r25
    1c4e:	87 95       	ror	r24
    1c50:	96 95       	lsr	r25
    1c52:	87 95       	ror	r24
    1c54:	96 95       	lsr	r25
    1c56:	87 95       	ror	r24
    1c58:	9c 01       	movw	r18, r24
    1c5a:	22 0f       	add	r18, r18
    1c5c:	33 1f       	adc	r19, r19
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	82 0f       	add	r24, r18
    1c6c:	93 1f       	adc	r25, r19
    1c6e:	48 1b       	sub	r20, r24
    1c70:	59 0b       	sbc	r21, r25
    1c72:	40 5d       	subi	r20, 0xD0	; 208
    1c74:	49 83       	std	Y+1, r20	; 0x01
			displayScore[0] = ((tempScore / 100) % 10) + '0';
    1c76:	9f 01       	movw	r18, r30
    1c78:	36 95       	lsr	r19
    1c7a:	27 95       	ror	r18
    1c7c:	36 95       	lsr	r19
    1c7e:	27 95       	ror	r18
    1c80:	ab e7       	ldi	r26, 0x7B	; 123
    1c82:	b4 e1       	ldi	r27, 0x14	; 20
    1c84:	ab d7       	rcall	.+3926   	; 0x2bdc <__umulhisi3>
    1c86:	ac 01       	movw	r20, r24
    1c88:	56 95       	lsr	r21
    1c8a:	47 95       	ror	r20
    1c8c:	9a 01       	movw	r18, r20
    1c8e:	ad ec       	ldi	r26, 0xCD	; 205
    1c90:	bc ec       	ldi	r27, 0xCC	; 204
    1c92:	a4 d7       	rcall	.+3912   	; 0x2bdc <__umulhisi3>
    1c94:	96 95       	lsr	r25
    1c96:	87 95       	ror	r24
    1c98:	96 95       	lsr	r25
    1c9a:	87 95       	ror	r24
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	9c 01       	movw	r18, r24
    1ca2:	22 0f       	add	r18, r18
    1ca4:	33 1f       	adc	r19, r19
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	82 0f       	add	r24, r18
    1cb4:	93 1f       	adc	r25, r19
    1cb6:	48 1b       	sub	r20, r24
    1cb8:	59 0b       	sbc	r21, r25
    1cba:	40 5d       	subi	r20, 0xD0	; 208
    1cbc:	48 83       	st	Y, r20
			if(highScore < tempScore) {
    1cbe:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <highScore>
    1cc2:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <highScore+0x1>
    1cc6:	8e 17       	cp	r24, r30
    1cc8:	9f 07       	cpc	r25, r31
    1cca:	20 f4       	brcc	.+8      	; 0x1cd4 <TickGameLogic+0x3b2>
				highScore = tempScore;
    1ccc:	f0 93 b6 06 	sts	0x06B6, r31	; 0x8006b6 <highScore+0x1>
    1cd0:	e0 93 b5 06 	sts	0x06B5, r30	; 0x8006b5 <highScore>
			}
			menuInputDelayCount = 0;
    1cd4:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <menuInputDelayCount+0x1>
    1cd8:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <menuInputDelayCount>
			break;
    1cdc:	89 e0       	ldi	r24, 0x09	; 9
    1cde:	33 c1       	rjmp	.+614    	; 0x1f46 <TickGameLogic+0x624>
			
			case GLogicRestartLevel:
			playerLives = playerLives - 1;
    1ce0:	80 91 ab 16 	lds	r24, 0x16AB	; 0x8016ab <playerLives>
    1ce4:	81 50       	subi	r24, 0x01	; 1
    1ce6:	80 93 ab 16 	sts	0x16AB, r24	; 0x8016ab <playerLives>
    1cea:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <levelCount>
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	25 e1       	ldi	r18, 0x15	; 21
    1cf4:	28 9f       	mul	r18, r24
    1cf6:	a0 01       	movw	r20, r0
    1cf8:	29 9f       	mul	r18, r25
    1cfa:	50 0d       	add	r21, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	47 52       	subi	r20, 0x27	; 39
    1d00:	5d 4f       	sbci	r21, 0xFD	; 253
    1d02:	26 e9       	ldi	r18, 0x96	; 150
    1d04:	36 e1       	ldi	r19, 0x16	; 22
    1d06:	6b ea       	ldi	r22, 0xAB	; 171
    1d08:	76 e1       	ldi	r23, 0x16	; 22
    1d0a:	0c c0       	rjmp	.+24     	; 0x1d24 <TickGameLogic+0x402>
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
    1d0c:	91 91       	ld	r25, Z+
    1d0e:	9d 93       	st	X+, r25
			break;
			
			case GLogicRestartLevel:
			playerLives = playerLives - 1;
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
    1d10:	8f 5f       	subi	r24, 0xFF	; 255
    1d12:	87 30       	cpi	r24, 0x07	; 7
    1d14:	d9 f7       	brne	.-10     	; 0x1d0c <TickGameLogic+0x3ea>
    1d16:	49 5f       	subi	r20, 0xF9	; 249
    1d18:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1a:	29 5f       	subi	r18, 0xF9	; 249
    1d1c:	3f 4f       	sbci	r19, 0xFF	; 255
			menuInputDelayCount = 0;
			break;
			
			case GLogicRestartLevel:
			playerLives = playerLives - 1;
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
    1d1e:	26 17       	cp	r18, r22
    1d20:	37 07       	cpc	r19, r23
    1d22:	21 f0       	breq	.+8      	; 0x1d2c <TickGameLogic+0x40a>
}

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
    1d24:	d9 01       	movw	r26, r18
    1d26:	fa 01       	movw	r30, r20
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	f0 cf       	rjmp	.-32     	; 0x1d0c <TickGameLogic+0x3ea>
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
				}
			}
			
			//Reset Game values
			player1.playerPosX = 0;
    1d2c:	e9 e9       	ldi	r30, 0x99	; 153
    1d2e:	f6 e0       	ldi	r31, 0x06	; 6
    1d30:	10 82       	st	Z, r1
			player1.playerPosY = 0;
    1d32:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
    1d34:	13 82       	std	Z+3, r1	; 0x03
			
			currentGameState = GLogicPlaying;
    1d36:	84 e0       	ldi	r24, 0x04	; 4
    1d38:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			levelFinish = 0;
    1d3c:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <levelFinish>
			gameOver = 0;
    1d40:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <gameOver>
			gameTimer = ROUNDPERIOD;
    1d44:	84 e1       	ldi	r24, 0x14	; 20
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <gameTimer+0x1>
    1d4c:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <gameTimer>
			gameTimerCountSecond = 0;
    1d50:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <gameTimerCountSecond>
			transferObjToDis();
    1d54:	0e 94 66 06 	call	0xccc	; 0xccc <transferObjToDis>
			break;
    1d58:	88 e0       	ldi	r24, 0x08	; 8
			
			case GLogicPlaying:
			
			gamePlayingPlayerActions();
    1d5a:	f5 c0       	rjmp	.+490    	; 0x1f46 <TickGameLogic+0x624>
    1d5c:	77 d9       	rcall	.-3346   	; 0x104c <gamePlayingPlayerActions>
			gamePlayingBombCheck();
    1d5e:	1f db       	rcall	.-2498   	; 0x139e <gamePlayingBombCheck>
    1d60:	0e 94 66 06 	call	0xccc	; 0xccc <transferObjToDis>
			
			transferObjToDis();
    1d64:	c0 91 8f 06 	lds	r28, 0x068F	; 0x80068f <tempScore>
			
			displayScore[2] = (tempScore % 10) + '0';
    1d68:	d0 91 90 06 	lds	r29, 0x0690	; 0x800690 <tempScore+0x1>
    1d6c:	e2 e9       	ldi	r30, 0x92	; 146
    1d6e:	f6 e0       	ldi	r31, 0x06	; 6
    1d70:	9e 01       	movw	r18, r28
    1d72:	ad ec       	ldi	r26, 0xCD	; 205
    1d74:	bc ec       	ldi	r27, 0xCC	; 204
    1d76:	32 d7       	rcall	.+3684   	; 0x2bdc <__umulhisi3>
    1d78:	ac 01       	movw	r20, r24
    1d7a:	56 95       	lsr	r21
    1d7c:	47 95       	ror	r20
    1d7e:	56 95       	lsr	r21
    1d80:	47 95       	ror	r20
    1d82:	56 95       	lsr	r21
    1d84:	47 95       	ror	r20
    1d86:	9a 01       	movw	r18, r20
    1d88:	22 0f       	add	r18, r18
    1d8a:	33 1f       	adc	r19, r19
    1d8c:	ca 01       	movw	r24, r20
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	82 0f       	add	r24, r18
    1d9c:	93 1f       	adc	r25, r19
    1d9e:	9e 01       	movw	r18, r28
    1da0:	28 1b       	sub	r18, r24
    1da2:	39 0b       	sbc	r19, r25
    1da4:	c9 01       	movw	r24, r18
    1da6:	80 5d       	subi	r24, 0xD0	; 208
    1da8:	82 83       	std	Z+2, r24	; 0x02
			displayScore[1] = ((tempScore / 10) % 10) + '0';
    1daa:	9a 01       	movw	r18, r20
    1dac:	17 d7       	rcall	.+3630   	; 0x2bdc <__umulhisi3>
    1dae:	96 95       	lsr	r25
    1db0:	87 95       	ror	r24
    1db2:	96 95       	lsr	r25
    1db4:	87 95       	ror	r24
    1db6:	96 95       	lsr	r25
    1db8:	87 95       	ror	r24
    1dba:	9c 01       	movw	r18, r24
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	82 0f       	add	r24, r18
    1dce:	93 1f       	adc	r25, r19
    1dd0:	48 1b       	sub	r20, r24
    1dd2:	59 0b       	sbc	r21, r25
    1dd4:	40 5d       	subi	r20, 0xD0	; 208
    1dd6:	41 83       	std	Z+1, r20	; 0x01
			displayScore[0] = ((tempScore / 100) % 10) + '0';
    1dd8:	9e 01       	movw	r18, r28
    1dda:	36 95       	lsr	r19
    1ddc:	27 95       	ror	r18
    1dde:	36 95       	lsr	r19
    1de0:	27 95       	ror	r18
    1de2:	ab e7       	ldi	r26, 0x7B	; 123
    1de4:	b4 e1       	ldi	r27, 0x14	; 20
    1de6:	fa d6       	rcall	.+3572   	; 0x2bdc <__umulhisi3>
    1de8:	ac 01       	movw	r20, r24
    1dea:	56 95       	lsr	r21
    1dec:	47 95       	ror	r20
    1dee:	9a 01       	movw	r18, r20
    1df0:	ad ec       	ldi	r26, 0xCD	; 205
    1df2:	bc ec       	ldi	r27, 0xCC	; 204
    1df4:	f3 d6       	rcall	.+3558   	; 0x2bdc <__umulhisi3>
    1df6:	96 95       	lsr	r25
    1df8:	87 95       	ror	r24
    1dfa:	96 95       	lsr	r25
    1dfc:	87 95       	ror	r24
    1dfe:	96 95       	lsr	r25
    1e00:	87 95       	ror	r24
    1e02:	9c 01       	movw	r18, r24
    1e04:	22 0f       	add	r18, r18
    1e06:	33 1f       	adc	r19, r19
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	82 0f       	add	r24, r18
    1e16:	93 1f       	adc	r25, r19
    1e18:	48 1b       	sub	r20, r24
    1e1a:	59 0b       	sbc	r21, r25
    1e1c:	40 5d       	subi	r20, 0xD0	; 208
    1e1e:	40 83       	st	Z, r20
    1e20:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <gameTimerCountSecond>
			if(gameTimerCountSecond >= gameTimerCountSecondPeriod) {
    1e24:	8a 30       	cpi	r24, 0x0A	; 10
    1e26:	88 f0       	brcs	.+34     	; 0x1e4a <TickGameLogic+0x528>
    1e28:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <gameTimer>
				gameTimer = gameTimer - 1;
    1e2c:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <gameTimer+0x1>
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <gameTimer+0x1>
    1e36:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <gameTimer>
    1e3a:	89 2b       	or	r24, r25
				if(gameTimer == 0) {
    1e3c:	19 f4       	brne	.+6      	; 0x1e44 <TickGameLogic+0x522>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
					gameOver = 1;
    1e40:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
    1e44:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <gameTimerCountSecond>
				}
				gameTimerCountSecond = 0;
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <TickGameLogic+0x52e>
    1e4a:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				gameTimerCountSecond = gameTimerCountSecond + 1;
    1e4c:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <gameTimerCountSecond>
			}
			displayGameTimer[2] = (gameTimer % 10) + '0';
    1e50:	c0 91 cd 06 	lds	r28, 0x06CD	; 0x8006cd <gameTimer>
    1e54:	d0 91 ce 06 	lds	r29, 0x06CE	; 0x8006ce <gameTimer+0x1>
    1e58:	e6 ea       	ldi	r30, 0xA6	; 166
    1e5a:	f6 e0       	ldi	r31, 0x06	; 6
    1e5c:	9e 01       	movw	r18, r28
    1e5e:	ad ec       	ldi	r26, 0xCD	; 205
    1e60:	bc ec       	ldi	r27, 0xCC	; 204
    1e62:	bc d6       	rcall	.+3448   	; 0x2bdc <__umulhisi3>
    1e64:	ac 01       	movw	r20, r24
    1e66:	56 95       	lsr	r21
    1e68:	47 95       	ror	r20
    1e6a:	56 95       	lsr	r21
    1e6c:	47 95       	ror	r20
    1e6e:	56 95       	lsr	r21
    1e70:	47 95       	ror	r20
    1e72:	9a 01       	movw	r18, r20
    1e74:	22 0f       	add	r18, r18
    1e76:	33 1f       	adc	r19, r19
    1e78:	ca 01       	movw	r24, r20
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	82 0f       	add	r24, r18
    1e88:	93 1f       	adc	r25, r19
    1e8a:	9e 01       	movw	r18, r28
    1e8c:	28 1b       	sub	r18, r24
    1e8e:	39 0b       	sbc	r19, r25
    1e90:	c9 01       	movw	r24, r18
    1e92:	80 5d       	subi	r24, 0xD0	; 208
    1e94:	82 83       	std	Z+2, r24	; 0x02
			displayGameTimer[1] = ((gameTimer / 10) % 10) + '0';
    1e96:	9a 01       	movw	r18, r20
    1e98:	a1 d6       	rcall	.+3394   	; 0x2bdc <__umulhisi3>
    1e9a:	96 95       	lsr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	96 95       	lsr	r25
    1ea0:	87 95       	ror	r24
    1ea2:	96 95       	lsr	r25
    1ea4:	87 95       	ror	r24
    1ea6:	9c 01       	movw	r18, r24
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	82 0f       	add	r24, r18
    1eba:	93 1f       	adc	r25, r19
    1ebc:	48 1b       	sub	r20, r24
    1ebe:	59 0b       	sbc	r21, r25
    1ec0:	40 5d       	subi	r20, 0xD0	; 208
    1ec2:	41 83       	std	Z+1, r20	; 0x01
			displayGameTimer[0] = ((gameTimer / 100) % 10) + '0';
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	36 95       	lsr	r19
    1ec8:	27 95       	ror	r18
    1eca:	36 95       	lsr	r19
    1ecc:	27 95       	ror	r18
    1ece:	ab e7       	ldi	r26, 0x7B	; 123
    1ed0:	b4 e1       	ldi	r27, 0x14	; 20
    1ed2:	84 d6       	rcall	.+3336   	; 0x2bdc <__umulhisi3>
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	56 95       	lsr	r21
    1ed8:	47 95       	ror	r20
    1eda:	9a 01       	movw	r18, r20
    1edc:	ad ec       	ldi	r26, 0xCD	; 205
    1ede:	bc ec       	ldi	r27, 0xCC	; 204
    1ee0:	7d d6       	rcall	.+3322   	; 0x2bdc <__umulhisi3>
    1ee2:	96 95       	lsr	r25
    1ee4:	87 95       	ror	r24
    1ee6:	96 95       	lsr	r25
    1ee8:	87 95       	ror	r24
    1eea:	96 95       	lsr	r25
    1eec:	87 95       	ror	r24
    1eee:	9c 01       	movw	r18, r24
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	82 0f       	add	r24, r18
    1f02:	93 1f       	adc	r25, r19
    1f04:	48 1b       	sub	r20, r24
    1f06:	59 0b       	sbc	r21, r25
    1f08:	40 5d       	subi	r20, 0xD0	; 208
    1f0a:	40 83       	st	Z, r20
    1f0c:	84 e0       	ldi	r24, 0x04	; 4
			
			
			break;
    1f0e:	1b c0       	rjmp	.+54     	; 0x1f46 <TickGameLogic+0x624>
    1f10:	85 e0       	ldi	r24, 0x05	; 5
			
			case GLogicGameOver:
			currentGameState = GLogicGameOver;
    1f12:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
    1f16:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <tempScore>
			if(highScore < tempScore) {
    1f1a:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <tempScore+0x1>
    1f1e:	20 91 b5 06 	lds	r18, 0x06B5	; 0x8006b5 <highScore>
    1f22:	30 91 b6 06 	lds	r19, 0x06B6	; 0x8006b6 <highScore+0x1>
    1f26:	28 17       	cp	r18, r24
    1f28:	39 07       	cpc	r19, r25
    1f2a:	20 f4       	brcc	.+8      	; 0x1f34 <TickGameLogic+0x612>
    1f2c:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <highScore+0x1>
				highScore = tempScore;
    1f30:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <highScore>
    1f34:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <menuInputDelayCount+0x1>
			}
			menuInputDelayCount = 0;
    1f38:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <menuInputDelayCount>
    1f3c:	85 e0       	ldi	r24, 0x05	; 5
			break;
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <TickGameLogic+0x624>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
			state = GLogicMenu;
		}
		break;
		
		default:
		state = GLogicStart;
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <TickGameLogic+0x624>
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	df 91       	pop	r29
			
			default:
			break;
	}
	return state;
}
    1f48:	cf 91       	pop	r28
    1f4a:	08 95       	ret

00001f4c <matrixToDisplay>:
    1f4c:	cf 92       	push	r12

void matrixToDisplay() {
    1f4e:	df 92       	push	r13
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	0f 2e       	mov	r0, r31
    1f5e:	f5 ed       	ldi	r31, 0xD5	; 213
    1f60:	ef 2e       	mov	r14, r31
    1f62:	f6 e0       	ldi	r31, 0x06	; 6
    1f64:	ff 2e       	mov	r15, r31
    1f66:	f0 2d       	mov	r31, r0
	for(unsigned char y = 0; y < 48;y++) {
    1f68:	d0 e0       	ldi	r29, 0x00	; 0
    1f6a:	10 c0       	rjmp	.+32     	; 0x1f8c <matrixToDisplay+0x40>
		for(unsigned char x = 0; x < 84; x++) {
			nokia_lcd_set_pixel(x,y, displayMatrix[y][x]);
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	41 91       	ld	r20, Z+
    1f70:	8f 01       	movw	r16, r30
    1f72:	6d 2f       	mov	r22, r29
    1f74:	8c 2f       	mov	r24, r28
    1f76:	0e 94 af 03 	call	0x75e	; 0x75e <nokia_lcd_set_pixel>
	return state;
}

void matrixToDisplay() {
	for(unsigned char y = 0; y < 48;y++) {
		for(unsigned char x = 0; x < 84; x++) {
    1f7a:	cf 5f       	subi	r28, 0xFF	; 255
    1f7c:	c4 35       	cpi	r28, 0x54	; 84
    1f7e:	b1 f7       	brne	.-20     	; 0x1f6c <matrixToDisplay+0x20>
	}
	return state;
}

void matrixToDisplay() {
	for(unsigned char y = 0; y < 48;y++) {
    1f80:	df 5f       	subi	r29, 0xFF	; 255
    1f82:	f4 e5       	ldi	r31, 0x54	; 84
    1f84:	ef 0e       	add	r14, r31
    1f86:	f1 1c       	adc	r15, r1
    1f88:	d0 33       	cpi	r29, 0x30	; 48
    1f8a:	19 f0       	breq	.+6      	; 0x1f92 <matrixToDisplay+0x46>
			break;
	}
	return state;
}

void matrixToDisplay() {
    1f8c:	87 01       	movw	r16, r14
    1f8e:	c0 e0       	ldi	r28, 0x00	; 0
    1f90:	ed cf       	rjmp	.-38     	; 0x1f6c <matrixToDisplay+0x20>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f92:	0f 2e       	mov	r0, r31
    1f94:	f7 e8       	ldi	r31, 0x87	; 135
    1f96:	ef 2e       	mov	r14, r31
    1f98:	f6 e0       	ldi	r31, 0x06	; 6
    1f9a:	ff 2e       	mov	r15, r31
    1f9c:	f0 2d       	mov	r31, r0
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1fa2:	08 e8       	ldi	r16, 0x88	; 136
    1fa4:	16 e0       	ldi	r17, 0x06	; 6
    1fa6:	c8 e2       	ldi	r28, 0x28	; 40
    1fa8:	f8 01       	movw	r30, r16
    1faa:	c0 83       	st	Z, r28
		for(unsigned char x = 0; x < 84; x++) {
			nokia_lcd_set_pixel(x,y, displayMatrix[y][x]);
		}
	}
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_char('S', 1);
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	83 e5       	ldi	r24, 0x53	; 83
    1fb0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1fb4:	8a e0       	ldi	r24, 0x0A	; 10
    1fb6:	f7 01       	movw	r30, r14
    1fb8:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1fba:	f8 01       	movw	r30, r16
    1fbc:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(10,40);
	nokia_lcd_write_char(displayScore[0], 1);
    1fbe:	0f 2e       	mov	r0, r31
    1fc0:	f2 e9       	ldi	r31, 0x92	; 146
    1fc2:	cf 2e       	mov	r12, r31
    1fc4:	f6 e0       	ldi	r31, 0x06	; 6
    1fc6:	df 2e       	mov	r13, r31
    1fc8:	f0 2d       	mov	r31, r0
    1fca:	61 e0       	ldi	r22, 0x01	; 1
    1fcc:	f6 01       	movw	r30, r12
    1fce:	80 81       	ld	r24, Z
    1fd0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1fd4:	8f e0       	ldi	r24, 0x0F	; 15
    1fd6:	f7 01       	movw	r30, r14
    1fd8:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1fda:	f8 01       	movw	r30, r16
    1fdc:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(15,40);
	nokia_lcd_write_char(displayScore[1], 1);
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	f6 01       	movw	r30, r12
    1fe2:	81 81       	ldd	r24, Z+1	; 0x01
    1fe4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1fe8:	84 e1       	ldi	r24, 0x14	; 20
    1fea:	f7 01       	movw	r30, r14
    1fec:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1fee:	f8 01       	movw	r30, r16
    1ff0:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(20,40);
	nokia_lcd_write_char(displayScore[2], 1);
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	f6 01       	movw	r30, r12
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1ffc:	8e e1       	ldi	r24, 0x1E	; 30
    1ffe:	f7 01       	movw	r30, r14
    2000:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2002:	f8 01       	movw	r30, r16
    2004:	c0 83       	st	Z, r28
	
	nokia_lcd_set_cursor(30,40);
	nokia_lcd_write_char('L', 1);
    2006:	61 e0       	ldi	r22, 0x01	; 1
    2008:	8c e4       	ldi	r24, 0x4C	; 76
    200a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    200e:	83 e2       	ldi	r24, 0x23	; 35
    2010:	f7 01       	movw	r30, r14
    2012:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2014:	f8 01       	movw	r30, r16
    2016:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(35,40);
	nokia_lcd_write_char(':', 1);
    2018:	61 e0       	ldi	r22, 0x01	; 1
    201a:	8a e3       	ldi	r24, 0x3A	; 58
    201c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2020:	f7 01       	movw	r30, r14
    2022:	c0 83       	st	Z, r28
	nokia_lcd.cursor_y = y;
    2024:	f8 01       	movw	r30, r16
    2026:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(40,40);
	nokia_lcd_write_char('0' + playerLives, 1);
    2028:	80 91 ab 16 	lds	r24, 0x16AB	; 0x8016ab <playerLives>
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	80 5d       	subi	r24, 0xD0	; 208
    2030:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2034:	87 e3       	ldi	r24, 0x37	; 55
    2036:	f7 01       	movw	r30, r14
    2038:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    203a:	f8 01       	movw	r30, r16
    203c:	c0 83       	st	Z, r28
	
	nokia_lcd_set_cursor(55,40);
	nokia_lcd_write_char('T', 1);
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	84 e5       	ldi	r24, 0x54	; 84
    2042:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2046:	81 e4       	ldi	r24, 0x41	; 65
    2048:	f7 01       	movw	r30, r14
    204a:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    204c:	f8 01       	movw	r30, r16
    204e:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(65,40);
	nokia_lcd_write_char(displayGameTimer[0], 1);
    2050:	0f 2e       	mov	r0, r31
    2052:	f6 ea       	ldi	r31, 0xA6	; 166
    2054:	cf 2e       	mov	r12, r31
    2056:	f6 e0       	ldi	r31, 0x06	; 6
    2058:	df 2e       	mov	r13, r31
    205a:	f0 2d       	mov	r31, r0
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	f6 01       	movw	r30, r12
    2060:	80 81       	ld	r24, Z
    2062:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2066:	86 e4       	ldi	r24, 0x46	; 70
    2068:	f7 01       	movw	r30, r14
    206a:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    206c:	f8 01       	movw	r30, r16
    206e:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(70,40);
	nokia_lcd_write_char(displayGameTimer[1], 1);
    2070:	61 e0       	ldi	r22, 0x01	; 1
    2072:	f6 01       	movw	r30, r12
    2074:	81 81       	ldd	r24, Z+1	; 0x01
    2076:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    207a:	8b e4       	ldi	r24, 0x4B	; 75
    207c:	f7 01       	movw	r30, r14
    207e:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2080:	f8 01       	movw	r30, r16
    2082:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(75,40);
	nokia_lcd_write_char(displayGameTimer[2], 1);
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	f6 01       	movw	r30, r12
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
}
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	08 95       	ret

000020a0 <menuDisplay>:
const char MENUMESSAGE1[] = "R:SAVE L:LOAD";
const char MENUMESSAGE2[] = "SEL: CLEAR";
const char MENUMESSAGE3[] = "B. Maze";
//const char RUMBLEMESSAGE1[] = "RUMBLING!";

void menuDisplay() {
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    20ae:	07 e8       	ldi	r16, 0x87	; 135
    20b0:	16 e0       	ldi	r17, 0x06	; 6
    20b2:	f8 01       	movw	r30, r16
    20b4:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    20b6:	c8 e8       	ldi	r28, 0x88	; 136
    20b8:	d6 e0       	ldi	r29, 0x06	; 6
    20ba:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_string(MENUMESSAGE3,2);
    20bc:	62 e0       	ldi	r22, 0x02	; 2
    20be:	80 e1       	ldi	r24, 0x10	; 16
    20c0:	94 e0       	ldi	r25, 0x04	; 4
    20c2:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    20c6:	f8 01       	movw	r30, r16
    20c8:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    20ca:	84 e1       	ldi	r24, 0x14	; 20
    20cc:	88 83       	st	Y, r24
	
	nokia_lcd_set_cursor(0,20);
	nokia_lcd_write_string(MENUMESSAGE1,1);
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	83 e2       	ldi	r24, 0x23	; 35
    20d2:	94 e0       	ldi	r25, 0x04	; 4
    20d4:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    20d8:	f8 01       	movw	r30, r16
    20da:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    20dc:	0f 2e       	mov	r0, r31
    20de:	fe e1       	ldi	r31, 0x1E	; 30
    20e0:	df 2e       	mov	r13, r31
    20e2:	f0 2d       	mov	r31, r0
    20e4:	d8 82       	st	Y, r13
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(MENUMESSAGE2,1);
    20e6:	61 e0       	ldi	r22, 0x01	; 1
    20e8:	88 e1       	ldi	r24, 0x18	; 24
    20ea:	94 e0       	ldi	r25, 0x04	; 4
    20ec:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    20f0:	f8 01       	movw	r30, r16
    20f2:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    20f4:	0f 2e       	mov	r0, r31
    20f6:	f8 e2       	ldi	r31, 0x28	; 40
    20f8:	ff 2e       	mov	r15, r31
    20fa:	f0 2d       	mov	r31, r0
    20fc:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_char('H', 1);
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	88 e4       	ldi	r24, 0x48	; 72
    2102:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2106:	85 e0       	ldi	r24, 0x05	; 5
    2108:	f8 01       	movw	r30, r16
    210a:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    210c:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(5,40);
	nokia_lcd_write_char('i', 1);
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	89 e6       	ldi	r24, 0x69	; 105
    2112:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2116:	8a e0       	ldi	r24, 0x0A	; 10
    2118:	f8 01       	movw	r30, r16
    211a:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    211c:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(10,40);
	nokia_lcd_write_char('g', 1);
    211e:	61 e0       	ldi	r22, 0x01	; 1
    2120:	87 e6       	ldi	r24, 0x67	; 103
    2122:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2126:	8f e0       	ldi	r24, 0x0F	; 15
    2128:	f8 01       	movw	r30, r16
    212a:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    212c:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(15,40);
	nokia_lcd_write_char('h', 1);
    212e:	61 e0       	ldi	r22, 0x01	; 1
    2130:	88 e6       	ldi	r24, 0x68	; 104
    2132:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2136:	89 e1       	ldi	r24, 0x19	; 25
    2138:	f8 01       	movw	r30, r16
    213a:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    213c:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(25,40);
	nokia_lcd_write_char('S', 1);
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	83 e5       	ldi	r24, 0x53	; 83
    2142:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2146:	f8 01       	movw	r30, r16
    2148:	d0 82       	st	Z, r13
	nokia_lcd.cursor_y = y;
    214a:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(30,40);
	nokia_lcd_write_char('c', 1);
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	83 e6       	ldi	r24, 0x63	; 99
    2150:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2154:	83 e2       	ldi	r24, 0x23	; 35
    2156:	f8 01       	movw	r30, r16
    2158:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    215a:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(35,40);
	nokia_lcd_write_char('o', 1);
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	8f e6       	ldi	r24, 0x6F	; 111
    2160:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2164:	f8 01       	movw	r30, r16
    2166:	f0 82       	st	Z, r15
	nokia_lcd.cursor_y = y;
    2168:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,40);
	nokia_lcd_write_char('r', 1);
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	82 e7       	ldi	r24, 0x72	; 114
    216e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2172:	8d e2       	ldi	r24, 0x2D	; 45
    2174:	f8 01       	movw	r30, r16
    2176:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2178:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,40);
	nokia_lcd_write_char('e', 1);
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	85 e6       	ldi	r24, 0x65	; 101
    217e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2182:	82 e3       	ldi	r24, 0x32	; 50
    2184:	f8 01       	movw	r30, r16
    2186:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2188:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,40);
	nokia_lcd_write_char(':', 1);
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	8a e3       	ldi	r24, 0x3A	; 58
    218e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2192:	8c e3       	ldi	r24, 0x3C	; 60
    2194:	f8 01       	movw	r30, r16
    2196:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2198:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(60,40);
	nokia_lcd_write_char(displayScore[0], 1);
    219a:	0f 2e       	mov	r0, r31
    219c:	f2 e9       	ldi	r31, 0x92	; 146
    219e:	cf 2e       	mov	r12, r31
    21a0:	f6 e0       	ldi	r31, 0x06	; 6
    21a2:	df 2e       	mov	r13, r31
    21a4:	f0 2d       	mov	r31, r0
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	f6 01       	movw	r30, r12
    21aa:	80 81       	ld	r24, Z
    21ac:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    21b0:	81 e4       	ldi	r24, 0x41	; 65
    21b2:	f8 01       	movw	r30, r16
    21b4:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    21b6:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(65,40);
	nokia_lcd_write_char(displayScore[1], 1);
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	f6 01       	movw	r30, r12
    21bc:	81 81       	ldd	r24, Z+1	; 0x01
    21be:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    21c2:	86 e4       	ldi	r24, 0x46	; 70
    21c4:	f8 01       	movw	r30, r16
    21c6:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    21c8:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(70,40);
	nokia_lcd_write_char(displayScore[2], 1);
    21ca:	61 e0       	ldi	r22, 0x01	; 1
    21cc:	f6 01       	movw	r30, r12
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
}
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	df 90       	pop	r13
    21e0:	cf 90       	pop	r12
    21e2:	08 95       	ret

000021e4 <levelBeatDisplay>:

const char LEVELMESSAGE1[] = "Level";
const char LEVELMESSAGE2[] = "Completed";
const char LEVELMESSAGE3[] = "Press Start";

void levelBeatDisplay() {
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    21ee:	07 e8       	ldi	r16, 0x87	; 135
    21f0:	16 e0       	ldi	r17, 0x06	; 6
    21f2:	f8 01       	movw	r30, r16
    21f4:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    21f6:	c8 e8       	ldi	r28, 0x88	; 136
    21f8:	d6 e0       	ldi	r29, 0x06	; 6
    21fa:	0f 2e       	mov	r0, r31
    21fc:	fa e0       	ldi	r31, 0x0A	; 10
    21fe:	ff 2e       	mov	r15, r31
    2200:	f0 2d       	mov	r31, r0
    2202:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,10);
	nokia_lcd_write_string(LEVELMESSAGE1,2);
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	8a e0       	ldi	r24, 0x0A	; 10
    2208:	94 e0       	ldi	r25, 0x04	; 4
    220a:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    220e:	86 e4       	ldi	r24, 0x46	; 70
    2210:	f8 01       	movw	r30, r16
    2212:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2214:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(70,10);
	nokia_lcd_write_char('0'+levelCount, 2);
    2216:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <levelCount>
    221a:	62 e0       	ldi	r22, 0x02	; 2
    221c:	80 5d       	subi	r24, 0xD0	; 208
    221e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2222:	f8 01       	movw	r30, r16
    2224:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    2226:	8e e1       	ldi	r24, 0x1E	; 30
    2228:	88 83       	st	Y, r24
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(LEVELMESSAGE2,1);
    222a:	61 e0       	ldi	r22, 0x01	; 1
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	94 e0       	ldi	r25, 0x04	; 4
    2230:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2234:	f8 01       	movw	r30, r16
    2236:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    2238:	88 e2       	ldi	r24, 0x28	; 40
    223a:	88 83       	st	Y, r24
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(LEVELMESSAGE3,1);
    223c:	61 e0       	ldi	r22, 0x01	; 1
    223e:	84 ef       	ldi	r24, 0xF4	; 244
    2240:	93 e0       	ldi	r25, 0x03	; 3
    2242:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
}
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	ff 90       	pop	r15
    2250:	08 95       	ret

00002252 <gameOverDisplay>:

const char GAMEOVERMESSAGE1[] = "GameOver";
const char GAMEOVERMESSAGE2[] = "Score:";
const char GAMEOVERMESSAGE3[] = "Press Start";
void gameOverDisplay() {
    2252:	cf 92       	push	r12
    2254:	df 92       	push	r13
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2262:	07 e8       	ldi	r16, 0x87	; 135
    2264:	16 e0       	ldi	r17, 0x06	; 6
    2266:	f8 01       	movw	r30, r16
    2268:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    226a:	c8 e8       	ldi	r28, 0x88	; 136
    226c:	d6 e0       	ldi	r29, 0x06	; 6
    226e:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_string(GAMEOVERMESSAGE1,2);
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	8b ee       	ldi	r24, 0xEB	; 235
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    227a:	f8 01       	movw	r30, r16
    227c:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    227e:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_char('G', 2);
    2280:	62 e0       	ldi	r22, 0x02	; 2
    2282:	87 e4       	ldi	r24, 0x47	; 71
    2284:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2288:	f8 01       	movw	r30, r16
    228a:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    228c:	0f 2e       	mov	r0, r31
    228e:	fe e1       	ldi	r31, 0x1E	; 30
    2290:	ff 2e       	mov	r15, r31
    2292:	f0 2d       	mov	r31, r0
    2294:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(GAMEOVERMESSAGE2,1);
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	84 ee       	ldi	r24, 0xE4	; 228
    229a:	93 e0       	ldi	r25, 0x03	; 3
    229c:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    22a0:	0f 2e       	mov	r0, r31
    22a2:	f8 e2       	ldi	r31, 0x28	; 40
    22a4:	ef 2e       	mov	r14, r31
    22a6:	f0 2d       	mov	r31, r0
    22a8:	f8 01       	movw	r30, r16
    22aa:	e0 82       	st	Z, r14
	nokia_lcd.cursor_y = y;
    22ac:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,30);
	nokia_lcd_write_char(displayScore[0], 1);
    22ae:	0f 2e       	mov	r0, r31
    22b0:	f2 e9       	ldi	r31, 0x92	; 146
    22b2:	cf 2e       	mov	r12, r31
    22b4:	f6 e0       	ldi	r31, 0x06	; 6
    22b6:	df 2e       	mov	r13, r31
    22b8:	f0 2d       	mov	r31, r0
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	f6 01       	movw	r30, r12
    22be:	80 81       	ld	r24, Z
    22c0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    22c4:	8d e2       	ldi	r24, 0x2D	; 45
    22c6:	f8 01       	movw	r30, r16
    22c8:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    22ca:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,30);
	nokia_lcd_write_char(displayScore[1], 1);
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	f6 01       	movw	r30, r12
    22d0:	81 81       	ldd	r24, Z+1	; 0x01
    22d2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    22d6:	82 e3       	ldi	r24, 0x32	; 50
    22d8:	f8 01       	movw	r30, r16
    22da:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    22dc:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,30);
	nokia_lcd_write_char(displayScore[2], 1);
    22de:	61 e0       	ldi	r22, 0x01	; 1
    22e0:	f6 01       	movw	r30, r12
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    22e8:	f8 01       	movw	r30, r16
    22ea:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    22ec:	e8 82       	st	Y, r14
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(GAMEOVERMESSAGE3,1);
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	88 ed       	ldi	r24, 0xD8	; 216
    22f2:	93 e0       	ldi	r25, 0x03	; 3
    22f4:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
}
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	ff 90       	pop	r15
    2302:	ef 90       	pop	r14
    2304:	df 90       	pop	r13
    2306:	cf 90       	pop	r12
    2308:	08 95       	ret

0000230a <winDisplay>:

const char WINMESSAGE1[] = "YOU WIN";
void winDisplay() {
    230a:	cf 92       	push	r12
    230c:	df 92       	push	r13
    230e:	ef 92       	push	r14
    2310:	ff 92       	push	r15
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    231a:	07 e8       	ldi	r16, 0x87	; 135
    231c:	16 e0       	ldi	r17, 0x06	; 6
    231e:	f8 01       	movw	r30, r16
    2320:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    2322:	c8 e8       	ldi	r28, 0x88	; 136
    2324:	d6 e0       	ldi	r29, 0x06	; 6
    2326:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_string(WINMESSAGE1,2);
    2328:	62 e0       	ldi	r22, 0x02	; 2
    232a:	80 ed       	ldi	r24, 0xD0	; 208
    232c:	93 e0       	ldi	r25, 0x03	; 3
    232e:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2332:	f8 01       	movw	r30, r16
    2334:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    2336:	0f 2e       	mov	r0, r31
    2338:	fe e1       	ldi	r31, 0x1E	; 30
    233a:	ff 2e       	mov	r15, r31
    233c:	f0 2d       	mov	r31, r0
    233e:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(GAMEOVERMESSAGE2,1);
    2340:	61 e0       	ldi	r22, 0x01	; 1
    2342:	84 ee       	ldi	r24, 0xE4	; 228
    2344:	93 e0       	ldi	r25, 0x03	; 3
    2346:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    234a:	0f 2e       	mov	r0, r31
    234c:	f8 e2       	ldi	r31, 0x28	; 40
    234e:	ef 2e       	mov	r14, r31
    2350:	f0 2d       	mov	r31, r0
    2352:	f8 01       	movw	r30, r16
    2354:	e0 82       	st	Z, r14
	nokia_lcd.cursor_y = y;
    2356:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,30);
	nokia_lcd_write_char(displayScore[0], 1);
    2358:	0f 2e       	mov	r0, r31
    235a:	f2 e9       	ldi	r31, 0x92	; 146
    235c:	cf 2e       	mov	r12, r31
    235e:	f6 e0       	ldi	r31, 0x06	; 6
    2360:	df 2e       	mov	r13, r31
    2362:	f0 2d       	mov	r31, r0
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	f6 01       	movw	r30, r12
    2368:	80 81       	ld	r24, Z
    236a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    236e:	8d e2       	ldi	r24, 0x2D	; 45
    2370:	f8 01       	movw	r30, r16
    2372:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2374:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,30);
	nokia_lcd_write_char(displayScore[1], 1);
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	f6 01       	movw	r30, r12
    237a:	81 81       	ldd	r24, Z+1	; 0x01
    237c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2380:	82 e3       	ldi	r24, 0x32	; 50
    2382:	f8 01       	movw	r30, r16
    2384:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2386:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,30);
	nokia_lcd_write_char(displayScore[2], 1);
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	f6 01       	movw	r30, r12
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2392:	f8 01       	movw	r30, r16
    2394:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    2396:	e8 82       	st	Y, r14
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(GAMEOVERMESSAGE3,1);
    2398:	61 e0       	ldi	r22, 0x01	; 1
    239a:	88 ed       	ldi	r24, 0xD8	; 216
    239c:	93 e0       	ldi	r25, 0x03	; 3
    239e:	0e 94 86 04 	call	0x90c	; 0x90c <nokia_lcd_write_string>
}
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	08 95       	ret

000023b4 <TickLCDDisplay>:
enum LCDDisplayState{LCDDisplayStart, LCDDisplayInit,LCDDisplayMenu, LCDDisplayRunning, LCDDisplayGameOver,LCDDisplayNextLevel, LCDDisplayWin};
	
unsigned char TickLCDDisplay (unsigned char state) {
	switch(state) {
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	87 30       	cpi	r24, 0x07	; 7
    23b8:	91 05       	cpc	r25, r1
    23ba:	20 f4       	brcc	.+8      	; 0x23c4 <TickLCDDisplay+0x10>
    23bc:	fc 01       	movw	r30, r24
    23be:	e8 59       	subi	r30, 0x98	; 152
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	03 c4       	rjmp	.+2054   	; 0x2bca <__tablejump2__>
			state = LCDDisplayMenu;
		}
		break;
		
		default:
		state = LCDDisplayStart;
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	08 95       	ret
		case LCDDisplayInit:
		state = LCDDisplayMenu;
		break;
		
		case LCDDisplayMenu:
		if(currentGameState == GLogicPlaying) {
    23c8:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    23cc:	84 30       	cpi	r24, 0x04	; 4
    23ce:	d1 f4       	brne	.+52     	; 0x2404 <TickLCDDisplay+0x50>
    23d0:	2e c0       	rjmp	.+92     	; 0x242e <TickLCDDisplay+0x7a>
			state = LCDDisplayRunning;
		}
		break;
		
		case LCDDisplayRunning:
		if(currentGameState == GLogicMenu) {
    23d2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    23d6:	82 30       	cpi	r24, 0x02	; 2
    23d8:	a9 f0       	breq	.+42     	; 0x2404 <TickLCDDisplay+0x50>
			state = LCDDisplayMenu;
		}
		else if(currentGameState == GLogicGameOver) {
    23da:	85 30       	cpi	r24, 0x05	; 5
    23dc:	d1 f0       	breq	.+52     	; 0x2412 <TickLCDDisplay+0x5e>
			state = LCDDisplayGameOver;
		}
		else if(currentGameState == GLogicLevelComplete) {
    23de:	86 30       	cpi	r24, 0x06	; 6
    23e0:	69 f1       	breq	.+90     	; 0x243c <TickLCDDisplay+0x88>
			state = LCDDisplayNextLevel;
		}
		else if(currentGameState == GLogicWin) {
    23e2:	89 30       	cpi	r24, 0x09	; 9
    23e4:	21 f5       	brne	.+72     	; 0x242e <TickLCDDisplay+0x7a>
    23e6:	1c c0       	rjmp	.+56     	; 0x2420 <TickLCDDisplay+0x6c>
			state = LCDDisplayWin;
		}
		break;
		
		case LCDDisplayWin:
		if(currentGameState == GLogicMenu) {
    23e8:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	c1 f4       	brne	.+48     	; 0x2420 <TickLCDDisplay+0x6c>
    23f0:	09 c0       	rjmp	.+18     	; 0x2404 <TickLCDDisplay+0x50>
			state = LCDDisplayMenu;
		}
		break;
		
		case LCDDisplayNextLevel:
		if(currentGameState == GLogicPlaying){
    23f2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    23f6:	84 30       	cpi	r24, 0x04	; 4
    23f8:	09 f5       	brne	.+66     	; 0x243c <TickLCDDisplay+0x88>
    23fa:	19 c0       	rjmp	.+50     	; 0x242e <TickLCDDisplay+0x7a>
			state = LCDDisplayRunning;
		}
		break;
		
		case LCDDisplayGameOver:
		if(currentGameState == GLogicMenu) {
    23fc:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    2400:	82 30       	cpi	r24, 0x02	; 2
    2402:	39 f4       	brne	.+14     	; 0x2412 <TickLCDDisplay+0x5e>
	switch(state) {
		case LCDDisplayInit:
		break;
		
		case LCDDisplayMenu:
		nokia_lcd_clear();
    2404:	0e 94 9e 03 	call	0x73c	; 0x73c <nokia_lcd_clear>
		menuDisplay();
    2408:	4b de       	rcall	.-874    	; 0x20a0 <menuDisplay>
		nokia_lcd_render();
    240a:	0e 94 98 04 	call	0x930	; 0x930 <nokia_lcd_render>
		break;
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	08 95       	ret
		
		case LCDDisplayGameOver:
		nokia_lcd_clear();
    2412:	0e 94 9e 03 	call	0x73c	; 0x73c <nokia_lcd_clear>
		gameOverDisplay();
    2416:	1d df       	rcall	.-454    	; 0x2252 <gameOverDisplay>
		nokia_lcd_render();
    2418:	0e 94 98 04 	call	0x930	; 0x930 <nokia_lcd_render>
		break;
    241c:	84 e0       	ldi	r24, 0x04	; 4
		
		case LCDDisplayWin:
		nokia_lcd_clear();
    241e:	08 95       	ret
    2420:	0e 94 9e 03 	call	0x73c	; 0x73c <nokia_lcd_clear>
		winDisplay();
    2424:	72 df       	rcall	.-284    	; 0x230a <winDisplay>
		nokia_lcd_render();
    2426:	0e 94 98 04 	call	0x930	; 0x930 <nokia_lcd_render>
		break;
    242a:	86 e0       	ldi	r24, 0x06	; 6
		
		case LCDDisplayRunning:
		nokia_lcd_clear();
    242c:	08 95       	ret
    242e:	0e 94 9e 03 	call	0x73c	; 0x73c <nokia_lcd_clear>
		matrixToDisplay();
    2432:	8c dd       	rcall	.-1256   	; 0x1f4c <matrixToDisplay>
		nokia_lcd_render();
    2434:	0e 94 98 04 	call	0x930	; 0x930 <nokia_lcd_render>
		break;
    2438:	83 e0       	ldi	r24, 0x03	; 3
		
		case LCDDisplayNextLevel:
		nokia_lcd_clear();
    243a:	08 95       	ret
    243c:	0e 94 9e 03 	call	0x73c	; 0x73c <nokia_lcd_clear>
		levelBeatDisplay();
    2440:	d1 de       	rcall	.-606    	; 0x21e4 <levelBeatDisplay>
		nokia_lcd_render();
    2442:	0e 94 98 04 	call	0x930	; 0x930 <nokia_lcd_render>
		break;
    2446:	85 e0       	ldi	r24, 0x05	; 5
    2448:	08 95       	ret
enum LCDDisplayState{LCDDisplayStart, LCDDisplayInit,LCDDisplayMenu, LCDDisplayRunning, LCDDisplayGameOver,LCDDisplayNextLevel, LCDDisplayWin};
	
unsigned char TickLCDDisplay (unsigned char state) {
	switch(state) {
		case LCDDisplayStart:
		state = LCDDisplayInit;
    244a:	81 e0       	ldi	r24, 0x01	; 1
		
		default:
		break;
	}
	return state;
}
    244c:	08 95       	ret

0000244e <main>:

// --------END User defined FSMs-----------------------------------------------


// Implement scheduler code from PES.
int main(){
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	2c 97       	sbiw	r28, 0x0c	; 12
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0x03; PORTA = 0xFC;
    2462:	83 e0       	ldi	r24, 0x03	; 3
    2464:	81 b9       	out	0x01, r24	; 1
    2466:	8c ef       	ldi	r24, 0xFC	; 252
    2468:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
    246a:	8f ef       	ldi	r24, 0xFF	; 255
    246c:	87 b9       	out	0x07, r24	; 7
    246e:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
    2470:	84 b9       	out	0x04, r24	; 4
    2472:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
    2474:	8a b9       	out	0x0a, r24	; 10
    2476:	1b b8       	out	0x0b, r1	; 11
	
	nokia_lcd_init();
    2478:	0e 94 65 03 	call	0x6ca	; 0x6ca <nokia_lcd_init>
	nokia_lcd_clear();
    247c:	0e 94 9e 03 	call	0x73c	; 0x73c <nokia_lcd_clear>
	nokia_lcd_render();
    2480:	0e 94 98 04 	call	0x930	; 0x930 <nokia_lcd_render>
	
	PWM_on();
    2484:	0e 94 5d 06 	call	0xcba	; 0xcba <PWM_on>
    2488:	0f 2e       	mov	r0, r31
    248a:	fa e0       	ldi	r31, 0x0A	; 10
    248c:	ef 2e       	mov	r14, r31
    248e:	f0 2d       	mov	r31, r0
    2490:	f1 2c       	mov	r15, r1
    2492:	00 e0       	ldi	r16, 0x00	; 0
    2494:	10 e0       	ldi	r17, 0x00	; 0
    2496:	51 e0       	ldi	r21, 0x01	; 1
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <main+0x5a>
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
        a = b;
		b = c;
    24a0:	e6 2e       	mov	r14, r22
    24a2:	f7 2e       	mov	r15, r23
    24a4:	08 2f       	mov	r16, r24
    24a6:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
    24a8:	65 2f       	mov	r22, r21
    24aa:	74 2f       	mov	r23, r20
    24ac:	83 2f       	mov	r24, r19
    24ae:	92 2f       	mov	r25, r18
    24b0:	2e 2d       	mov	r18, r14
    24b2:	3f 2d       	mov	r19, r15
    24b4:	40 2f       	mov	r20, r16
    24b6:	51 2f       	mov	r21, r17
    24b8:	66 d3       	rcall	.+1740   	; 0x2b86 <__udivmodsi4>
    24ba:	5e 2d       	mov	r21, r14
    24bc:	4f 2d       	mov	r20, r15
    24be:	30 2f       	mov	r19, r16
    24c0:	21 2f       	mov	r18, r17
        if(c==0){return b;}
    24c2:	61 15       	cp	r22, r1
    24c4:	71 05       	cpc	r23, r1
    24c6:	81 05       	cpc	r24, r1
    24c8:	91 05       	cpc	r25, r1
    24ca:	51 f7       	brne	.-44     	; 0x24a0 <main+0x52>
    24cc:	5a e0       	ldi	r21, 0x0A	; 10
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <main+0x90>
        a = b;
		b = c;
    24d6:	e6 2e       	mov	r14, r22
    24d8:	f7 2e       	mov	r15, r23
    24da:	08 2f       	mov	r16, r24
    24dc:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
    24de:	65 2f       	mov	r22, r21
    24e0:	74 2f       	mov	r23, r20
    24e2:	83 2f       	mov	r24, r19
    24e4:	92 2f       	mov	r25, r18
    24e6:	2e 2d       	mov	r18, r14
    24e8:	3f 2d       	mov	r19, r15
    24ea:	40 2f       	mov	r20, r16
    24ec:	51 2f       	mov	r21, r17
    24ee:	4b d3       	rcall	.+1686   	; 0x2b86 <__udivmodsi4>
    24f0:	5e 2d       	mov	r21, r14
    24f2:	4f 2d       	mov	r20, r15
    24f4:	30 2f       	mov	r19, r16
    24f6:	21 2f       	mov	r18, r17
        if(c==0){return b;}
    24f8:	61 15       	cp	r22, r1
    24fa:	71 05       	cpc	r23, r1
    24fc:	81 05       	cpc	r24, r1
    24fe:	91 05       	cpc	r25, r1
    2500:	51 f7       	brne	.-44     	; 0x24d6 <main+0x88>
    2502:	5a e0       	ldi	r21, 0x0A	; 10
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	04 c0       	rjmp	.+8      	; 0x2514 <main+0xc6>
        a = b;
		b = c;
    250c:	e6 2e       	mov	r14, r22
    250e:	f7 2e       	mov	r15, r23
    2510:	08 2f       	mov	r16, r24
    2512:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
    2514:	65 2f       	mov	r22, r21
    2516:	74 2f       	mov	r23, r20
    2518:	83 2f       	mov	r24, r19
    251a:	92 2f       	mov	r25, r18
    251c:	2e 2d       	mov	r18, r14
    251e:	3f 2d       	mov	r19, r15
    2520:	40 2f       	mov	r20, r16
    2522:	51 2f       	mov	r21, r17
    2524:	30 d3       	rcall	.+1632   	; 0x2b86 <__udivmodsi4>
    2526:	5e 2d       	mov	r21, r14
    2528:	4f 2d       	mov	r20, r15
    252a:	30 2f       	mov	r19, r16
    252c:	21 2f       	mov	r18, r17
        if(c==0){return b;}
    252e:	61 15       	cp	r22, r1
    2530:	71 05       	cpc	r23, r1
    2532:	81 05       	cpc	r24, r1
    2534:	91 05       	cpc	r25, r1
    2536:	51 f7       	brne	.-44     	; 0x250c <main+0xbe>
    2538:	54 e1       	ldi	r21, 0x14	; 20
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	04 c0       	rjmp	.+8      	; 0x254a <main+0xfc>
        a = b;
		b = c;
    2542:	e6 2e       	mov	r14, r22
    2544:	f7 2e       	mov	r15, r23
    2546:	08 2f       	mov	r16, r24
    2548:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
    254a:	65 2f       	mov	r22, r21
    254c:	74 2f       	mov	r23, r20
    254e:	83 2f       	mov	r24, r19
    2550:	92 2f       	mov	r25, r18
    2552:	2e 2d       	mov	r18, r14
    2554:	3f 2d       	mov	r19, r15
    2556:	40 2f       	mov	r20, r16
    2558:	51 2f       	mov	r21, r17
    255a:	15 d3       	rcall	.+1578   	; 0x2b86 <__udivmodsi4>
    255c:	5e 2d       	mov	r21, r14
    255e:	4f 2d       	mov	r20, r15
    2560:	30 2f       	mov	r19, r16
    2562:	21 2f       	mov	r18, r17
        if(c==0){return b;}
    2564:	61 15       	cp	r22, r1
    2566:	71 05       	cpc	r23, r1
    2568:	81 05       	cpc	r24, r1
    256a:	91 05       	cpc	r25, r1
    256c:	51 f7       	brne	.-44     	; 0x2542 <main+0xf4>
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	//unsigned long int SMTickSNES_period = SMTickSNES_calc/GCD;
	unsigned long int SMTickLCD_period = SMTickLCD_calc/GCD;
    256e:	0f 2e       	mov	r0, r31
    2570:	fa e0       	ldi	r31, 0x0A	; 10
    2572:	4f 2e       	mov	r4, r31
    2574:	51 2c       	mov	r5, r1
    2576:	61 2c       	mov	r6, r1
    2578:	71 2c       	mov	r7, r1
    257a:	f0 2d       	mov	r31, r0
    257c:	c3 01       	movw	r24, r6
    257e:	b2 01       	movw	r22, r4
    2580:	2e 2d       	mov	r18, r14
    2582:	3f 2d       	mov	r19, r15
    2584:	40 2f       	mov	r20, r16
    2586:	51 2f       	mov	r21, r17
    2588:	fe d2       	rcall	.+1532   	; 0x2b86 <__udivmodsi4>
    258a:	49 01       	movw	r8, r18
    258c:	5a 01       	movw	r10, r20
	unsigned long int SMTickLogic_period = SMTickLogic_calc/GCD;
	unsigned long int SMTickSNES_period = SMTickSNES_calc/GCD;
    258e:	61 e0       	ldi	r22, 0x01	; 1
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	2e 2d       	mov	r18, r14
    2598:	3f 2d       	mov	r19, r15
    259a:	40 2f       	mov	r20, r16
    259c:	51 2f       	mov	r21, r17
    259e:	f3 d2       	rcall	.+1510   	; 0x2b86 <__udivmodsi4>
	unsigned long int SMTickPWMMotorManager_period = SMTickPWMMotorManager_calc/GCD;
	unsigned long int SMTickSound_period = SMTickSound_calc/GCD;
	
	//Declare an array of tasks 
	static task task1, task2, task3, task4, task5, task6;
	task *tasks[] = {&task1, &task2, &task3, &task4, &task5, &task6};
    25a0:	8c e0       	ldi	r24, 0x0C	; 12
    25a2:	e4 ec       	ldi	r30, 0xC4	; 196
    25a4:	f3 e0       	ldi	r31, 0x03	; 3
    25a6:	de 01       	movw	r26, r28
    25a8:	11 96       	adiw	r26, 0x01	; 1
    25aa:	01 90       	ld	r0, Z+
    25ac:	0d 92       	st	X+, r0
    25ae:	8a 95       	dec	r24
    25b0:	e1 f7       	brne	.-8      	; 0x25aa <main+0x15c>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
    25b2:	e9 e6       	ldi	r30, 0x69	; 105
    25b4:	f4 e0       	ldi	r31, 0x04	; 4
    25b6:	dd 24       	eor	r13, r13
    25b8:	da 94       	dec	r13
    25ba:	d0 82       	st	Z, r13
	task1.period = SMTickSNES_period;//Task Period.
    25bc:	21 83       	std	Z+1, r18	; 0x01
    25be:	32 83       	std	Z+2, r19	; 0x02
    25c0:	43 83       	std	Z+3, r20	; 0x03
    25c2:	54 83       	std	Z+4, r21	; 0x04
	task1.elapsedTime = SMTickSNES_period;//Task current elapsed time.
    25c4:	25 83       	std	Z+5, r18	; 0x05
    25c6:	36 83       	std	Z+6, r19	; 0x06
    25c8:	47 83       	std	Z+7, r20	; 0x07
    25ca:	50 87       	std	Z+8, r21	; 0x08
	task1.TickFct = &TickSNESControl;//Function pointer for the tick.
    25cc:	80 ea       	ldi	r24, 0xA0	; 160
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	92 87       	std	Z+10, r25	; 0x0a
    25d2:	81 87       	std	Z+9, r24	; 0x09
	
	task2.state = -1;//Task initial state.
    25d4:	ee e5       	ldi	r30, 0x5E	; 94
    25d6:	f4 e0       	ldi	r31, 0x04	; 4
    25d8:	d0 82       	st	Z, r13
	task2.period = SMTickLCD_calc;//Task Period.
    25da:	41 82       	std	Z+1, r4	; 0x01
    25dc:	52 82       	std	Z+2, r5	; 0x02
    25de:	63 82       	std	Z+3, r6	; 0x03
    25e0:	74 82       	std	Z+4, r7	; 0x04
	task2.elapsedTime = SMTickLCD_period;//Task current elapsed time.
    25e2:	85 82       	std	Z+5, r8	; 0x05
    25e4:	96 82       	std	Z+6, r9	; 0x06
    25e6:	a7 82       	std	Z+7, r10	; 0x07
    25e8:	b0 86       	std	Z+8, r11	; 0x08
	task2.TickFct = &TickLCDDisplay;//Function pointer for the tick.
    25ea:	8a ed       	ldi	r24, 0xDA	; 218
    25ec:	91 e1       	ldi	r25, 0x11	; 17
    25ee:	92 87       	std	Z+10, r25	; 0x0a
    25f0:	81 87       	std	Z+9, r24	; 0x09
	
	task3.state = -1;//Task initial state.
    25f2:	0f 2e       	mov	r0, r31
    25f4:	f3 e5       	ldi	r31, 0x53	; 83
    25f6:	2f 2e       	mov	r2, r31
    25f8:	f4 e0       	ldi	r31, 0x04	; 4
    25fa:	3f 2e       	mov	r3, r31
    25fc:	f0 2d       	mov	r31, r0
    25fe:	d1 01       	movw	r26, r2
    2600:	dc 92       	st	X, r13
	task3.period = SMTickLogic_calc;//Task Period.
    2602:	68 e2       	ldi	r22, 0x28	; 40
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	f1 01       	movw	r30, r2
    260c:	61 83       	std	Z+1, r22	; 0x01
    260e:	72 83       	std	Z+2, r23	; 0x02
    2610:	83 83       	std	Z+3, r24	; 0x03
	task3.elapsedTime = SMTickLogic_period;//Task current elapsed time.
    2612:	94 83       	std	Z+4, r25	; 0x04
    2614:	2e 2d       	mov	r18, r14
    2616:	3f 2d       	mov	r19, r15
    2618:	40 2f       	mov	r20, r16
    261a:	51 2f       	mov	r21, r17
    261c:	b4 d2       	rcall	.+1384   	; 0x2b86 <__udivmodsi4>
    261e:	d1 01       	movw	r26, r2
    2620:	15 96       	adiw	r26, 0x05	; 5
    2622:	2d 93       	st	X+, r18
    2624:	3d 93       	st	X+, r19
    2626:	4d 93       	st	X+, r20
    2628:	5c 93       	st	X, r21
    262a:	18 97       	sbiw	r26, 0x08	; 8
	task3.TickFct = &TickGameLogic;//Function pointer for the tick.
    262c:	81 e9       	ldi	r24, 0x91	; 145
    262e:	9c e0       	ldi	r25, 0x0C	; 12
    2630:	1a 96       	adiw	r26, 0x0a	; 10
    2632:	9c 93       	st	X, r25
    2634:	8e 93       	st	-X, r24
    2636:	19 97       	sbiw	r26, 0x09	; 9
	
	task4.state = -1;
    2638:	e8 e4       	ldi	r30, 0x48	; 72
    263a:	f4 e0       	ldi	r31, 0x04	; 4
    263c:	d0 82       	st	Z, r13
	task4.period = SMTickPWMMotor_calc;
    263e:	41 82       	std	Z+1, r4	; 0x01
    2640:	52 82       	std	Z+2, r5	; 0x02
    2642:	63 82       	std	Z+3, r6	; 0x03
    2644:	74 82       	std	Z+4, r7	; 0x04
	task4.elapsedTime = SMTickPWMMotor_period;
    2646:	85 82       	std	Z+5, r8	; 0x05
    2648:	96 82       	std	Z+6, r9	; 0x06
    264a:	a7 82       	std	Z+7, r10	; 0x07
    264c:	b0 86       	std	Z+8, r11	; 0x08
	task4.TickFct = &TickPWMMotor;
    264e:	8f e2       	ldi	r24, 0x2F	; 47
    2650:	92 e0       	ldi	r25, 0x02	; 2
    2652:	92 87       	std	Z+10, r25	; 0x0a
    2654:	81 87       	std	Z+9, r24	; 0x09
	
	task5.state = -1;
    2656:	ed e3       	ldi	r30, 0x3D	; 61
    2658:	f4 e0       	ldi	r31, 0x04	; 4
    265a:	d0 82       	st	Z, r13
	task5.period = SMTickPWMMotorManager_calc;
    265c:	41 82       	std	Z+1, r4	; 0x01
    265e:	52 82       	std	Z+2, r5	; 0x02
    2660:	63 82       	std	Z+3, r6	; 0x03
    2662:	74 82       	std	Z+4, r7	; 0x04
	task5.elapsedTime = SMTickPWMMotorManager_period;
    2664:	85 82       	std	Z+5, r8	; 0x05
    2666:	96 82       	std	Z+6, r9	; 0x06
    2668:	a7 82       	std	Z+7, r10	; 0x07
    266a:	b0 86       	std	Z+8, r11	; 0x08
	task5.TickFct = &TickPWMMotorManager;
    266c:	8d e8       	ldi	r24, 0x8D	; 141
    266e:	92 e0       	ldi	r25, 0x02	; 2
    2670:	92 87       	std	Z+10, r25	; 0x0a
    2672:	81 87       	std	Z+9, r24	; 0x09
	
	task6.state = -1;
    2674:	0f 2e       	mov	r0, r31
    2676:	f2 e3       	ldi	r31, 0x32	; 50
    2678:	af 2e       	mov	r10, r31
    267a:	f4 e0       	ldi	r31, 0x04	; 4
    267c:	bf 2e       	mov	r11, r31
    267e:	f0 2d       	mov	r31, r0
    2680:	f5 01       	movw	r30, r10
    2682:	d0 82       	st	Z, r13
	task6.period = SMTickSound_calc;
    2684:	64 e1       	ldi	r22, 0x14	; 20
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	61 83       	std	Z+1, r22	; 0x01
    268e:	72 83       	std	Z+2, r23	; 0x02
    2690:	83 83       	std	Z+3, r24	; 0x03
	task6.elapsedTime = SMTickSound_period;
    2692:	94 83       	std	Z+4, r25	; 0x04
    2694:	2e 2d       	mov	r18, r14
    2696:	3f 2d       	mov	r19, r15
    2698:	40 2f       	mov	r20, r16
    269a:	51 2f       	mov	r21, r17
    269c:	74 d2       	rcall	.+1256   	; 0x2b86 <__udivmodsi4>
    269e:	f5 01       	movw	r30, r10
    26a0:	25 83       	std	Z+5, r18	; 0x05
    26a2:	36 83       	std	Z+6, r19	; 0x06
    26a4:	47 83       	std	Z+7, r20	; 0x07
    26a6:	50 87       	std	Z+8, r21	; 0x08
	task6.TickFct = &TickSound;
    26a8:	8f e0       	ldi	r24, 0x0F	; 15
    26aa:	95 e0       	ldi	r25, 0x05	; 5
    26ac:	92 87       	std	Z+10, r25	; 0x0a
    26ae:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
    26b0:	6e 2d       	mov	r22, r14
    26b2:	7f 2d       	mov	r23, r15
    26b4:	80 2f       	mov	r24, r16
    26b6:	91 2f       	mov	r25, r17
    26b8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <TimerSet>
	TimerOn();
    26bc:	0e 94 05 03 	call	0x60a	; 0x60a <TimerOn>
    26c0:	6e 01       	movw	r12, r28
    26c2:	fd e0       	ldi	r31, 0x0D	; 13
    26c4:	cf 0e       	add	r12, r31
    26c6:	d1 1c       	adc	r13, r1
    26c8:	ce 01       	movw	r24, r28
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	7c 01       	movw	r14, r24
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    26ce:	d7 01       	movw	r26, r14
    26d0:	0d 91       	ld	r16, X+
    26d2:	1d 91       	ld	r17, X+
    26d4:	7d 01       	movw	r14, r26
    26d6:	f8 01       	movw	r30, r16
    26d8:	45 81       	ldd	r20, Z+5	; 0x05
    26da:	56 81       	ldd	r21, Z+6	; 0x06
    26dc:	67 81       	ldd	r22, Z+7	; 0x07
    26de:	70 85       	ldd	r23, Z+8	; 0x08
    26e0:	81 81       	ldd	r24, Z+1	; 0x01
    26e2:	92 81       	ldd	r25, Z+2	; 0x02
    26e4:	a3 81       	ldd	r26, Z+3	; 0x03
    26e6:	b4 81       	ldd	r27, Z+4	; 0x04
    26e8:	48 17       	cp	r20, r24
    26ea:	59 07       	cpc	r21, r25
    26ec:	6a 07       	cpc	r22, r26
    26ee:	7b 07       	cpc	r23, r27
    26f0:	69 f4       	brne	.+26     	; 0x270c <main+0x2be>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    26f2:	80 81       	ld	r24, Z
    26f4:	01 84       	ldd	r0, Z+9	; 0x09
    26f6:	f2 85       	ldd	r31, Z+10	; 0x0a
    26f8:	e0 2d       	mov	r30, r0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	09 95       	icall
    26fe:	d8 01       	movw	r26, r16
    2700:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    2702:	f8 01       	movw	r30, r16
    2704:	15 82       	std	Z+5, r1	; 0x05
    2706:	16 82       	std	Z+6, r1	; 0x06
    2708:	17 82       	std	Z+7, r1	; 0x07
    270a:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
    270c:	f8 01       	movw	r30, r16
    270e:	85 81       	ldd	r24, Z+5	; 0x05
    2710:	96 81       	ldd	r25, Z+6	; 0x06
    2712:	a7 81       	ldd	r26, Z+7	; 0x07
    2714:	b0 85       	ldd	r27, Z+8	; 0x08
    2716:	01 96       	adiw	r24, 0x01	; 1
    2718:	a1 1d       	adc	r26, r1
    271a:	b1 1d       	adc	r27, r1
    271c:	85 83       	std	Z+5, r24	; 0x05
    271e:	96 83       	std	Z+6, r25	; 0x06
    2720:	a7 83       	std	Z+7, r26	; 0x07
    2722:	b0 87       	std	Z+8, r27	; 0x08
	TimerOn();
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    2724:	ec 14       	cp	r14, r12
    2726:	fd 04       	cpc	r15, r13
    2728:	91 f6       	brne	.-92     	; 0x26ce <main+0x280>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
    272a:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <TimerFlag>
    272e:	88 23       	and	r24, r24
    2730:	e1 f3       	breq	.-8      	; 0x272a <main+0x2dc>
		TimerFlag = 0;
    2732:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <TimerFlag>
	}
    2736:	c8 cf       	rjmp	.-112    	; 0x26c8 <main+0x27a>

00002738 <__subsf3>:
    2738:	50 58       	subi	r21, 0x80	; 128

0000273a <__addsf3>:
    273a:	bb 27       	eor	r27, r27
    273c:	aa 27       	eor	r26, r26
    273e:	0e d0       	rcall	.+28     	; 0x275c <__addsf3x>
    2740:	75 c1       	rjmp	.+746    	; 0x2a2c <__fp_round>
    2742:	66 d1       	rcall	.+716    	; 0x2a10 <__fp_pscA>
    2744:	30 f0       	brcs	.+12     	; 0x2752 <__addsf3+0x18>
    2746:	6b d1       	rcall	.+726    	; 0x2a1e <__fp_pscB>
    2748:	20 f0       	brcs	.+8      	; 0x2752 <__addsf3+0x18>
    274a:	31 f4       	brne	.+12     	; 0x2758 <__addsf3+0x1e>
    274c:	9f 3f       	cpi	r25, 0xFF	; 255
    274e:	11 f4       	brne	.+4      	; 0x2754 <__addsf3+0x1a>
    2750:	1e f4       	brtc	.+6      	; 0x2758 <__addsf3+0x1e>
    2752:	5b c1       	rjmp	.+694    	; 0x2a0a <__fp_nan>
    2754:	0e f4       	brtc	.+2      	; 0x2758 <__addsf3+0x1e>
    2756:	e0 95       	com	r30
    2758:	e7 fb       	bst	r30, 7
    275a:	51 c1       	rjmp	.+674    	; 0x29fe <__fp_inf>

0000275c <__addsf3x>:
    275c:	e9 2f       	mov	r30, r25
    275e:	77 d1       	rcall	.+750    	; 0x2a4e <__fp_split3>
    2760:	80 f3       	brcs	.-32     	; 0x2742 <__addsf3+0x8>
    2762:	ba 17       	cp	r27, r26
    2764:	62 07       	cpc	r22, r18
    2766:	73 07       	cpc	r23, r19
    2768:	84 07       	cpc	r24, r20
    276a:	95 07       	cpc	r25, r21
    276c:	18 f0       	brcs	.+6      	; 0x2774 <__addsf3x+0x18>
    276e:	71 f4       	brne	.+28     	; 0x278c <__addsf3x+0x30>
    2770:	9e f5       	brtc	.+102    	; 0x27d8 <__addsf3x+0x7c>
    2772:	8f c1       	rjmp	.+798    	; 0x2a92 <__fp_zero>
    2774:	0e f4       	brtc	.+2      	; 0x2778 <__addsf3x+0x1c>
    2776:	e0 95       	com	r30
    2778:	0b 2e       	mov	r0, r27
    277a:	ba 2f       	mov	r27, r26
    277c:	a0 2d       	mov	r26, r0
    277e:	0b 01       	movw	r0, r22
    2780:	b9 01       	movw	r22, r18
    2782:	90 01       	movw	r18, r0
    2784:	0c 01       	movw	r0, r24
    2786:	ca 01       	movw	r24, r20
    2788:	a0 01       	movw	r20, r0
    278a:	11 24       	eor	r1, r1
    278c:	ff 27       	eor	r31, r31
    278e:	59 1b       	sub	r21, r25
    2790:	99 f0       	breq	.+38     	; 0x27b8 <__addsf3x+0x5c>
    2792:	59 3f       	cpi	r21, 0xF9	; 249
    2794:	50 f4       	brcc	.+20     	; 0x27aa <__addsf3x+0x4e>
    2796:	50 3e       	cpi	r21, 0xE0	; 224
    2798:	68 f1       	brcs	.+90     	; 0x27f4 <__addsf3x+0x98>
    279a:	1a 16       	cp	r1, r26
    279c:	f0 40       	sbci	r31, 0x00	; 0
    279e:	a2 2f       	mov	r26, r18
    27a0:	23 2f       	mov	r18, r19
    27a2:	34 2f       	mov	r19, r20
    27a4:	44 27       	eor	r20, r20
    27a6:	58 5f       	subi	r21, 0xF8	; 248
    27a8:	f3 cf       	rjmp	.-26     	; 0x2790 <__addsf3x+0x34>
    27aa:	46 95       	lsr	r20
    27ac:	37 95       	ror	r19
    27ae:	27 95       	ror	r18
    27b0:	a7 95       	ror	r26
    27b2:	f0 40       	sbci	r31, 0x00	; 0
    27b4:	53 95       	inc	r21
    27b6:	c9 f7       	brne	.-14     	; 0x27aa <__addsf3x+0x4e>
    27b8:	7e f4       	brtc	.+30     	; 0x27d8 <__addsf3x+0x7c>
    27ba:	1f 16       	cp	r1, r31
    27bc:	ba 0b       	sbc	r27, r26
    27be:	62 0b       	sbc	r22, r18
    27c0:	73 0b       	sbc	r23, r19
    27c2:	84 0b       	sbc	r24, r20
    27c4:	ba f0       	brmi	.+46     	; 0x27f4 <__addsf3x+0x98>
    27c6:	91 50       	subi	r25, 0x01	; 1
    27c8:	a1 f0       	breq	.+40     	; 0x27f2 <__addsf3x+0x96>
    27ca:	ff 0f       	add	r31, r31
    27cc:	bb 1f       	adc	r27, r27
    27ce:	66 1f       	adc	r22, r22
    27d0:	77 1f       	adc	r23, r23
    27d2:	88 1f       	adc	r24, r24
    27d4:	c2 f7       	brpl	.-16     	; 0x27c6 <__addsf3x+0x6a>
    27d6:	0e c0       	rjmp	.+28     	; 0x27f4 <__addsf3x+0x98>
    27d8:	ba 0f       	add	r27, r26
    27da:	62 1f       	adc	r22, r18
    27dc:	73 1f       	adc	r23, r19
    27de:	84 1f       	adc	r24, r20
    27e0:	48 f4       	brcc	.+18     	; 0x27f4 <__addsf3x+0x98>
    27e2:	87 95       	ror	r24
    27e4:	77 95       	ror	r23
    27e6:	67 95       	ror	r22
    27e8:	b7 95       	ror	r27
    27ea:	f7 95       	ror	r31
    27ec:	9e 3f       	cpi	r25, 0xFE	; 254
    27ee:	08 f0       	brcs	.+2      	; 0x27f2 <__addsf3x+0x96>
    27f0:	b3 cf       	rjmp	.-154    	; 0x2758 <__addsf3+0x1e>
    27f2:	93 95       	inc	r25
    27f4:	88 0f       	add	r24, r24
    27f6:	08 f0       	brcs	.+2      	; 0x27fa <__addsf3x+0x9e>
    27f8:	99 27       	eor	r25, r25
    27fa:	ee 0f       	add	r30, r30
    27fc:	97 95       	ror	r25
    27fe:	87 95       	ror	r24
    2800:	08 95       	ret

00002802 <__cmpsf2>:
    2802:	d9 d0       	rcall	.+434    	; 0x29b6 <__fp_cmp>
    2804:	08 f4       	brcc	.+2      	; 0x2808 <__cmpsf2+0x6>
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	08 95       	ret

0000280a <__divsf3>:
    280a:	0c d0       	rcall	.+24     	; 0x2824 <__divsf3x>
    280c:	0f c1       	rjmp	.+542    	; 0x2a2c <__fp_round>
    280e:	07 d1       	rcall	.+526    	; 0x2a1e <__fp_pscB>
    2810:	40 f0       	brcs	.+16     	; 0x2822 <__divsf3+0x18>
    2812:	fe d0       	rcall	.+508    	; 0x2a10 <__fp_pscA>
    2814:	30 f0       	brcs	.+12     	; 0x2822 <__divsf3+0x18>
    2816:	21 f4       	brne	.+8      	; 0x2820 <__divsf3+0x16>
    2818:	5f 3f       	cpi	r21, 0xFF	; 255
    281a:	19 f0       	breq	.+6      	; 0x2822 <__divsf3+0x18>
    281c:	f0 c0       	rjmp	.+480    	; 0x29fe <__fp_inf>
    281e:	51 11       	cpse	r21, r1
    2820:	39 c1       	rjmp	.+626    	; 0x2a94 <__fp_szero>
    2822:	f3 c0       	rjmp	.+486    	; 0x2a0a <__fp_nan>

00002824 <__divsf3x>:
    2824:	14 d1       	rcall	.+552    	; 0x2a4e <__fp_split3>
    2826:	98 f3       	brcs	.-26     	; 0x280e <__divsf3+0x4>

00002828 <__divsf3_pse>:
    2828:	99 23       	and	r25, r25
    282a:	c9 f3       	breq	.-14     	; 0x281e <__divsf3+0x14>
    282c:	55 23       	and	r21, r21
    282e:	b1 f3       	breq	.-20     	; 0x281c <__divsf3+0x12>
    2830:	95 1b       	sub	r25, r21
    2832:	55 0b       	sbc	r21, r21
    2834:	bb 27       	eor	r27, r27
    2836:	aa 27       	eor	r26, r26
    2838:	62 17       	cp	r22, r18
    283a:	73 07       	cpc	r23, r19
    283c:	84 07       	cpc	r24, r20
    283e:	38 f0       	brcs	.+14     	; 0x284e <__divsf3_pse+0x26>
    2840:	9f 5f       	subi	r25, 0xFF	; 255
    2842:	5f 4f       	sbci	r21, 0xFF	; 255
    2844:	22 0f       	add	r18, r18
    2846:	33 1f       	adc	r19, r19
    2848:	44 1f       	adc	r20, r20
    284a:	aa 1f       	adc	r26, r26
    284c:	a9 f3       	breq	.-22     	; 0x2838 <__divsf3_pse+0x10>
    284e:	33 d0       	rcall	.+102    	; 0x28b6 <__divsf3_pse+0x8e>
    2850:	0e 2e       	mov	r0, r30
    2852:	3a f0       	brmi	.+14     	; 0x2862 <__divsf3_pse+0x3a>
    2854:	e0 e8       	ldi	r30, 0x80	; 128
    2856:	30 d0       	rcall	.+96     	; 0x28b8 <__divsf3_pse+0x90>
    2858:	91 50       	subi	r25, 0x01	; 1
    285a:	50 40       	sbci	r21, 0x00	; 0
    285c:	e6 95       	lsr	r30
    285e:	00 1c       	adc	r0, r0
    2860:	ca f7       	brpl	.-14     	; 0x2854 <__divsf3_pse+0x2c>
    2862:	29 d0       	rcall	.+82     	; 0x28b6 <__divsf3_pse+0x8e>
    2864:	fe 2f       	mov	r31, r30
    2866:	27 d0       	rcall	.+78     	; 0x28b6 <__divsf3_pse+0x8e>
    2868:	66 0f       	add	r22, r22
    286a:	77 1f       	adc	r23, r23
    286c:	88 1f       	adc	r24, r24
    286e:	bb 1f       	adc	r27, r27
    2870:	26 17       	cp	r18, r22
    2872:	37 07       	cpc	r19, r23
    2874:	48 07       	cpc	r20, r24
    2876:	ab 07       	cpc	r26, r27
    2878:	b0 e8       	ldi	r27, 0x80	; 128
    287a:	09 f0       	breq	.+2      	; 0x287e <__divsf3_pse+0x56>
    287c:	bb 0b       	sbc	r27, r27
    287e:	80 2d       	mov	r24, r0
    2880:	bf 01       	movw	r22, r30
    2882:	ff 27       	eor	r31, r31
    2884:	93 58       	subi	r25, 0x83	; 131
    2886:	5f 4f       	sbci	r21, 0xFF	; 255
    2888:	2a f0       	brmi	.+10     	; 0x2894 <__divsf3_pse+0x6c>
    288a:	9e 3f       	cpi	r25, 0xFE	; 254
    288c:	51 05       	cpc	r21, r1
    288e:	68 f0       	brcs	.+26     	; 0x28aa <__divsf3_pse+0x82>
    2890:	b6 c0       	rjmp	.+364    	; 0x29fe <__fp_inf>
    2892:	00 c1       	rjmp	.+512    	; 0x2a94 <__fp_szero>
    2894:	5f 3f       	cpi	r21, 0xFF	; 255
    2896:	ec f3       	brlt	.-6      	; 0x2892 <__divsf3_pse+0x6a>
    2898:	98 3e       	cpi	r25, 0xE8	; 232
    289a:	dc f3       	brlt	.-10     	; 0x2892 <__divsf3_pse+0x6a>
    289c:	86 95       	lsr	r24
    289e:	77 95       	ror	r23
    28a0:	67 95       	ror	r22
    28a2:	b7 95       	ror	r27
    28a4:	f7 95       	ror	r31
    28a6:	9f 5f       	subi	r25, 0xFF	; 255
    28a8:	c9 f7       	brne	.-14     	; 0x289c <__divsf3_pse+0x74>
    28aa:	88 0f       	add	r24, r24
    28ac:	91 1d       	adc	r25, r1
    28ae:	96 95       	lsr	r25
    28b0:	87 95       	ror	r24
    28b2:	97 f9       	bld	r25, 7
    28b4:	08 95       	ret
    28b6:	e1 e0       	ldi	r30, 0x01	; 1
    28b8:	66 0f       	add	r22, r22
    28ba:	77 1f       	adc	r23, r23
    28bc:	88 1f       	adc	r24, r24
    28be:	bb 1f       	adc	r27, r27
    28c0:	62 17       	cp	r22, r18
    28c2:	73 07       	cpc	r23, r19
    28c4:	84 07       	cpc	r24, r20
    28c6:	ba 07       	cpc	r27, r26
    28c8:	20 f0       	brcs	.+8      	; 0x28d2 <__divsf3_pse+0xaa>
    28ca:	62 1b       	sub	r22, r18
    28cc:	73 0b       	sbc	r23, r19
    28ce:	84 0b       	sbc	r24, r20
    28d0:	ba 0b       	sbc	r27, r26
    28d2:	ee 1f       	adc	r30, r30
    28d4:	88 f7       	brcc	.-30     	; 0x28b8 <__divsf3_pse+0x90>
    28d6:	e0 95       	com	r30
    28d8:	08 95       	ret

000028da <__fixsfsi>:
    28da:	04 d0       	rcall	.+8      	; 0x28e4 <__fixunssfsi>
    28dc:	68 94       	set
    28de:	b1 11       	cpse	r27, r1
    28e0:	d9 c0       	rjmp	.+434    	; 0x2a94 <__fp_szero>
    28e2:	08 95       	ret

000028e4 <__fixunssfsi>:
    28e4:	bc d0       	rcall	.+376    	; 0x2a5e <__fp_splitA>
    28e6:	88 f0       	brcs	.+34     	; 0x290a <__fixunssfsi+0x26>
    28e8:	9f 57       	subi	r25, 0x7F	; 127
    28ea:	90 f0       	brcs	.+36     	; 0x2910 <__fixunssfsi+0x2c>
    28ec:	b9 2f       	mov	r27, r25
    28ee:	99 27       	eor	r25, r25
    28f0:	b7 51       	subi	r27, 0x17	; 23
    28f2:	a0 f0       	brcs	.+40     	; 0x291c <__fixunssfsi+0x38>
    28f4:	d1 f0       	breq	.+52     	; 0x292a <__fixunssfsi+0x46>
    28f6:	66 0f       	add	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	88 1f       	adc	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	1a f0       	brmi	.+6      	; 0x2906 <__fixunssfsi+0x22>
    2900:	ba 95       	dec	r27
    2902:	c9 f7       	brne	.-14     	; 0x28f6 <__fixunssfsi+0x12>
    2904:	12 c0       	rjmp	.+36     	; 0x292a <__fixunssfsi+0x46>
    2906:	b1 30       	cpi	r27, 0x01	; 1
    2908:	81 f0       	breq	.+32     	; 0x292a <__fixunssfsi+0x46>
    290a:	c3 d0       	rcall	.+390    	; 0x2a92 <__fp_zero>
    290c:	b1 e0       	ldi	r27, 0x01	; 1
    290e:	08 95       	ret
    2910:	c0 c0       	rjmp	.+384    	; 0x2a92 <__fp_zero>
    2912:	67 2f       	mov	r22, r23
    2914:	78 2f       	mov	r23, r24
    2916:	88 27       	eor	r24, r24
    2918:	b8 5f       	subi	r27, 0xF8	; 248
    291a:	39 f0       	breq	.+14     	; 0x292a <__fixunssfsi+0x46>
    291c:	b9 3f       	cpi	r27, 0xF9	; 249
    291e:	cc f3       	brlt	.-14     	; 0x2912 <__fixunssfsi+0x2e>
    2920:	86 95       	lsr	r24
    2922:	77 95       	ror	r23
    2924:	67 95       	ror	r22
    2926:	b3 95       	inc	r27
    2928:	d9 f7       	brne	.-10     	; 0x2920 <__fixunssfsi+0x3c>
    292a:	3e f4       	brtc	.+14     	; 0x293a <__fixunssfsi+0x56>
    292c:	90 95       	com	r25
    292e:	80 95       	com	r24
    2930:	70 95       	com	r23
    2932:	61 95       	neg	r22
    2934:	7f 4f       	sbci	r23, 0xFF	; 255
    2936:	8f 4f       	sbci	r24, 0xFF	; 255
    2938:	9f 4f       	sbci	r25, 0xFF	; 255
    293a:	08 95       	ret

0000293c <__floatunsisf>:
    293c:	e8 94       	clt
    293e:	09 c0       	rjmp	.+18     	; 0x2952 <__floatsisf+0x12>

00002940 <__floatsisf>:
    2940:	97 fb       	bst	r25, 7
    2942:	3e f4       	brtc	.+14     	; 0x2952 <__floatsisf+0x12>
    2944:	90 95       	com	r25
    2946:	80 95       	com	r24
    2948:	70 95       	com	r23
    294a:	61 95       	neg	r22
    294c:	7f 4f       	sbci	r23, 0xFF	; 255
    294e:	8f 4f       	sbci	r24, 0xFF	; 255
    2950:	9f 4f       	sbci	r25, 0xFF	; 255
    2952:	99 23       	and	r25, r25
    2954:	a9 f0       	breq	.+42     	; 0x2980 <__floatsisf+0x40>
    2956:	f9 2f       	mov	r31, r25
    2958:	96 e9       	ldi	r25, 0x96	; 150
    295a:	bb 27       	eor	r27, r27
    295c:	93 95       	inc	r25
    295e:	f6 95       	lsr	r31
    2960:	87 95       	ror	r24
    2962:	77 95       	ror	r23
    2964:	67 95       	ror	r22
    2966:	b7 95       	ror	r27
    2968:	f1 11       	cpse	r31, r1
    296a:	f8 cf       	rjmp	.-16     	; 0x295c <__floatsisf+0x1c>
    296c:	fa f4       	brpl	.+62     	; 0x29ac <__floatsisf+0x6c>
    296e:	bb 0f       	add	r27, r27
    2970:	11 f4       	brne	.+4      	; 0x2976 <__floatsisf+0x36>
    2972:	60 ff       	sbrs	r22, 0
    2974:	1b c0       	rjmp	.+54     	; 0x29ac <__floatsisf+0x6c>
    2976:	6f 5f       	subi	r22, 0xFF	; 255
    2978:	7f 4f       	sbci	r23, 0xFF	; 255
    297a:	8f 4f       	sbci	r24, 0xFF	; 255
    297c:	9f 4f       	sbci	r25, 0xFF	; 255
    297e:	16 c0       	rjmp	.+44     	; 0x29ac <__floatsisf+0x6c>
    2980:	88 23       	and	r24, r24
    2982:	11 f0       	breq	.+4      	; 0x2988 <__floatsisf+0x48>
    2984:	96 e9       	ldi	r25, 0x96	; 150
    2986:	11 c0       	rjmp	.+34     	; 0x29aa <__floatsisf+0x6a>
    2988:	77 23       	and	r23, r23
    298a:	21 f0       	breq	.+8      	; 0x2994 <__floatsisf+0x54>
    298c:	9e e8       	ldi	r25, 0x8E	; 142
    298e:	87 2f       	mov	r24, r23
    2990:	76 2f       	mov	r23, r22
    2992:	05 c0       	rjmp	.+10     	; 0x299e <__floatsisf+0x5e>
    2994:	66 23       	and	r22, r22
    2996:	71 f0       	breq	.+28     	; 0x29b4 <__floatsisf+0x74>
    2998:	96 e8       	ldi	r25, 0x86	; 134
    299a:	86 2f       	mov	r24, r22
    299c:	70 e0       	ldi	r23, 0x00	; 0
    299e:	60 e0       	ldi	r22, 0x00	; 0
    29a0:	2a f0       	brmi	.+10     	; 0x29ac <__floatsisf+0x6c>
    29a2:	9a 95       	dec	r25
    29a4:	66 0f       	add	r22, r22
    29a6:	77 1f       	adc	r23, r23
    29a8:	88 1f       	adc	r24, r24
    29aa:	da f7       	brpl	.-10     	; 0x29a2 <__floatsisf+0x62>
    29ac:	88 0f       	add	r24, r24
    29ae:	96 95       	lsr	r25
    29b0:	87 95       	ror	r24
    29b2:	97 f9       	bld	r25, 7
    29b4:	08 95       	ret

000029b6 <__fp_cmp>:
    29b6:	99 0f       	add	r25, r25
    29b8:	00 08       	sbc	r0, r0
    29ba:	55 0f       	add	r21, r21
    29bc:	aa 0b       	sbc	r26, r26
    29be:	e0 e8       	ldi	r30, 0x80	; 128
    29c0:	fe ef       	ldi	r31, 0xFE	; 254
    29c2:	16 16       	cp	r1, r22
    29c4:	17 06       	cpc	r1, r23
    29c6:	e8 07       	cpc	r30, r24
    29c8:	f9 07       	cpc	r31, r25
    29ca:	c0 f0       	brcs	.+48     	; 0x29fc <__fp_cmp+0x46>
    29cc:	12 16       	cp	r1, r18
    29ce:	13 06       	cpc	r1, r19
    29d0:	e4 07       	cpc	r30, r20
    29d2:	f5 07       	cpc	r31, r21
    29d4:	98 f0       	brcs	.+38     	; 0x29fc <__fp_cmp+0x46>
    29d6:	62 1b       	sub	r22, r18
    29d8:	73 0b       	sbc	r23, r19
    29da:	84 0b       	sbc	r24, r20
    29dc:	95 0b       	sbc	r25, r21
    29de:	39 f4       	brne	.+14     	; 0x29ee <__fp_cmp+0x38>
    29e0:	0a 26       	eor	r0, r26
    29e2:	61 f0       	breq	.+24     	; 0x29fc <__fp_cmp+0x46>
    29e4:	23 2b       	or	r18, r19
    29e6:	24 2b       	or	r18, r20
    29e8:	25 2b       	or	r18, r21
    29ea:	21 f4       	brne	.+8      	; 0x29f4 <__fp_cmp+0x3e>
    29ec:	08 95       	ret
    29ee:	0a 26       	eor	r0, r26
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <__fp_cmp+0x3e>
    29f2:	a1 40       	sbci	r26, 0x01	; 1
    29f4:	a6 95       	lsr	r26
    29f6:	8f ef       	ldi	r24, 0xFF	; 255
    29f8:	81 1d       	adc	r24, r1
    29fa:	81 1d       	adc	r24, r1
    29fc:	08 95       	ret

000029fe <__fp_inf>:
    29fe:	97 f9       	bld	r25, 7
    2a00:	9f 67       	ori	r25, 0x7F	; 127
    2a02:	80 e8       	ldi	r24, 0x80	; 128
    2a04:	70 e0       	ldi	r23, 0x00	; 0
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	08 95       	ret

00002a0a <__fp_nan>:
    2a0a:	9f ef       	ldi	r25, 0xFF	; 255
    2a0c:	80 ec       	ldi	r24, 0xC0	; 192
    2a0e:	08 95       	ret

00002a10 <__fp_pscA>:
    2a10:	00 24       	eor	r0, r0
    2a12:	0a 94       	dec	r0
    2a14:	16 16       	cp	r1, r22
    2a16:	17 06       	cpc	r1, r23
    2a18:	18 06       	cpc	r1, r24
    2a1a:	09 06       	cpc	r0, r25
    2a1c:	08 95       	ret

00002a1e <__fp_pscB>:
    2a1e:	00 24       	eor	r0, r0
    2a20:	0a 94       	dec	r0
    2a22:	12 16       	cp	r1, r18
    2a24:	13 06       	cpc	r1, r19
    2a26:	14 06       	cpc	r1, r20
    2a28:	05 06       	cpc	r0, r21
    2a2a:	08 95       	ret

00002a2c <__fp_round>:
    2a2c:	09 2e       	mov	r0, r25
    2a2e:	03 94       	inc	r0
    2a30:	00 0c       	add	r0, r0
    2a32:	11 f4       	brne	.+4      	; 0x2a38 <__fp_round+0xc>
    2a34:	88 23       	and	r24, r24
    2a36:	52 f0       	brmi	.+20     	; 0x2a4c <__fp_round+0x20>
    2a38:	bb 0f       	add	r27, r27
    2a3a:	40 f4       	brcc	.+16     	; 0x2a4c <__fp_round+0x20>
    2a3c:	bf 2b       	or	r27, r31
    2a3e:	11 f4       	brne	.+4      	; 0x2a44 <__fp_round+0x18>
    2a40:	60 ff       	sbrs	r22, 0
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <__fp_round+0x20>
    2a44:	6f 5f       	subi	r22, 0xFF	; 255
    2a46:	7f 4f       	sbci	r23, 0xFF	; 255
    2a48:	8f 4f       	sbci	r24, 0xFF	; 255
    2a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4c:	08 95       	ret

00002a4e <__fp_split3>:
    2a4e:	57 fd       	sbrc	r21, 7
    2a50:	90 58       	subi	r25, 0x80	; 128
    2a52:	44 0f       	add	r20, r20
    2a54:	55 1f       	adc	r21, r21
    2a56:	59 f0       	breq	.+22     	; 0x2a6e <__fp_splitA+0x10>
    2a58:	5f 3f       	cpi	r21, 0xFF	; 255
    2a5a:	71 f0       	breq	.+28     	; 0x2a78 <__fp_splitA+0x1a>
    2a5c:	47 95       	ror	r20

00002a5e <__fp_splitA>:
    2a5e:	88 0f       	add	r24, r24
    2a60:	97 fb       	bst	r25, 7
    2a62:	99 1f       	adc	r25, r25
    2a64:	61 f0       	breq	.+24     	; 0x2a7e <__fp_splitA+0x20>
    2a66:	9f 3f       	cpi	r25, 0xFF	; 255
    2a68:	79 f0       	breq	.+30     	; 0x2a88 <__fp_splitA+0x2a>
    2a6a:	87 95       	ror	r24
    2a6c:	08 95       	ret
    2a6e:	12 16       	cp	r1, r18
    2a70:	13 06       	cpc	r1, r19
    2a72:	14 06       	cpc	r1, r20
    2a74:	55 1f       	adc	r21, r21
    2a76:	f2 cf       	rjmp	.-28     	; 0x2a5c <__fp_split3+0xe>
    2a78:	46 95       	lsr	r20
    2a7a:	f1 df       	rcall	.-30     	; 0x2a5e <__fp_splitA>
    2a7c:	08 c0       	rjmp	.+16     	; 0x2a8e <__fp_splitA+0x30>
    2a7e:	16 16       	cp	r1, r22
    2a80:	17 06       	cpc	r1, r23
    2a82:	18 06       	cpc	r1, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	f1 cf       	rjmp	.-30     	; 0x2a6a <__fp_splitA+0xc>
    2a88:	86 95       	lsr	r24
    2a8a:	71 05       	cpc	r23, r1
    2a8c:	61 05       	cpc	r22, r1
    2a8e:	08 94       	sec
    2a90:	08 95       	ret

00002a92 <__fp_zero>:
    2a92:	e8 94       	clt

00002a94 <__fp_szero>:
    2a94:	bb 27       	eor	r27, r27
    2a96:	66 27       	eor	r22, r22
    2a98:	77 27       	eor	r23, r23
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	97 f9       	bld	r25, 7
    2a9e:	08 95       	ret

00002aa0 <__gesf2>:
    2aa0:	8a df       	rcall	.-236    	; 0x29b6 <__fp_cmp>
    2aa2:	08 f4       	brcc	.+2      	; 0x2aa6 <__gesf2+0x6>
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	08 95       	ret

00002aa8 <__mulsf3>:
    2aa8:	0b d0       	rcall	.+22     	; 0x2ac0 <__mulsf3x>
    2aaa:	c0 cf       	rjmp	.-128    	; 0x2a2c <__fp_round>
    2aac:	b1 df       	rcall	.-158    	; 0x2a10 <__fp_pscA>
    2aae:	28 f0       	brcs	.+10     	; 0x2aba <__mulsf3+0x12>
    2ab0:	b6 df       	rcall	.-148    	; 0x2a1e <__fp_pscB>
    2ab2:	18 f0       	brcs	.+6      	; 0x2aba <__mulsf3+0x12>
    2ab4:	95 23       	and	r25, r21
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <__mulsf3+0x12>
    2ab8:	a2 cf       	rjmp	.-188    	; 0x29fe <__fp_inf>
    2aba:	a7 cf       	rjmp	.-178    	; 0x2a0a <__fp_nan>
    2abc:	11 24       	eor	r1, r1
    2abe:	ea cf       	rjmp	.-44     	; 0x2a94 <__fp_szero>

00002ac0 <__mulsf3x>:
    2ac0:	c6 df       	rcall	.-116    	; 0x2a4e <__fp_split3>
    2ac2:	a0 f3       	brcs	.-24     	; 0x2aac <__mulsf3+0x4>

00002ac4 <__mulsf3_pse>:
    2ac4:	95 9f       	mul	r25, r21
    2ac6:	d1 f3       	breq	.-12     	; 0x2abc <__mulsf3+0x14>
    2ac8:	95 0f       	add	r25, r21
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	55 1f       	adc	r21, r21
    2ace:	62 9f       	mul	r22, r18
    2ad0:	f0 01       	movw	r30, r0
    2ad2:	72 9f       	mul	r23, r18
    2ad4:	bb 27       	eor	r27, r27
    2ad6:	f0 0d       	add	r31, r0
    2ad8:	b1 1d       	adc	r27, r1
    2ada:	63 9f       	mul	r22, r19
    2adc:	aa 27       	eor	r26, r26
    2ade:	f0 0d       	add	r31, r0
    2ae0:	b1 1d       	adc	r27, r1
    2ae2:	aa 1f       	adc	r26, r26
    2ae4:	64 9f       	mul	r22, r20
    2ae6:	66 27       	eor	r22, r22
    2ae8:	b0 0d       	add	r27, r0
    2aea:	a1 1d       	adc	r26, r1
    2aec:	66 1f       	adc	r22, r22
    2aee:	82 9f       	mul	r24, r18
    2af0:	22 27       	eor	r18, r18
    2af2:	b0 0d       	add	r27, r0
    2af4:	a1 1d       	adc	r26, r1
    2af6:	62 1f       	adc	r22, r18
    2af8:	73 9f       	mul	r23, r19
    2afa:	b0 0d       	add	r27, r0
    2afc:	a1 1d       	adc	r26, r1
    2afe:	62 1f       	adc	r22, r18
    2b00:	83 9f       	mul	r24, r19
    2b02:	a0 0d       	add	r26, r0
    2b04:	61 1d       	adc	r22, r1
    2b06:	22 1f       	adc	r18, r18
    2b08:	74 9f       	mul	r23, r20
    2b0a:	33 27       	eor	r19, r19
    2b0c:	a0 0d       	add	r26, r0
    2b0e:	61 1d       	adc	r22, r1
    2b10:	23 1f       	adc	r18, r19
    2b12:	84 9f       	mul	r24, r20
    2b14:	60 0d       	add	r22, r0
    2b16:	21 1d       	adc	r18, r1
    2b18:	82 2f       	mov	r24, r18
    2b1a:	76 2f       	mov	r23, r22
    2b1c:	6a 2f       	mov	r22, r26
    2b1e:	11 24       	eor	r1, r1
    2b20:	9f 57       	subi	r25, 0x7F	; 127
    2b22:	50 40       	sbci	r21, 0x00	; 0
    2b24:	8a f0       	brmi	.+34     	; 0x2b48 <__mulsf3_pse+0x84>
    2b26:	e1 f0       	breq	.+56     	; 0x2b60 <__mulsf3_pse+0x9c>
    2b28:	88 23       	and	r24, r24
    2b2a:	4a f0       	brmi	.+18     	; 0x2b3e <__mulsf3_pse+0x7a>
    2b2c:	ee 0f       	add	r30, r30
    2b2e:	ff 1f       	adc	r31, r31
    2b30:	bb 1f       	adc	r27, r27
    2b32:	66 1f       	adc	r22, r22
    2b34:	77 1f       	adc	r23, r23
    2b36:	88 1f       	adc	r24, r24
    2b38:	91 50       	subi	r25, 0x01	; 1
    2b3a:	50 40       	sbci	r21, 0x00	; 0
    2b3c:	a9 f7       	brne	.-22     	; 0x2b28 <__mulsf3_pse+0x64>
    2b3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2b40:	51 05       	cpc	r21, r1
    2b42:	70 f0       	brcs	.+28     	; 0x2b60 <__mulsf3_pse+0x9c>
    2b44:	5c cf       	rjmp	.-328    	; 0x29fe <__fp_inf>
    2b46:	a6 cf       	rjmp	.-180    	; 0x2a94 <__fp_szero>
    2b48:	5f 3f       	cpi	r21, 0xFF	; 255
    2b4a:	ec f3       	brlt	.-6      	; 0x2b46 <__mulsf3_pse+0x82>
    2b4c:	98 3e       	cpi	r25, 0xE8	; 232
    2b4e:	dc f3       	brlt	.-10     	; 0x2b46 <__mulsf3_pse+0x82>
    2b50:	86 95       	lsr	r24
    2b52:	77 95       	ror	r23
    2b54:	67 95       	ror	r22
    2b56:	b7 95       	ror	r27
    2b58:	f7 95       	ror	r31
    2b5a:	e7 95       	ror	r30
    2b5c:	9f 5f       	subi	r25, 0xFF	; 255
    2b5e:	c1 f7       	brne	.-16     	; 0x2b50 <__mulsf3_pse+0x8c>
    2b60:	fe 2b       	or	r31, r30
    2b62:	88 0f       	add	r24, r24
    2b64:	91 1d       	adc	r25, r1
    2b66:	96 95       	lsr	r25
    2b68:	87 95       	ror	r24
    2b6a:	97 f9       	bld	r25, 7
    2b6c:	08 95       	ret

00002b6e <__udivmodqi4>:
    2b6e:	99 1b       	sub	r25, r25
    2b70:	79 e0       	ldi	r23, 0x09	; 9
    2b72:	04 c0       	rjmp	.+8      	; 0x2b7c <__udivmodqi4_ep>

00002b74 <__udivmodqi4_loop>:
    2b74:	99 1f       	adc	r25, r25
    2b76:	96 17       	cp	r25, r22
    2b78:	08 f0       	brcs	.+2      	; 0x2b7c <__udivmodqi4_ep>
    2b7a:	96 1b       	sub	r25, r22

00002b7c <__udivmodqi4_ep>:
    2b7c:	88 1f       	adc	r24, r24
    2b7e:	7a 95       	dec	r23
    2b80:	c9 f7       	brne	.-14     	; 0x2b74 <__udivmodqi4_loop>
    2b82:	80 95       	com	r24
    2b84:	08 95       	ret

00002b86 <__udivmodsi4>:
    2b86:	a1 e2       	ldi	r26, 0x21	; 33
    2b88:	1a 2e       	mov	r1, r26
    2b8a:	aa 1b       	sub	r26, r26
    2b8c:	bb 1b       	sub	r27, r27
    2b8e:	fd 01       	movw	r30, r26
    2b90:	0d c0       	rjmp	.+26     	; 0x2bac <__udivmodsi4_ep>

00002b92 <__udivmodsi4_loop>:
    2b92:	aa 1f       	adc	r26, r26
    2b94:	bb 1f       	adc	r27, r27
    2b96:	ee 1f       	adc	r30, r30
    2b98:	ff 1f       	adc	r31, r31
    2b9a:	a2 17       	cp	r26, r18
    2b9c:	b3 07       	cpc	r27, r19
    2b9e:	e4 07       	cpc	r30, r20
    2ba0:	f5 07       	cpc	r31, r21
    2ba2:	20 f0       	brcs	.+8      	; 0x2bac <__udivmodsi4_ep>
    2ba4:	a2 1b       	sub	r26, r18
    2ba6:	b3 0b       	sbc	r27, r19
    2ba8:	e4 0b       	sbc	r30, r20
    2baa:	f5 0b       	sbc	r31, r21

00002bac <__udivmodsi4_ep>:
    2bac:	66 1f       	adc	r22, r22
    2bae:	77 1f       	adc	r23, r23
    2bb0:	88 1f       	adc	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	1a 94       	dec	r1
    2bb6:	69 f7       	brne	.-38     	; 0x2b92 <__udivmodsi4_loop>
    2bb8:	60 95       	com	r22
    2bba:	70 95       	com	r23
    2bbc:	80 95       	com	r24
    2bbe:	90 95       	com	r25
    2bc0:	9b 01       	movw	r18, r22
    2bc2:	ac 01       	movw	r20, r24
    2bc4:	bd 01       	movw	r22, r26
    2bc6:	cf 01       	movw	r24, r30
    2bc8:	08 95       	ret

00002bca <__tablejump2__>:
    2bca:	ee 0f       	add	r30, r30
    2bcc:	ff 1f       	adc	r31, r31
    2bce:	00 24       	eor	r0, r0
    2bd0:	00 1c       	adc	r0, r0
    2bd2:	0b be       	out	0x3b, r0	; 59
    2bd4:	07 90       	elpm	r0, Z+
    2bd6:	f6 91       	elpm	r31, Z
    2bd8:	e0 2d       	mov	r30, r0
    2bda:	09 94       	ijmp

00002bdc <__umulhisi3>:
    2bdc:	a2 9f       	mul	r26, r18
    2bde:	b0 01       	movw	r22, r0
    2be0:	b3 9f       	mul	r27, r19
    2be2:	c0 01       	movw	r24, r0
    2be4:	a3 9f       	mul	r26, r19
    2be6:	70 0d       	add	r23, r0
    2be8:	81 1d       	adc	r24, r1
    2bea:	11 24       	eor	r1, r1
    2bec:	91 1d       	adc	r25, r1
    2bee:	b2 9f       	mul	r27, r18
    2bf0:	70 0d       	add	r23, r0
    2bf2:	81 1d       	adc	r24, r1
    2bf4:	11 24       	eor	r1, r1
    2bf6:	91 1d       	adc	r25, r1
    2bf8:	08 95       	ret

00002bfa <eeprom_read_word>:
    2bfa:	a8 e1       	ldi	r26, 0x18	; 24
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	42 e0       	ldi	r20, 0x02	; 2
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	05 c0       	rjmp	.+10     	; 0x2c0e <eeprom_read_blraw>

00002c04 <eeprom_write_word>:
    2c04:	12 d0       	rcall	.+36     	; 0x2c2a <eeprom_write_byte>
    2c06:	27 2f       	mov	r18, r23
    2c08:	11 c0       	rjmp	.+34     	; 0x2c2c <eeprom_write_r18>

00002c0a <eeprom_read_block>:
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22

00002c0e <eeprom_read_blraw>:
    2c0e:	fc 01       	movw	r30, r24
    2c10:	f9 99       	sbic	0x1f, 1	; 31
    2c12:	fe cf       	rjmp	.-4      	; 0x2c10 <eeprom_read_blraw+0x2>
    2c14:	06 c0       	rjmp	.+12     	; 0x2c22 <eeprom_read_blraw+0x14>
    2c16:	f2 bd       	out	0x22, r31	; 34
    2c18:	e1 bd       	out	0x21, r30	; 33
    2c1a:	f8 9a       	sbi	0x1f, 0	; 31
    2c1c:	31 96       	adiw	r30, 0x01	; 1
    2c1e:	00 b4       	in	r0, 0x20	; 32
    2c20:	0d 92       	st	X+, r0
    2c22:	41 50       	subi	r20, 0x01	; 1
    2c24:	50 40       	sbci	r21, 0x00	; 0
    2c26:	b8 f7       	brcc	.-18     	; 0x2c16 <eeprom_read_blraw+0x8>
    2c28:	08 95       	ret

00002c2a <eeprom_write_byte>:
    2c2a:	26 2f       	mov	r18, r22

00002c2c <eeprom_write_r18>:
    2c2c:	f9 99       	sbic	0x1f, 1	; 31
    2c2e:	fe cf       	rjmp	.-4      	; 0x2c2c <eeprom_write_r18>
    2c30:	1f ba       	out	0x1f, r1	; 31
    2c32:	92 bd       	out	0x22, r25	; 34
    2c34:	81 bd       	out	0x21, r24	; 33
    2c36:	20 bd       	out	0x20, r18	; 32
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	fa 9a       	sbi	0x1f, 2	; 31
    2c3e:	f9 9a       	sbi	0x1f, 1	; 31
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	08 95       	ret

00002c46 <_exit>:
    2c46:	f8 94       	cli

00002c48 <__stop_program>:
    2c48:	ff cf       	rjmp	.-2      	; 0x2c48 <__stop_program>
