
jim011_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000332  00800100  0000273c  000027d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000273c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001278  00800432  00800432  00002b02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00002b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003340  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1b  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f16  00000000  00000000  00006cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  00008bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001070  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002077  00000000  00000000  0000a168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000c1df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	56 c1       	rjmp	.+684    	; 0x2ae <__ctors_end>
       2:	00 00       	nop
       4:	73 c1       	rjmp	.+742    	; 0x2ec <__bad_interrupt>
       6:	00 00       	nop
       8:	71 c1       	rjmp	.+738    	; 0x2ec <__bad_interrupt>
       a:	00 00       	nop
       c:	6f c1       	rjmp	.+734    	; 0x2ec <__bad_interrupt>
       e:	00 00       	nop
      10:	6d c1       	rjmp	.+730    	; 0x2ec <__bad_interrupt>
      12:	00 00       	nop
      14:	6b c1       	rjmp	.+726    	; 0x2ec <__bad_interrupt>
      16:	00 00       	nop
      18:	69 c1       	rjmp	.+722    	; 0x2ec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	67 c1       	rjmp	.+718    	; 0x2ec <__bad_interrupt>
      1e:	00 00       	nop
      20:	65 c1       	rjmp	.+714    	; 0x2ec <__bad_interrupt>
      22:	00 00       	nop
      24:	63 c1       	rjmp	.+710    	; 0x2ec <__bad_interrupt>
      26:	00 00       	nop
      28:	61 c1       	rjmp	.+706    	; 0x2ec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5f c1       	rjmp	.+702    	; 0x2ec <__bad_interrupt>
      2e:	00 00       	nop
      30:	5d c1       	rjmp	.+698    	; 0x2ec <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c2       	rjmp	.+1262   	; 0x524 <__vector_13>
      36:	00 00       	nop
      38:	59 c1       	rjmp	.+690    	; 0x2ec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	57 c1       	rjmp	.+686    	; 0x2ec <__bad_interrupt>
      3e:	00 00       	nop
      40:	55 c1       	rjmp	.+682    	; 0x2ec <__bad_interrupt>
      42:	00 00       	nop
      44:	53 c1       	rjmp	.+678    	; 0x2ec <__bad_interrupt>
      46:	00 00       	nop
      48:	51 c1       	rjmp	.+674    	; 0x2ec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4f c1       	rjmp	.+670    	; 0x2ec <__bad_interrupt>
      4e:	00 00       	nop
      50:	4d c1       	rjmp	.+666    	; 0x2ec <__bad_interrupt>
      52:	00 00       	nop
      54:	4b c1       	rjmp	.+662    	; 0x2ec <__bad_interrupt>
      56:	00 00       	nop
      58:	49 c1       	rjmp	.+658    	; 0x2ec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	47 c1       	rjmp	.+654    	; 0x2ec <__bad_interrupt>
      5e:	00 00       	nop
      60:	45 c1       	rjmp	.+650    	; 0x2ec <__bad_interrupt>
      62:	00 00       	nop
      64:	43 c1       	rjmp	.+646    	; 0x2ec <__bad_interrupt>
      66:	00 00       	nop
      68:	41 c1       	rjmp	.+642    	; 0x2ec <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3f c1       	rjmp	.+638    	; 0x2ec <__bad_interrupt>
      6e:	00 00       	nop
      70:	3d c1       	rjmp	.+634    	; 0x2ec <__bad_interrupt>
      72:	00 00       	nop
      74:	3b c1       	rjmp	.+630    	; 0x2ec <__bad_interrupt>
      76:	00 00       	nop
      78:	39 c1       	rjmp	.+626    	; 0x2ec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	37 c1       	rjmp	.+622    	; 0x2ec <__bad_interrupt>
      7e:	00 00       	nop
      80:	35 c1       	rjmp	.+618    	; 0x2ec <__bad_interrupt>
      82:	00 00       	nop
      84:	33 c1       	rjmp	.+614    	; 0x2ec <__bad_interrupt>
      86:	00 00       	nop
      88:	31 c1       	rjmp	.+610    	; 0x2ec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fc 04       	cpc	r15, r12
      8e:	02 05       	cpc	r16, r2
      90:	b1 04       	cpc	r11, r1
      92:	c1 04       	cpc	r12, r1
      94:	f7 04       	cpc	r15, r7
      96:	e7 04       	cpc	r14, r7
      98:	e1 04       	cpc	r14, r1
      9a:	2b 06       	cpc	r2, r27
      9c:	47 06       	cpc	r4, r23
      9e:	6a 06       	cpc	r6, r26
      a0:	8e 06       	cpc	r8, r30
      a2:	d5 06       	cpc	r13, r21
      a4:	1c 07       	cpc	r17, r28
      a6:	f8 06       	cpc	r15, r24
      a8:	b1 06       	cpc	r11, r17
      aa:	42 07       	cpc	r20, r18
      ac:	f8 07       	cpc	r31, r24
      ae:	02 08       	sbc	r0, r2
      b0:	b6 07       	cpc	r27, r22
      b2:	cb 09       	sbc	r28, r11
      b4:	c8 07       	cpc	r28, r24
      b6:	ea 07       	cpc	r30, r26
      b8:	dc 07       	cpc	r29, r28
      ba:	cb 09       	sbc	r28, r11
      bc:	cb 09       	sbc	r28, r11
      be:	e3 07       	cpc	r30, r19
      c0:	04 11       	cpse	r16, r4
      c2:	e1 10       	cpse	r14, r1
      c4:	c3 10       	cpse	r12, r3
      c6:	c8 10       	cpse	r12, r8
      c8:	dd 10       	cpse	r13, r13
      ca:	d8 10       	cpse	r13, r8
      cc:	d3 10       	cpse	r13, r3

000000ce <CHARSET>:
      ce:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      de:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      ee:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      fe:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     10e:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     11e:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     12e:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     13e:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     14e:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     15e:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     16e:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     17e:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     18e:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     19e:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1ae:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1be:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ce:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1de:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1ee:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1fe:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     20e:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     21e:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     22e:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     23e:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     24e:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     25e:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     26e:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     27e:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     28e:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     29e:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

000002ae <__ctors_end>:
     2ae:	11 24       	eor	r1, r1
     2b0:	1f be       	out	0x3f, r1	; 63
     2b2:	cf ef       	ldi	r28, 0xFF	; 255
     2b4:	d0 e4       	ldi	r29, 0x40	; 64
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	cd bf       	out	0x3d, r28	; 61

000002ba <__do_copy_data>:
     2ba:	14 e0       	ldi	r17, 0x04	; 4
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	b1 e0       	ldi	r27, 0x01	; 1
     2c0:	ec e3       	ldi	r30, 0x3C	; 60
     2c2:	f7 e2       	ldi	r31, 0x27	; 39
     2c4:	00 e0       	ldi	r16, 0x00	; 0
     2c6:	0b bf       	out	0x3b, r16	; 59
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <__do_copy_data+0x14>
     2ca:	07 90       	elpm	r0, Z+
     2cc:	0d 92       	st	X+, r0
     2ce:	a2 33       	cpi	r26, 0x32	; 50
     2d0:	b1 07       	cpc	r27, r17
     2d2:	d9 f7       	brne	.-10     	; 0x2ca <__do_copy_data+0x10>

000002d4 <__do_clear_bss>:
     2d4:	26 e1       	ldi	r18, 0x16	; 22
     2d6:	a2 e3       	ldi	r26, 0x32	; 50
     2d8:	b4 e0       	ldi	r27, 0x04	; 4
     2da:	01 c0       	rjmp	.+2      	; 0x2de <.do_clear_bss_start>

000002dc <.do_clear_bss_loop>:
     2dc:	1d 92       	st	X+, r1

000002de <.do_clear_bss_start>:
     2de:	aa 3a       	cpi	r26, 0xAA	; 170
     2e0:	b2 07       	cpc	r27, r18
     2e2:	e1 f7       	brne	.-8      	; 0x2dc <.do_clear_bss_loop>
     2e4:	0e 94 06 11 	call	0x220c	; 0x220c <main>
     2e8:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <_exit>

000002ec <__bad_interrupt>:
     2ec:	89 ce       	rjmp	.-750    	; 0x0 <__vectors>

000002ee <write>:
		default:
		break;
	}
	
	return state;
}
     2ee:	59 98       	cbi	0x0b, 1	; 11
     2f0:	66 23       	and	r22, r22
     2f2:	11 f0       	breq	.+4      	; 0x2f8 <write+0xa>
     2f4:	5b 9a       	sbi	0x0b, 3	; 11
     2f6:	15 c0       	rjmp	.+42     	; 0x322 <write+0x34>
     2f8:	5b 98       	cbi	0x0b, 3	; 11
     2fa:	13 c0       	rjmp	.+38     	; 0x322 <write+0x34>
     2fc:	ac 01       	movw	r20, r24
     2fe:	02 2e       	mov	r0, r18
     300:	02 c0       	rjmp	.+4      	; 0x306 <write+0x18>
     302:	55 95       	asr	r21
     304:	47 95       	ror	r20
     306:	0a 94       	dec	r0
     308:	e2 f7       	brpl	.-8      	; 0x302 <write+0x14>
     30a:	40 ff       	sbrs	r20, 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <write+0x24>
     30e:	5c 9a       	sbi	0x0b, 4	; 11
     310:	01 c0       	rjmp	.+2      	; 0x314 <write+0x26>
     312:	5c 98       	cbi	0x0b, 4	; 11
     314:	5d 9a       	sbi	0x0b, 5	; 11
     316:	5d 98       	cbi	0x0b, 5	; 11
     318:	21 50       	subi	r18, 0x01	; 1
     31a:	31 09       	sbc	r19, r1
     31c:	78 f7       	brcc	.-34     	; 0x2fc <write+0xe>
     31e:	59 9a       	sbi	0x0b, 1	; 11
     320:	08 95       	ret
     322:	27 e0       	ldi	r18, 0x07	; 7
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	e9 cf       	rjmp	.-46     	; 0x2fc <write+0xe>

0000032a <write_cmd>:
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	e0 cf       	rjmp	.-64     	; 0x2ee <write>
     32e:	08 95       	ret

00000330 <TickPWMMotor>:
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	09 f4       	brne	.+2      	; 0x336 <TickPWMMotor+0x6>
     334:	56 c0       	rjmp	.+172    	; 0x3e2 <TickPWMMotor+0xb2>
     336:	e0 f0       	brcs	.+56     	; 0x370 <TickPWMMotor+0x40>
     338:	84 30       	cpi	r24, 0x04	; 4
     33a:	19 f0       	breq	.+6      	; 0x342 <TickPWMMotor+0x12>
     33c:	85 30       	cpi	r24, 0x05	; 5
     33e:	69 f0       	breq	.+26     	; 0x35a <TickPWMMotor+0x2a>
     340:	46 c0       	rjmp	.+140    	; 0x3ce <TickPWMMotor+0x9e>
     342:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <PWMCount>
     346:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <PWMCount+0x1>
     34a:	05 97       	sbiw	r24, 0x05	; 5
     34c:	08 f4       	brcc	.+2      	; 0x350 <TickPWMMotor+0x20>
     34e:	49 c0       	rjmp	.+146    	; 0x3e2 <TickPWMMotor+0xb2>
     350:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <PWMCount+0x1>
     354:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <PWMCount>
     358:	3f c0       	rjmp	.+126    	; 0x3d8 <TickPWMMotor+0xa8>
     35a:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <PWMCount>
     35e:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <PWMCount+0x1>
     362:	05 97       	sbiw	r24, 0x05	; 5
     364:	c8 f1       	brcs	.+114    	; 0x3d8 <TickPWMMotor+0xa8>
     366:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <PWMCount+0x1>
     36a:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <PWMCount>
     36e:	39 c0       	rjmp	.+114    	; 0x3e2 <TickPWMMotor+0xb2>
     370:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <tempC>
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	2c c0       	rjmp	.+88     	; 0x3d0 <TickPWMMotor+0xa0>
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <tempC>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <rumbleMes>
     384:	04 c0       	rjmp	.+8      	; 0x38e <TickPWMMotor+0x5e>
     386:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <tempC>
     38a:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <rumbleMes>
     38e:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <PWMCount>
     392:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <PWMCount+0x1>
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <PWMCount+0x1>
     39c:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <PWMCount>
     3a0:	84 e0       	ldi	r24, 0x04	; 4
     3a2:	16 c0       	rjmp	.+44     	; 0x3d0 <TickPWMMotor+0xa0>
     3a4:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <tempC>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <rumbleMes>
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <TickPWMMotor+0x88>
     3b0:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <tempC>
     3b4:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <rumbleMes>
     3b8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <PWMCount>
     3bc:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <PWMCount+0x1>
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <PWMCount+0x1>
     3c6:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <PWMCount>
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <TickPWMMotor+0xa0>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <tempC>
     3d4:	98 b9       	out	0x08, r25	; 8
     3d6:	08 95       	ret
     3d8:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <rumbleOn>
     3dc:	81 11       	cpse	r24, r1
     3de:	e2 cf       	rjmp	.-60     	; 0x3a4 <TickPWMMotor+0x74>
     3e0:	e7 cf       	rjmp	.-50     	; 0x3b0 <TickPWMMotor+0x80>
     3e2:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <rumbleOn>
     3e6:	81 11       	cpse	r24, r1
     3e8:	c7 cf       	rjmp	.-114    	; 0x378 <TickPWMMotor+0x48>
     3ea:	cd cf       	rjmp	.-102    	; 0x386 <TickPWMMotor+0x56>

000003ec <TickPWMMotorManager>:
     3ec:	82 30       	cpi	r24, 0x02	; 2
     3ee:	61 f0       	breq	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f0:	28 f4       	brcc	.+10     	; 0x3fc <TickPWMMotorManager+0x10>
     3f2:	88 23       	and	r24, r24
     3f4:	d1 f0       	breq	.+52     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	21 f1       	breq	.+72     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3fa:	5d c0       	rjmp	.+186    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     3fc:	84 30       	cpi	r24, 0x04	; 4
     3fe:	49 f0       	breq	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     400:	a8 f1       	brcs	.+106    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     402:	85 30       	cpi	r24, 0x05	; 5
     404:	f1 f0       	breq	.+60     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     406:	57 c0       	rjmp	.+174    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     408:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <vibrateQueueSize>
     40c:	81 11       	cpse	r24, r1
     40e:	1d c0       	rjmp	.+58     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     410:	18 c0       	rjmp	.+48     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     412:	20 91 b7 06 	lds	r18, 0x06B7	; 0x8006b7 <vibrateDuration>
     416:	30 91 b8 06 	lds	r19, 0x06B8	; 0x8006b8 <vibrateDuration+0x1>
     41a:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <vibrateQueueCount>
     41e:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <vibrateQueueCount+0x1>
     422:	82 17       	cp	r24, r18
     424:	93 07       	cpc	r25, r19
     426:	80 f5       	brcc	.+96     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     428:	21 c0       	rjmp	.+66     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     42a:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <vibrateQueueSize>
     42e:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <vibrateQueueStart>
     432:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <vibrateQueueEnd>
     436:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <vibrateDuration+0x1>
     43a:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <vibrateDuration>
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	08 95       	ret
     442:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <rumbleOn>
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	08 95       	ret
     44a:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <vibrateQueueStart>
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	ea 56       	subi	r30, 0x6A	; 106
     452:	f9 4f       	sbci	r31, 0xF9	; 249
     454:	80 81       	ld	r24, Z
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <vibrateDuration+0x1>
     45c:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <vibrateDuration>
     460:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <vibrateQueueCount+0x1>
     464:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <vibrateQueueCount>
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	08 95       	ret
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <rumbleOn>
     472:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <vibrateQueueCount>
     476:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <vibrateQueueCount+0x1>
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <vibrateQueueCount+0x1>
     480:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <vibrateQueueCount>
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	08 95       	ret
     488:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <rumbleOn>
     48c:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <vibrateQueueStart>
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	18 f0       	brcs	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     494:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <vibrateQueueStart>
     498:	03 c0       	rjmp	.+6      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <vibrateQueueStart>
     4a0:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <vibrateQueueSize>
     4a4:	81 50       	subi	r24, 0x01	; 1
     4a6:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <vibrateQueueSize>
     4aa:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <vibrateQueueCount+0x1>
     4ae:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <vibrateQueueCount>
     4b2:	85 e0       	ldi	r24, 0x05	; 5
     4b4:	08 95       	ret
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	08 95       	ret

000004ba <TimerSet>:
     4ba:	60 93 c0 03 	sts	0x03C0, r22	; 0x8003c0 <_avr_timer_M>
     4be:	70 93 c1 03 	sts	0x03C1, r23	; 0x8003c1 <_avr_timer_M+0x1>
     4c2:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <_avr_timer_M+0x2>
     4c6:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <_avr_timer_M+0x3>
     4ca:	60 93 89 06 	sts	0x0689, r22	; 0x800689 <_avr_timer_cntcurr>
     4ce:	70 93 8a 06 	sts	0x068A, r23	; 0x80068a <_avr_timer_cntcurr+0x1>
     4d2:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <_avr_timer_cntcurr+0x2>
     4d6:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <_avr_timer_cntcurr+0x3>
     4da:	08 95       	ret

000004dc <TimerOn>:
     4dc:	8b e0       	ldi	r24, 0x0B	; 11
     4de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     4e2:	8d e7       	ldi	r24, 0x7D	; 125
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     4f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     4f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4fc:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_avr_timer_M>
     500:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <_avr_timer_M+0x1>
     504:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <_avr_timer_M+0x2>
     508:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <_avr_timer_M+0x3>
     50c:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <_avr_timer_cntcurr>
     510:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <_avr_timer_cntcurr+0x1>
     514:	a0 93 8b 06 	sts	0x068B, r26	; 0x80068b <_avr_timer_cntcurr+0x2>
     518:	b0 93 8c 06 	sts	0x068C, r27	; 0x80068c <_avr_timer_cntcurr+0x3>
     51c:	8f b7       	in	r24, 0x3f	; 63
     51e:	80 68       	ori	r24, 0x80	; 128
     520:	8f bf       	out	0x3f, r24	; 63
     522:	08 95       	ret

00000524 <__vector_13>:
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <_avr_timer_cntcurr>
     53a:	90 91 8a 06 	lds	r25, 0x068A	; 0x80068a <_avr_timer_cntcurr+0x1>
     53e:	a0 91 8b 06 	lds	r26, 0x068B	; 0x80068b <_avr_timer_cntcurr+0x2>
     542:	b0 91 8c 06 	lds	r27, 0x068C	; 0x80068c <_avr_timer_cntcurr+0x3>
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	a1 09       	sbc	r26, r1
     54a:	b1 09       	sbc	r27, r1
     54c:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <_avr_timer_cntcurr>
     550:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <_avr_timer_cntcurr+0x1>
     554:	a0 93 8b 06 	sts	0x068B, r26	; 0x80068b <_avr_timer_cntcurr+0x2>
     558:	b0 93 8c 06 	sts	0x068C, r27	; 0x80068c <_avr_timer_cntcurr+0x3>
     55c:	89 2b       	or	r24, r25
     55e:	8a 2b       	or	r24, r26
     560:	8b 2b       	or	r24, r27
     562:	99 f4       	brne	.+38     	; 0x58a <__vector_13+0x66>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <TimerFlag>
     56a:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_avr_timer_M>
     56e:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <_avr_timer_M+0x1>
     572:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <_avr_timer_M+0x2>
     576:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <_avr_timer_M+0x3>
     57a:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <_avr_timer_cntcurr>
     57e:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <_avr_timer_cntcurr+0x1>
     582:	a0 93 8b 06 	sts	0x068B, r26	; 0x80068b <_avr_timer_cntcurr+0x2>
     586:	b0 93 8c 06 	sts	0x068C, r27	; 0x80068c <_avr_timer_cntcurr+0x3>
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <SNES_init>:
     59c:	10 9a       	sbi	0x02, 0	; 2
     59e:	11 9a       	sbi	0x02, 1	; 2
     5a0:	08 95       	ret

000005a2 <SNES_Read>:
     5a2:	11 9a       	sbi	0x02, 1	; 2
     5a4:	10 9a       	sbi	0x02, 0	; 2
     5a6:	11 98       	cbi	0x02, 1	; 2
     5a8:	20 b1       	in	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	20 95       	com	r18
     5ae:	30 95       	com	r19
     5b0:	22 fb       	bst	r18, 2
     5b2:	88 27       	eor	r24, r24
     5b4:	80 f9       	bld	r24, 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	40 e1       	ldi	r20, 0x10	; 16
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	10 98       	cbi	0x02, 0	; 2
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	20 b1       	in	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	20 95       	com	r18
     5c8:	30 95       	com	r19
     5ca:	22 fb       	bst	r18, 2
     5cc:	66 27       	eor	r22, r22
     5ce:	60 f9       	bld	r22, 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	86 2b       	or	r24, r22
     5d4:	97 2b       	or	r25, r23
     5d6:	10 9a       	sbi	0x02, 0	; 2
     5d8:	41 50       	subi	r20, 0x01	; 1
     5da:	51 09       	sbc	r21, r1
     5dc:	79 f7       	brne	.-34     	; 0x5bc <SNES_Read+0x1a>
     5de:	08 95       	ret

000005e0 <TickSNESControl>:
     5e0:	82 30       	cpi	r24, 0x02	; 2
     5e2:	38 f4       	brcc	.+14     	; 0x5f2 <TickSNESControl+0x12>
     5e4:	de df       	rcall	.-68     	; 0x5a2 <SNES_Read>
     5e6:	90 93 8e 04 	sts	0x048E, r25	; 0x80048e <SNESOutput+0x1>
     5ea:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <SNESOutput>
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	08 95       	ret
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <nokia_lcd_init>:
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	51 9a       	sbi	0x0a, 1	; 10
     5fc:	52 9a       	sbi	0x0a, 2	; 10
     5fe:	53 9a       	sbi	0x0a, 3	; 10
     600:	54 9a       	sbi	0x0a, 4	; 10
     602:	55 9a       	sbi	0x0a, 5	; 10
     604:	5a 9a       	sbi	0x0b, 2	; 11
     606:	59 9a       	sbi	0x0b, 1	; 11
     608:	8f e4       	ldi	r24, 0x4F	; 79
     60a:	93 ec       	ldi	r25, 0xC3	; 195
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <nokia_lcd_init+0x16>
     610:	00 c0       	rjmp	.+0      	; 0x612 <nokia_lcd_init+0x1c>
     612:	00 00       	nop
     614:	5a 98       	cbi	0x0b, 2	; 11
     616:	9f eb       	ldi	r25, 0xBF	; 191
     618:	25 e4       	ldi	r18, 0x45	; 69
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	91 50       	subi	r25, 0x01	; 1
     61e:	20 40       	sbci	r18, 0x00	; 0
     620:	80 40       	sbci	r24, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <nokia_lcd_init+0x26>
     624:	00 c0       	rjmp	.+0      	; 0x626 <nokia_lcd_init+0x30>
     626:	00 00       	nop
     628:	5a 9a       	sbi	0x0b, 2	; 11
     62a:	59 98       	cbi	0x0b, 1	; 11
     62c:	81 e2       	ldi	r24, 0x21	; 33
     62e:	7d de       	rcall	.-774    	; 0x32a <write_cmd>
     630:	83 e1       	ldi	r24, 0x13	; 19
     632:	7b de       	rcall	.-778    	; 0x32a <write_cmd>
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	79 de       	rcall	.-782    	; 0x32a <write_cmd>
     638:	82 ec       	ldi	r24, 0xC2	; 194
     63a:	77 de       	rcall	.-786    	; 0x32a <write_cmd>
     63c:	80 e2       	ldi	r24, 0x20	; 32
     63e:	75 de       	rcall	.-790    	; 0x32a <write_cmd>
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	73 de       	rcall	.-794    	; 0x32a <write_cmd>
     644:	80 e8       	ldi	r24, 0x80	; 128
     646:	71 de       	rcall	.-798    	; 0x32a <write_cmd>
     648:	80 e4       	ldi	r24, 0x40	; 64
     64a:	6f de       	rcall	.-802    	; 0x32a <write_cmd>
     64c:	c8 ef       	ldi	r28, 0xF8	; 248
     64e:	d1 e0       	ldi	r29, 0x01	; 1
     650:	61 e0       	ldi	r22, 0x01	; 1
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	4c de       	rcall	.-872    	; 0x2ee <write>
     656:	21 97       	sbiw	r28, 0x01	; 1
     658:	d9 f7       	brne	.-10     	; 0x650 <nokia_lcd_init+0x5a>
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	66 de       	rcall	.-820    	; 0x32a <write_cmd>
     65e:	8c e0       	ldi	r24, 0x0C	; 12
     660:	64 de       	rcall	.-824    	; 0x32a <write_cmd>
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <nokia_lcd_clear>:
     668:	80 e8       	ldi	r24, 0x80	; 128
     66a:	5f de       	rcall	.-834    	; 0x32a <write_cmd>
     66c:	80 e4       	ldi	r24, 0x40	; 64
     66e:	5d de       	rcall	.-838    	; 0x32a <write_cmd>
     670:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <nokia_lcd+0x1f8>
     674:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <nokia_lcd+0x1f9>
     678:	ef e8       	ldi	r30, 0x8F	; 143
     67a:	f4 e0       	ldi	r31, 0x04	; 4
     67c:	87 e8       	ldi	r24, 0x87	; 135
     67e:	96 e0       	ldi	r25, 0x06	; 6
     680:	11 92       	st	Z+, r1
     682:	e8 17       	cp	r30, r24
     684:	f9 07       	cpc	r31, r25
     686:	e1 f7       	brne	.-8      	; 0x680 <nokia_lcd_clear+0x18>
     688:	08 95       	ret

0000068a <nokia_lcd_set_pixel>:
     68a:	26 2f       	mov	r18, r22
     68c:	26 95       	lsr	r18
     68e:	26 95       	lsr	r18
     690:	26 95       	lsr	r18
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	34 e5       	ldi	r19, 0x54	; 84
     696:	23 9f       	mul	r18, r19
     698:	80 0d       	add	r24, r0
     69a:	91 1d       	adc	r25, r1
     69c:	11 24       	eor	r1, r1
     69e:	44 23       	and	r20, r20
     6a0:	79 f0       	breq	.+30     	; 0x6c0 <nokia_lcd_set_pixel+0x36>
     6a2:	fc 01       	movw	r30, r24
     6a4:	e1 57       	subi	r30, 0x71	; 113
     6a6:	fb 4f       	sbci	r31, 0xFB	; 251
     6a8:	67 70       	andi	r22, 0x07	; 7
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <nokia_lcd_set_pixel+0x2a>
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	6a 95       	dec	r22
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <nokia_lcd_set_pixel+0x26>
     6b8:	90 81       	ld	r25, Z
     6ba:	89 2b       	or	r24, r25
     6bc:	80 83       	st	Z, r24
     6be:	08 95       	ret
     6c0:	fc 01       	movw	r30, r24
     6c2:	e1 57       	subi	r30, 0x71	; 113
     6c4:	fb 4f       	sbci	r31, 0xFB	; 251
     6c6:	67 70       	andi	r22, 0x07	; 7
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <nokia_lcd_set_pixel+0x48>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	6a 95       	dec	r22
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <nokia_lcd_set_pixel+0x44>
     6d6:	80 95       	com	r24
     6d8:	90 81       	ld	r25, Z
     6da:	89 23       	and	r24, r25
     6dc:	80 83       	st	Z, r24
     6de:	08 95       	ret

000006e0 <nokia_lcd_write_char>:
     6e0:	5f 92       	push	r5
     6e2:	6f 92       	push	r6
     6e4:	7f 92       	push	r7
     6e6:	8f 92       	push	r8
     6e8:	9f 92       	push	r9
     6ea:	af 92       	push	r10
     6ec:	bf 92       	push	r11
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	56 2e       	mov	r5, r22
     700:	26 2f       	mov	r18, r22
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	49 01       	movw	r8, r18
     706:	88 0c       	add	r8, r8
     708:	99 1c       	adc	r9, r9
     70a:	88 0c       	add	r8, r8
     70c:	99 1c       	adc	r9, r9
     70e:	82 0e       	add	r8, r18
     710:	93 1e       	adc	r9, r19
     712:	18 14       	cp	r1, r8
     714:	19 04       	cpc	r1, r9
     716:	0c f0       	brlt	.+2      	; 0x71a <nokia_lcd_write_char+0x3a>
     718:	5b c0       	rjmp	.+182    	; 0x7d0 <nokia_lcd_write_char+0xf0>
     71a:	89 01       	movw	r16, r18
     71c:	00 0f       	add	r16, r16
     71e:	11 1f       	adc	r17, r17
     720:	00 0f       	add	r16, r16
     722:	11 1f       	adc	r17, r17
     724:	00 0f       	add	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	02 1b       	sub	r16, r18
     72a:	13 0b       	sbc	r17, r19
     72c:	61 2c       	mov	r6, r1
     72e:	a8 2e       	mov	r10, r24
     730:	b1 2c       	mov	r11, r1
     732:	c5 01       	movw	r24, r10
     734:	80 97       	sbiw	r24, 0x20	; 32
     736:	5c 01       	movw	r10, r24
     738:	aa 0c       	add	r10, r10
     73a:	bb 1c       	adc	r11, r11
     73c:	aa 0c       	add	r10, r10
     73e:	bb 1c       	adc	r11, r11
     740:	a8 0e       	add	r10, r24
     742:	b9 1e       	adc	r11, r25
     744:	0f 2e       	mov	r0, r31
     746:	f8 e8       	ldi	r31, 0x88	; 136
     748:	cf 2e       	mov	r12, r31
     74a:	f6 e0       	ldi	r31, 0x06	; 6
     74c:	df 2e       	mov	r13, r31
     74e:	f0 2d       	mov	r31, r0
     750:	0f 2e       	mov	r0, r31
     752:	f7 e8       	ldi	r31, 0x87	; 135
     754:	ef 2e       	mov	r14, r31
     756:	f6 e0       	ldi	r31, 0x06	; 6
     758:	ff 2e       	mov	r15, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	2b c0       	rjmp	.+86     	; 0x7b4 <nokia_lcd_write_char+0xd4>
     75e:	fe 01       	movw	r30, r28
     760:	24 91       	lpm	r18, Z
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	87 2d       	mov	r24, r7
     766:	65 2d       	mov	r22, r5
     768:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__udivmodqi4>
     76c:	02 c0       	rjmp	.+4      	; 0x772 <nokia_lcd_write_char+0x92>
     76e:	35 95       	asr	r19
     770:	27 95       	ror	r18
     772:	8a 95       	dec	r24
     774:	e2 f7       	brpl	.-8      	; 0x76e <nokia_lcd_write_char+0x8e>
     776:	20 ff       	sbrs	r18, 0
     778:	09 c0       	rjmp	.+18     	; 0x78c <nokia_lcd_write_char+0xac>
     77a:	f6 01       	movw	r30, r12
     77c:	60 81       	ld	r22, Z
     77e:	67 0d       	add	r22, r7
     780:	f7 01       	movw	r30, r14
     782:	80 81       	ld	r24, Z
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	86 0d       	add	r24, r6
     788:	80 df       	rcall	.-256    	; 0x68a <nokia_lcd_set_pixel>
     78a:	08 c0       	rjmp	.+16     	; 0x79c <nokia_lcd_write_char+0xbc>
     78c:	f6 01       	movw	r30, r12
     78e:	60 81       	ld	r22, Z
     790:	67 0d       	add	r22, r7
     792:	f7 01       	movw	r30, r14
     794:	80 81       	ld	r24, Z
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	86 0d       	add	r24, r6
     79a:	77 df       	rcall	.-274    	; 0x68a <nokia_lcd_set_pixel>
     79c:	73 94       	inc	r7
     79e:	87 2d       	mov	r24, r7
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	80 17       	cp	r24, r16
     7a4:	91 07       	cpc	r25, r17
     7a6:	dc f2       	brlt	.-74     	; 0x75e <nokia_lcd_write_char+0x7e>
     7a8:	63 94       	inc	r6
     7aa:	86 2d       	mov	r24, r6
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	88 15       	cp	r24, r8
     7b0:	99 05       	cpc	r25, r9
     7b2:	74 f4       	brge	.+28     	; 0x7d0 <nokia_lcd_write_char+0xf0>
     7b4:	10 16       	cp	r1, r16
     7b6:	11 06       	cpc	r1, r17
     7b8:	bc f7       	brge	.-18     	; 0x7a8 <nokia_lcd_write_char+0xc8>
     7ba:	86 2d       	mov	r24, r6
     7bc:	65 2d       	mov	r22, r5
     7be:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__udivmodqi4>
     7c2:	e5 01       	movw	r28, r10
     7c4:	c8 0f       	add	r28, r24
     7c6:	d1 1d       	adc	r29, r1
     7c8:	c2 53       	subi	r28, 0x32	; 50
     7ca:	df 4f       	sbci	r29, 0xFF	; 255
     7cc:	71 2c       	mov	r7, r1
     7ce:	c7 cf       	rjmp	.-114    	; 0x75e <nokia_lcd_write_char+0x7e>
     7d0:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <nokia_lcd+0x1f8>
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	98 0f       	add	r25, r24
     7d8:	85 2d       	mov	r24, r5
     7da:	88 0f       	add	r24, r24
     7dc:	88 0f       	add	r24, r24
     7de:	85 0d       	add	r24, r5
     7e0:	89 0f       	add	r24, r25
     7e2:	84 35       	cpi	r24, 0x54	; 84
     7e4:	18 f4       	brcc	.+6      	; 0x7ec <nokia_lcd_write_char+0x10c>
     7e6:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <nokia_lcd+0x1f8>
     7ea:	0e c0       	rjmp	.+28     	; 0x808 <nokia_lcd_write_char+0x128>
     7ec:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <nokia_lcd+0x1f8>
     7f0:	e8 e8       	ldi	r30, 0x88	; 136
     7f2:	f6 e0       	ldi	r31, 0x06	; 6
     7f4:	80 81       	ld	r24, Z
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	98 0f       	add	r25, r24
     7fa:	85 2d       	mov	r24, r5
     7fc:	88 0f       	add	r24, r24
     7fe:	88 0f       	add	r24, r24
     800:	88 0f       	add	r24, r24
     802:	85 19       	sub	r24, r5
     804:	89 0f       	add	r24, r25
     806:	80 83       	st	Z, r24
     808:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <nokia_lcd+0x1f9>
     80c:	80 33       	cpi	r24, 0x30	; 48
     80e:	20 f0       	brcs	.+8      	; 0x818 <nokia_lcd_write_char+0x138>
     810:	10 92 87 06 	sts	0x0687, r1	; 0x800687 <nokia_lcd+0x1f8>
     814:	10 92 88 06 	sts	0x0688, r1	; 0x800688 <nokia_lcd+0x1f9>
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	9f 90       	pop	r9
     82e:	8f 90       	pop	r8
     830:	7f 90       	pop	r7
     832:	6f 90       	pop	r6
     834:	5f 90       	pop	r5
     836:	08 95       	ret

00000838 <nokia_lcd_write_string>:
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	ec 01       	movw	r28, r24
     840:	88 81       	ld	r24, Y
     842:	88 23       	and	r24, r24
     844:	39 f0       	breq	.+14     	; 0x854 <nokia_lcd_write_string+0x1c>
     846:	16 2f       	mov	r17, r22
     848:	21 96       	adiw	r28, 0x01	; 1
     84a:	61 2f       	mov	r22, r17
     84c:	49 df       	rcall	.-366    	; 0x6e0 <nokia_lcd_write_char>
     84e:	89 91       	ld	r24, Y+
     850:	81 11       	cpse	r24, r1
     852:	fb cf       	rjmp	.-10     	; 0x84a <nokia_lcd_write_string+0x12>
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	08 95       	ret

0000085c <nokia_lcd_render>:
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	80 e8       	ldi	r24, 0x80	; 128
     866:	61 dd       	rcall	.-1342   	; 0x32a <write_cmd>
     868:	80 e4       	ldi	r24, 0x40	; 64
     86a:	5f dd       	rcall	.-1346   	; 0x32a <write_cmd>
     86c:	cf e8       	ldi	r28, 0x8F	; 143
     86e:	d4 e0       	ldi	r29, 0x04	; 4
     870:	07 e8       	ldi	r16, 0x87	; 135
     872:	16 e0       	ldi	r17, 0x06	; 6
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	89 91       	ld	r24, Y+
     878:	3a dd       	rcall	.-1420   	; 0x2ee <write>
     87a:	c0 17       	cp	r28, r16
     87c:	d1 07       	cpc	r29, r17
     87e:	d1 f7       	brne	.-12     	; 0x874 <nokia_lcd_render+0x18>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	08 95       	ret

0000088a <set_PWM>:
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	6b 01       	movw	r12, r22
     894:	7c 01       	movw	r14, r24
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <current_frequency.2328>
     89e:	70 91 75 04 	lds	r23, 0x0475	; 0x800475 <current_frequency.2328+0x1>
     8a2:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <current_frequency.2328+0x2>
     8a6:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <current_frequency.2328+0x3>
     8aa:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__cmpsf2>
     8ae:	88 23       	and	r24, r24
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <set_PWM+0x2a>
     8b2:	46 c0       	rjmp	.+140    	; 0x940 <set_PWM+0xb6>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	a9 01       	movw	r20, r18
     8ba:	c7 01       	movw	r24, r14
     8bc:	b6 01       	movw	r22, r12
     8be:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__cmpsf2>
     8c2:	81 11       	cpse	r24, r1
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <set_PWM+0x44>
     8c6:	85 b5       	in	r24, 0x25	; 37
     8c8:	88 70       	andi	r24, 0x08	; 8
     8ca:	85 bd       	out	0x25, r24	; 37
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <set_PWM+0x4a>
     8ce:	85 b5       	in	r24, 0x25	; 37
     8d0:	83 60       	ori	r24, 0x03	; 3
     8d2:	85 bd       	out	0x25, r24	; 37
     8d4:	28 e5       	ldi	r18, 0x58	; 88
     8d6:	39 e3       	ldi	r19, 0x39	; 57
     8d8:	44 e7       	ldi	r20, 0x74	; 116
     8da:	5f e3       	ldi	r21, 0x3F	; 63
     8dc:	c7 01       	movw	r24, r14
     8de:	b6 01       	movw	r22, r12
     8e0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__cmpsf2>
     8e4:	88 23       	and	r24, r24
     8e6:	1c f4       	brge	.+6      	; 0x8ee <set_PWM+0x64>
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	87 bd       	out	0x27, r24	; 39
     8ec:	20 c0       	rjmp	.+64     	; 0x92e <set_PWM+0xa4>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	34 e2       	ldi	r19, 0x24	; 36
     8f2:	44 ef       	ldi	r20, 0xF4	; 244
     8f4:	56 e4       	ldi	r21, 0x46	; 70
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__gesf2>
     8fe:	18 16       	cp	r1, r24
     900:	14 f4       	brge	.+4      	; 0x906 <set_PWM+0x7c>
     902:	17 bc       	out	0x27, r1	; 39
     904:	14 c0       	rjmp	.+40     	; 0x92e <set_PWM+0xa4>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	53 e4       	ldi	r21, 0x43	; 67
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	0e 94 ef 12 	call	0x25de	; 0x25de <__mulsf3>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	74 e2       	ldi	r23, 0x24	; 36
     91e:	84 ef       	ldi	r24, 0xF4	; 244
     920:	9a e4       	ldi	r25, 0x4A	; 74
     922:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__divsf3>
     926:	0e 94 45 12 	call	0x248a	; 0x248a <__fixsfsi>
     92a:	61 50       	subi	r22, 0x01	; 1
     92c:	67 bd       	out	0x27, r22	; 39
     92e:	16 bc       	out	0x26, r1	; 38
     930:	c0 92 74 04 	sts	0x0474, r12	; 0x800474 <current_frequency.2328>
     934:	d0 92 75 04 	sts	0x0475, r13	; 0x800475 <current_frequency.2328+0x1>
     938:	e0 92 76 04 	sts	0x0476, r14	; 0x800476 <current_frequency.2328+0x2>
     93c:	f0 92 77 04 	sts	0x0477, r15	; 0x800477 <current_frequency.2328+0x3>
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	08 95       	ret

0000094a <TickSound>:
     94a:	cf 93       	push	r28
     94c:	c8 2f       	mov	r28, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	87 30       	cpi	r24, 0x07	; 7
     952:	91 05       	cpc	r25, r1
     954:	08 f0       	brcs	.+2      	; 0x958 <TickSound+0xe>
     956:	0e c1       	rjmp	.+540    	; 0xb74 <TickSound+0x22a>
     958:	fc 01       	movw	r30, r24
     95a:	ea 5b       	subi	r30, 0xBA	; 186
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__tablejump2__>
     962:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     966:	84 30       	cpi	r24, 0x04	; 4
     968:	09 f0       	breq	.+2      	; 0x96c <TickSound+0x22>
     96a:	4c c0       	rjmp	.+152    	; 0xa04 <TickSound+0xba>
     96c:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <soundQueueSize>
     970:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <soundQueueStart>
     974:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <soundQueueEnd>
     978:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <soundQueueCount+0x1>
     97c:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <soundQueueCount>
     980:	bc c0       	rjmp	.+376    	; 0xafa <TickSound+0x1b0>
     982:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	e9 f1       	breq	.+122    	; 0xa04 <TickSound+0xba>
     98a:	85 30       	cpi	r24, 0x05	; 5
     98c:	09 f4       	brne	.+2      	; 0x990 <TickSound+0x46>
     98e:	44 c0       	rjmp	.+136    	; 0xa18 <TickSound+0xce>
     990:	86 30       	cpi	r24, 0x06	; 6
     992:	51 f4       	brne	.+20     	; 0x9a8 <TickSound+0x5e>
     994:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <noteIndex>
     998:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <countSound+0x1>
     99c:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <countSound>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	b3 c0       	rjmp	.+358    	; 0xb0e <TickSound+0x1c4>
     9a8:	89 30       	cpi	r24, 0x09	; 9
     9aa:	09 f0       	breq	.+2      	; 0x9ae <TickSound+0x64>
     9ac:	ed c0       	rjmp	.+474    	; 0xb88 <TickSound+0x23e>
     9ae:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <noteIndex>
     9b2:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <countSound+0x1>
     9b6:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <countSound>
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	35 c0       	rjmp	.+106    	; 0xa2c <TickSound+0xe2>
     9c2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	09 f0       	breq	.+2      	; 0x9cc <TickSound+0x82>
     9ca:	e3 c0       	rjmp	.+454    	; 0xb92 <TickSound+0x248>
     9cc:	1b c0       	rjmp	.+54     	; 0xa04 <TickSound+0xba>
     9ce:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     9d2:	84 30       	cpi	r24, 0x04	; 4
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <TickSound+0x8e>
     9d6:	d0 c0       	rjmp	.+416    	; 0xb78 <TickSound+0x22e>
     9d8:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <soundQueueSize>
     9dc:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <soundQueueStart>
     9e0:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <soundQueueEnd>
     9e4:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <soundQueueCount+0x1>
     9e8:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <soundQueueCount>
     9ec:	86 c0       	rjmp	.+268    	; 0xafa <TickSound+0x1b0>
     9ee:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	89 f4       	brne	.+34     	; 0xa18 <TickSound+0xce>
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <TickSound+0xba>
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	cb 01       	movw	r24, r22
     9fe:	45 df       	rcall	.-374    	; 0x88a <set_PWM>
     a00:	c1 e0       	ldi	r28, 0x01	; 1
     a02:	cf c0       	rjmp	.+414    	; 0xba2 <TickSound+0x258>
     a04:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <freqOut>
     a08:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <freqOut+0x1>
     a0c:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <freqOut+0x2>
     a10:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <freqOut+0x3>
     a14:	c2 e0       	ldi	r28, 0x02	; 2
     a16:	c5 c0       	rjmp	.+394    	; 0xba2 <TickSound+0x258>
     a18:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <freqOut>
     a1c:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <freqOut+0x1>
     a20:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <freqOut+0x2>
     a24:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <freqOut+0x3>
     a28:	c4 e0       	ldi	r28, 0x04	; 4
     a2a:	bb c0       	rjmp	.+374    	; 0xba2 <TickSound+0x258>
     a2c:	fc 01       	movw	r30, r24
     a2e:	e0 5b       	subi	r30, 0xB0	; 176
     a30:	fe 4f       	sbci	r31, 0xFE	; 254
     a32:	80 81       	ld	r24, Z
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	40 91 7c 04 	lds	r20, 0x047C	; 0x80047c <countSound>
     a3a:	50 91 7d 04 	lds	r21, 0x047D	; 0x80047d <countSound+0x1>
     a3e:	84 17       	cp	r24, r20
     a40:	95 07       	cpc	r25, r21
     a42:	38 f0       	brcs	.+14     	; 0xa52 <TickSound+0x108>
     a44:	2f 5f       	subi	r18, 0xFF	; 255
     a46:	20 93 cf 06 	sts	0x06CF, r18	; 0x8006cf <noteIndex>
     a4a:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <countSound+0x1>
     a4e:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <countSound>
     a52:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <noteIndex>
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	e2 56       	subi	r30, 0x62	; 98
     a62:	fe 4f       	sbci	r31, 0xFE	; 254
     a64:	80 81       	ld	r24, Z
     a66:	91 81       	ldd	r25, Z+1	; 0x01
     a68:	a2 81       	ldd	r26, Z+2	; 0x02
     a6a:	b3 81       	ldd	r27, Z+3	; 0x03
     a6c:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <freqOut>
     a70:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <freqOut+0x1>
     a74:	a0 93 7a 04 	sts	0x047A, r26	; 0x80047a <freqOut+0x2>
     a78:	b0 93 7b 04 	sts	0x047B, r27	; 0x80047b <freqOut+0x3>
     a7c:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <countSound>
     a80:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <countSound+0x1>
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <countSound+0x1>
     a8a:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <countSound>
     a8e:	c6 e0       	ldi	r28, 0x06	; 6
     a90:	88 c0       	rjmp	.+272    	; 0xba2 <TickSound+0x258>
     a92:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <soundQueueCount>
     a96:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <soundQueueCount+0x1>
     a9a:	83 30       	cpi	r24, 0x03	; 3
     a9c:	91 05       	cpc	r25, r1
     a9e:	d8 f4       	brcc	.+54     	; 0xad6 <TickSound+0x18c>
     aa0:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <soundQueueStart>
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	ee 0f       	add	r30, r30
     aa8:	ff 1f       	adc	r31, r31
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	e7 55       	subi	r30, 0x57	; 87
     ab0:	f9 4f       	sbci	r31, 0xF9	; 249
     ab2:	40 81       	ld	r20, Z
     ab4:	51 81       	ldd	r21, Z+1	; 0x01
     ab6:	62 81       	ldd	r22, Z+2	; 0x02
     ab8:	73 81       	ldd	r23, Z+3	; 0x03
     aba:	40 93 78 04 	sts	0x0478, r20	; 0x800478 <freqOut>
     abe:	50 93 79 04 	sts	0x0479, r21	; 0x800479 <freqOut+0x1>
     ac2:	60 93 7a 04 	sts	0x047A, r22	; 0x80047a <freqOut+0x2>
     ac6:	70 93 7b 04 	sts	0x047B, r23	; 0x80047b <freqOut+0x3>
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <soundQueueCount+0x1>
     ad0:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <soundQueueCount>
     ad4:	66 c0       	rjmp	.+204    	; 0xba2 <TickSound+0x258>
     ad6:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <soundQueueStart>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	18 f0       	brcs	.+6      	; 0xae4 <TickSound+0x19a>
     ade:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <soundQueueStart>
     ae2:	03 c0       	rjmp	.+6      	; 0xaea <TickSound+0x1a0>
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <soundQueueStart>
     aea:	21 50       	subi	r18, 0x01	; 1
     aec:	20 93 80 04 	sts	0x0480, r18	; 0x800480 <soundQueueSize>
     af0:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <soundQueueCount+0x1>
     af4:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <soundQueueCount>
     af8:	54 c0       	rjmp	.+168    	; 0xba2 <TickSound+0x258>
     afa:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <freqOut>
     afe:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <freqOut+0x1>
     b02:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <freqOut+0x2>
     b06:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <freqOut+0x3>
     b0a:	c3 e0       	ldi	r28, 0x03	; 3
     b0c:	4a c0       	rjmp	.+148    	; 0xba2 <TickSound+0x258>
     b0e:	fc 01       	movw	r30, r24
     b10:	e0 50       	subi	r30, 0x00	; 0
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	80 81       	ld	r24, Z
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	40 91 7c 04 	lds	r20, 0x047C	; 0x80047c <countSound>
     b1c:	50 91 7d 04 	lds	r21, 0x047D	; 0x80047d <countSound+0x1>
     b20:	84 17       	cp	r24, r20
     b22:	95 07       	cpc	r25, r21
     b24:	38 f0       	brcs	.+14     	; 0xb34 <TickSound+0x1ea>
     b26:	2f 5f       	subi	r18, 0xFF	; 255
     b28:	20 93 cf 06 	sts	0x06CF, r18	; 0x8006cf <noteIndex>
     b2c:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <countSound+0x1>
     b30:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <countSound>
     b34:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <noteIndex>
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	e0 5f       	subi	r30, 0xF0	; 240
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	a2 81       	ldd	r26, Z+2	; 0x02
     b4c:	b3 81       	ldd	r27, Z+3	; 0x03
     b4e:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <freqOut>
     b52:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <freqOut+0x1>
     b56:	a0 93 7a 04 	sts	0x047A, r26	; 0x80047a <freqOut+0x2>
     b5a:	b0 93 7b 04 	sts	0x047B, r27	; 0x80047b <freqOut+0x3>
     b5e:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <countSound>
     b62:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <countSound+0x1>
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <countSound+0x1>
     b6c:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <countSound>
     b70:	c5 e0       	ldi	r28, 0x05	; 5
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <TickSound+0x258>
     b74:	c0 e0       	ldi	r28, 0x00	; 0
     b76:	15 c0       	rjmp	.+42     	; 0xba2 <TickSound+0x258>
     b78:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <noteIndex>
     b7c:	82 2f       	mov	r24, r18
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	8f 30       	cpi	r24, 0x0F	; 15
     b82:	91 05       	cpc	r25, r1
     b84:	24 f2       	brlt	.-120    	; 0xb0e <TickSound+0x1c4>
     b86:	0d c0       	rjmp	.+26     	; 0xba2 <TickSound+0x258>
     b88:	20 91 80 04 	lds	r18, 0x0480	; 0x800480 <soundQueueSize>
     b8c:	21 11       	cpse	r18, r1
     b8e:	81 cf       	rjmp	.-254    	; 0xa92 <TickSound+0x148>
     b90:	b4 cf       	rjmp	.-152    	; 0xafa <TickSound+0x1b0>
     b92:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <noteIndex>
     b96:	82 2f       	mov	r24, r18
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	8d 34       	cpi	r24, 0x4D	; 77
     b9c:	91 05       	cpc	r25, r1
     b9e:	0c f4       	brge	.+2      	; 0xba2 <TickSound+0x258>
     ba0:	45 cf       	rjmp	.-374    	; 0xa2c <TickSound+0xe2>
     ba2:	60 91 78 04 	lds	r22, 0x0478	; 0x800478 <freqOut>
     ba6:	70 91 79 04 	lds	r23, 0x0479	; 0x800479 <freqOut+0x1>
     baa:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <freqOut+0x2>
     bae:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <freqOut+0x3>
     bb2:	6b de       	rcall	.-810    	; 0x88a <set_PWM>
     bb4:	8c 2f       	mov	r24, r28
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <PWM_on>:
     bba:	89 e4       	ldi	r24, 0x49	; 73
     bbc:	84 bd       	out	0x24, r24	; 36
     bbe:	8b e0       	ldi	r24, 0x0B	; 11
     bc0:	85 bd       	out	0x25, r24	; 37
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	cb 01       	movw	r24, r22
     bc8:	60 ce       	rjmp	.-832    	; 0x88a <set_PWM>
     bca:	08 95       	ret

00000bcc <transferObjToDis>:
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
     bcc:	2f 92       	push	r2
     bce:	3f 92       	push	r3
     bd0:	4f 92       	push	r4
     bd2:	5f 92       	push	r5
     bd4:	6f 92       	push	r6
     bd6:	7f 92       	push	r7
     bd8:	8f 92       	push	r8
     bda:	9f 92       	push	r9
     bdc:	af 92       	push	r10
     bde:	bf 92       	push	r11
     be0:	cf 92       	push	r12
     be2:	df 92       	push	r13
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <transferObjToDis+0x26>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <transferObjToDis+0x28>
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <transferObjToDis+0x2a>
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	84 e9       	ldi	r24, 0x94	; 148
     bfc:	96 e1       	ldi	r25, 0x16	; 22
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	0f 2e       	mov	r0, r31
     c04:	f8 ea       	ldi	r31, 0xA8	; 168
     c06:	af 2e       	mov	r10, r31
     c08:	f3 e0       	ldi	r31, 0x03	; 3
     c0a:	bf 2e       	mov	r11, r31
     c0c:	f0 2d       	mov	r31, r0
     c0e:	0f 2e       	mov	r0, r31
     c10:	f0 ec       	ldi	r31, 0xC0	; 192
     c12:	8f 2e       	mov	r8, r31
     c14:	f3 e0       	ldi	r31, 0x03	; 3
     c16:	9f 2e       	mov	r9, r31
     c18:	f0 2d       	mov	r31, r0
     c1a:	0f 2e       	mov	r0, r31
     c1c:	f0 e6       	ldi	r31, 0x60	; 96
     c1e:	6f 2e       	mov	r6, r31
     c20:	f3 e0       	ldi	r31, 0x03	; 3
     c22:	7f 2e       	mov	r7, r31
     c24:	f0 2d       	mov	r31, r0
     c26:	0f 2e       	mov	r0, r31
     c28:	f0 e3       	ldi	r31, 0x30	; 48
     c2a:	4f 2e       	mov	r4, r31
     c2c:	f3 e0       	ldi	r31, 0x03	; 3
     c2e:	5f 2e       	mov	r5, r31
     c30:	f0 2d       	mov	r31, r0
     c32:	40 e9       	ldi	r20, 0x90	; 144
     c34:	53 e0       	ldi	r21, 0x03	; 3
     c36:	1c 01       	movw	r2, r24
     c38:	7a 83       	std	Y+2, r23	; 0x02
     c3a:	69 83       	std	Y+1, r22	; 0x01
     c3c:	6a c1       	rjmp	.+724    	; 0xf12 <transferObjToDis+0x346>
     c3e:	ed 91       	ld	r30, X+
     c40:	ce 2e       	mov	r12, r30
     c42:	d1 2c       	mov	r13, r1
     c44:	89 e0       	ldi	r24, 0x09	; 9
     c46:	c8 16       	cp	r12, r24
     c48:	d1 04       	cpc	r13, r1
     c4a:	68 f4       	brcc	.+26     	; 0xc66 <transferObjToDis+0x9a>
     c4c:	f6 01       	movw	r30, r12
     c4e:	e3 5b       	subi	r30, 0xB3	; 179
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__tablejump2__>
     c56:	69 81       	ldd	r22, Y+1	; 0x01
     c58:	7a 81       	ldd	r23, Y+2	; 0x02
     c5a:	62 0f       	add	r22, r18
     c5c:	73 1f       	adc	r23, r19
     c5e:	6d 52       	subi	r22, 0x2D	; 45
     c60:	79 4f       	sbci	r23, 0xF9	; 249
     c62:	9c e0       	ldi	r25, 0x0C	; 12
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <transferObjToDis+0xbc>
     c66:	69 81       	ldd	r22, Y+1	; 0x01
     c68:	7a 81       	ldd	r23, Y+2	; 0x02
     c6a:	62 0f       	add	r22, r18
     c6c:	73 1f       	adc	r23, r19
     c6e:	6d 52       	subi	r22, 0x2D	; 45
     c70:	79 4f       	sbci	r23, 0xF9	; 249
     c72:	9c e0       	ldi	r25, 0x0C	; 12
     c74:	37 c1       	rjmp	.+622    	; 0xee4 <transferObjToDis+0x318>
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = 0x0000;
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     c76:	11 92       	st	Z+, r1
     c78:	81 50       	subi	r24, 0x01	; 1
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = 0x0000;
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     c7a:	e9 f7       	brne	.-6      	; 0xc76 <transferObjToDis+0xaa>
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	6c 5a       	subi	r22, 0xAC	; 172
     c80:	7f 4f       	sbci	r23, 0xFF	; 255
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     c82:	99 23       	and	r25, r25
     c84:	09 f4       	brne	.+2      	; 0xc88 <transferObjToDis+0xbc>
     c86:	31 c1       	rjmp	.+610    	; 0xeea <transferObjToDis+0x31e>
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
     c88:	fb 01       	movw	r30, r22
     c8a:	8c e0       	ldi	r24, 0x0C	; 12
     c8c:	f4 cf       	rjmp	.-24     	; 0xc76 <transferObjToDis+0xaa>
     c8e:	e8 e7       	ldi	r30, 0x78	; 120
     c90:	f3 e0       	ldi	r31, 0x03	; 3
     c92:	fc 83       	std	Y+4, r31	; 0x04
     c94:	eb 83       	std	Y+3, r30	; 0x03
     c96:	69 81       	ldd	r22, Y+1	; 0x01
     c98:	7a 81       	ldd	r23, Y+2	; 0x02
     c9a:	62 0f       	add	r22, r18
     c9c:	73 1f       	adc	r23, r19
     c9e:	6d 52       	subi	r22, 0x2D	; 45
     ca0:	79 4f       	sbci	r23, 0xF9	; 249
     ca2:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
     ca4:	f7 01       	movw	r30, r14
     ca6:	c1 90       	ld	r12, Z+
     ca8:	d1 90       	ld	r13, Z+
     caa:	7f 01       	movw	r14, r30
     cac:	8b 01       	movw	r16, r22
     cae:	8c e0       	ldi	r24, 0x0C	; 12
     cb0:	f6 01       	movw	r30, r12
     cb2:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     cb4:	9e 2f       	mov	r25, r30
     cb6:	91 70       	andi	r25, 0x01	; 1
     cb8:	d8 01       	movw	r26, r16
     cba:	9d 93       	st	X+, r25
     cbc:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     cbe:	f6 95       	lsr	r31
     cc0:	e7 95       	ror	r30
     cc2:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     cc4:	b9 f7       	brne	.-18     	; 0xcb4 <transferObjToDis+0xe8>
     cc6:	d6 01       	movw	r26, r12
     cc8:	6c 5a       	subi	r22, 0xAC	; 172
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     ccc:	4e 15       	cp	r20, r14
     cce:	5f 05       	cpc	r21, r15
     cd0:	49 f7       	brne	.-46     	; 0xca4 <transferObjToDis+0xd8>
     cd2:	0b c1       	rjmp	.+534    	; 0xeea <transferObjToDis+0x31e>
     cd4:	e8 e7       	ldi	r30, 0x78	; 120
     cd6:	f3 e0       	ldi	r31, 0x03	; 3
     cd8:	fc 83       	std	Y+4, r31	; 0x04
     cda:	eb 83       	std	Y+3, r30	; 0x03
     cdc:	69 81       	ldd	r22, Y+1	; 0x01
     cde:	7a 81       	ldd	r23, Y+2	; 0x02
     ce0:	62 0f       	add	r22, r18
     ce2:	73 1f       	adc	r23, r19
     ce4:	6d 52       	subi	r22, 0x2D	; 45
     ce6:	79 4f       	sbci	r23, 0xF9	; 249
     ce8:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
     cea:	f7 01       	movw	r30, r14
     cec:	c1 90       	ld	r12, Z+
     cee:	d1 90       	ld	r13, Z+
     cf0:	7f 01       	movw	r14, r30
     cf2:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	f6 01       	movw	r30, r12
     cf8:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     cfa:	9e 2f       	mov	r25, r30
     cfc:	91 70       	andi	r25, 0x01	; 1
     cfe:	d8 01       	movw	r26, r16
     d00:	9d 93       	st	X+, r25
     d02:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     d04:	f6 95       	lsr	r31
     d06:	e7 95       	ror	r30
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	8c 30       	cpi	r24, 0x0C	; 12
     d0c:	b1 f7       	brne	.-20     	; 0xcfa <transferObjToDis+0x12e>
     d0e:	d6 01       	movw	r26, r12
     d10:	6c 5a       	subi	r22, 0xAC	; 172
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     d14:	4e 15       	cp	r20, r14
     d16:	5f 05       	cpc	r21, r15
     d18:	41 f7       	brne	.-48     	; 0xcea <transferObjToDis+0x11e>
     d1a:	e7 c0       	rjmp	.+462    	; 0xeea <transferObjToDis+0x31e>
     d1c:	e8 e1       	ldi	r30, 0x18	; 24
     d1e:	f3 e0       	ldi	r31, 0x03	; 3
     d20:	fc 83       	std	Y+4, r31	; 0x04
     d22:	eb 83       	std	Y+3, r30	; 0x03
     d24:	69 81       	ldd	r22, Y+1	; 0x01
     d26:	7a 81       	ldd	r23, Y+2	; 0x02
     d28:	62 0f       	add	r22, r18
     d2a:	73 1f       	adc	r23, r19
     d2c:	6d 52       	subi	r22, 0x2D	; 45
     d2e:	79 4f       	sbci	r23, 0xF9	; 249
     d30:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = door_img[tileY];
     d32:	f7 01       	movw	r30, r14
     d34:	c1 90       	ld	r12, Z+
     d36:	d1 90       	ld	r13, Z+
     d38:	7f 01       	movw	r14, r30
     d3a:	8b 01       	movw	r16, r22
     d3c:	8c e0       	ldi	r24, 0x0C	; 12
     d3e:	f6 01       	movw	r30, r12
     d40:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     d42:	9e 2f       	mov	r25, r30
     d44:	91 70       	andi	r25, 0x01	; 1
     d46:	d8 01       	movw	r26, r16
     d48:	9d 93       	st	X+, r25
     d4a:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     d4c:	f6 95       	lsr	r31
     d4e:	e7 95       	ror	r30
     d50:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = door_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     d52:	b9 f7       	brne	.-18     	; 0xd42 <transferObjToDis+0x176>
     d54:	d6 01       	movw	r26, r12
     d56:	6c 5a       	subi	r22, 0xAC	; 172
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     d5a:	4e 14       	cp	r4, r14
     d5c:	5f 04       	cpc	r5, r15
     d5e:	49 f7       	brne	.-46     	; 0xd32 <transferObjToDis+0x166>
     d60:	c4 c0       	rjmp	.+392    	; 0xeea <transferObjToDis+0x31e>
     d62:	e8 e4       	ldi	r30, 0x48	; 72
     d64:	f3 e0       	ldi	r31, 0x03	; 3
     d66:	fc 83       	std	Y+4, r31	; 0x04
     d68:	eb 83       	std	Y+3, r30	; 0x03
     d6a:	69 81       	ldd	r22, Y+1	; 0x01
     d6c:	7a 81       	ldd	r23, Y+2	; 0x02
     d6e:	62 0f       	add	r22, r18
     d70:	73 1f       	adc	r23, r19
     d72:	6d 52       	subi	r22, 0x2D	; 45
     d74:	79 4f       	sbci	r23, 0xF9	; 249
     d76:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = block_img[tileY];
     d78:	f7 01       	movw	r30, r14
     d7a:	c1 90       	ld	r12, Z+
     d7c:	d1 90       	ld	r13, Z+
     d7e:	7f 01       	movw	r14, r30
     d80:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	f6 01       	movw	r30, r12
     d86:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     d88:	9e 2f       	mov	r25, r30
     d8a:	91 70       	andi	r25, 0x01	; 1
     d8c:	d8 01       	movw	r26, r16
     d8e:	9d 93       	st	X+, r25
     d90:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     d92:	f6 95       	lsr	r31
     d94:	e7 95       	ror	r30
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = block_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	8c 30       	cpi	r24, 0x0C	; 12
     d9a:	b1 f7       	brne	.-20     	; 0xd88 <transferObjToDis+0x1bc>
     d9c:	d6 01       	movw	r26, r12
     d9e:	6c 5a       	subi	r22, 0xAC	; 172
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     da2:	6e 14       	cp	r6, r14
     da4:	7f 04       	cpc	r7, r15
     da6:	41 f7       	brne	.-48     	; 0xd78 <transferObjToDis+0x1ac>
     da8:	a0 c0       	rjmp	.+320    	; 0xeea <transferObjToDis+0x31e>
     daa:	e8 ea       	ldi	r30, 0xA8	; 168
     dac:	f3 e0       	ldi	r31, 0x03	; 3
     dae:	fc 83       	std	Y+4, r31	; 0x04
     db0:	eb 83       	std	Y+3, r30	; 0x03
     db2:	69 81       	ldd	r22, Y+1	; 0x01
     db4:	7a 81       	ldd	r23, Y+2	; 0x02
     db6:	62 0f       	add	r22, r18
     db8:	73 1f       	adc	r23, r19
     dba:	6d 52       	subi	r22, 0x2D	; 45
     dbc:	79 4f       	sbci	r23, 0xF9	; 249
     dbe:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bombperson_img[tileY];
     dc0:	f7 01       	movw	r30, r14
     dc2:	c1 90       	ld	r12, Z+
     dc4:	d1 90       	ld	r13, Z+
     dc6:	7f 01       	movw	r14, r30
     dc8:	8b 01       	movw	r16, r22
     dca:	8c e0       	ldi	r24, 0x0C	; 12
     dcc:	f6 01       	movw	r30, r12
     dce:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     dd0:	9e 2f       	mov	r25, r30
     dd2:	91 70       	andi	r25, 0x01	; 1
     dd4:	d8 01       	movw	r26, r16
     dd6:	9d 93       	st	X+, r25
     dd8:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     dda:	f6 95       	lsr	r31
     ddc:	e7 95       	ror	r30
     dde:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bombperson_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     de0:	b9 f7       	brne	.-18     	; 0xdd0 <transferObjToDis+0x204>
     de2:	d6 01       	movw	r26, r12
     de4:	6c 5a       	subi	r22, 0xAC	; 172
     de6:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     de8:	e8 14       	cp	r14, r8
     dea:	f9 04       	cpc	r15, r9
     dec:	49 f7       	brne	.-46     	; 0xdc0 <transferObjToDis+0x1f4>
     dee:	7d c0       	rjmp	.+250    	; 0xeea <transferObjToDis+0x31e>
     df0:	e0 e9       	ldi	r30, 0x90	; 144
     df2:	f3 e0       	ldi	r31, 0x03	; 3
     df4:	fc 83       	std	Y+4, r31	; 0x04
     df6:	eb 83       	std	Y+3, r30	; 0x03
     df8:	69 81       	ldd	r22, Y+1	; 0x01
     dfa:	7a 81       	ldd	r23, Y+2	; 0x02
     dfc:	62 0f       	add	r22, r18
     dfe:	73 1f       	adc	r23, r19
     e00:	6d 52       	subi	r22, 0x2D	; 45
     e02:	79 4f       	sbci	r23, 0xF9	; 249
     e04:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bomb_img[tileY];
     e06:	f7 01       	movw	r30, r14
     e08:	c1 90       	ld	r12, Z+
     e0a:	d1 90       	ld	r13, Z+
     e0c:	7f 01       	movw	r14, r30
     e0e:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	f6 01       	movw	r30, r12
     e14:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     e16:	9e 2f       	mov	r25, r30
     e18:	91 70       	andi	r25, 0x01	; 1
     e1a:	d8 01       	movw	r26, r16
     e1c:	9d 93       	st	X+, r25
     e1e:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     e20:	f6 95       	lsr	r31
     e22:	e7 95       	ror	r30
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bomb_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	8c 30       	cpi	r24, 0x0C	; 12
     e28:	b1 f7       	brne	.-20     	; 0xe16 <transferObjToDis+0x24a>
     e2a:	d6 01       	movw	r26, r12
     e2c:	6c 5a       	subi	r22, 0xAC	; 172
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     e30:	ae 14       	cp	r10, r14
     e32:	bf 04       	cpc	r11, r15
     e34:	41 f7       	brne	.-48     	; 0xe06 <transferObjToDis+0x23a>
     e36:	59 c0       	rjmp	.+178    	; 0xeea <transferObjToDis+0x31e>
     e38:	e0 e6       	ldi	r30, 0x60	; 96
     e3a:	f3 e0       	ldi	r31, 0x03	; 3
     e3c:	fc 83       	std	Y+4, r31	; 0x04
     e3e:	eb 83       	std	Y+3, r30	; 0x03
     e40:	69 81       	ldd	r22, Y+1	; 0x01
     e42:	7a 81       	ldd	r23, Y+2	; 0x02
     e44:	62 0f       	add	r22, r18
     e46:	73 1f       	adc	r23, r19
     e48:	6d 52       	subi	r22, 0x2D	; 45
     e4a:	79 4f       	sbci	r23, 0xF9	; 249
     e4c:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
     e4e:	f7 01       	movw	r30, r14
     e50:	c1 90       	ld	r12, Z+
     e52:	d1 90       	ld	r13, Z+
     e54:	7f 01       	movw	r14, r30
     e56:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	f6 01       	movw	r30, r12
     e5c:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     e5e:	9e 2f       	mov	r25, r30
     e60:	91 70       	andi	r25, 0x01	; 1
     e62:	d8 01       	movw	r26, r16
     e64:	9d 93       	st	X+, r25
     e66:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     e68:	f6 95       	lsr	r31
     e6a:	e7 95       	ror	r30
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	8c 30       	cpi	r24, 0x0C	; 12
     e70:	b1 f7       	brne	.-20     	; 0xe5e <transferObjToDis+0x292>
     e72:	d6 01       	movw	r26, r12
     e74:	6c 5a       	subi	r22, 0xAC	; 172
     e76:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     e78:	e8 e7       	ldi	r30, 0x78	; 120
     e7a:	f3 e0       	ldi	r31, 0x03	; 3
     e7c:	ee 15       	cp	r30, r14
     e7e:	ff 05       	cpc	r31, r15
     e80:	31 f7       	brne	.-52     	; 0xe4e <transferObjToDis+0x282>
     e82:	33 c0       	rjmp	.+102    	; 0xeea <transferObjToDis+0x31e>
     e84:	80 e3       	ldi	r24, 0x30	; 48
     e86:	93 e0       	ldi	r25, 0x03	; 3
     e88:	9c 83       	std	Y+4, r25	; 0x04
     e8a:	8b 83       	std	Y+3, r24	; 0x03
     e8c:	69 81       	ldd	r22, Y+1	; 0x01
     e8e:	7a 81       	ldd	r23, Y+2	; 0x02
     e90:	62 0f       	add	r22, r18
     e92:	73 1f       	adc	r23, r19
     e94:	6d 52       	subi	r22, 0x2D	; 45
     e96:	79 4f       	sbci	r23, 0xF9	; 249
     e98:	7c 01       	movw	r14, r24
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
     e9a:	f7 01       	movw	r30, r14
     e9c:	c1 90       	ld	r12, Z+
     e9e:	d1 90       	ld	r13, Z+
     ea0:	7f 01       	movw	r14, r30
     ea2:	8b 01       	movw	r16, r22
     ea4:	8c e0       	ldi	r24, 0x0C	; 12
     ea6:	be 83       	std	Y+6, r27	; 0x06
     ea8:	ad 83       	std	Y+5, r26	; 0x05
     eaa:	f6 01       	movw	r30, r12
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     eac:	9e 2f       	mov	r25, r30
     eae:	91 70       	andi	r25, 0x01	; 1
     eb0:	d8 01       	movw	r26, r16
     eb2:	9d 93       	st	X+, r25
     eb4:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     eb6:	f6 95       	lsr	r31
     eb8:	e7 95       	ror	r30
     eba:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     ebc:	b9 f7       	brne	.-18     	; 0xeac <transferObjToDis+0x2e0>
     ebe:	ad 81       	ldd	r26, Y+5	; 0x05
     ec0:	be 81       	ldd	r27, Y+6	; 0x06
     ec2:	6c 5a       	subi	r22, 0xAC	; 172
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     ec6:	e8 e4       	ldi	r30, 0x48	; 72
     ec8:	ee 16       	cp	r14, r30
     eca:	e3 e0       	ldi	r30, 0x03	; 3
     ecc:	fe 06       	cpc	r15, r30
     ece:	29 f7       	brne	.-54     	; 0xe9a <transferObjToDis+0x2ce>
     ed0:	0c c0       	rjmp	.+24     	; 0xeea <transferObjToDis+0x31e>
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0;
     ed2:	11 92       	st	Z+, r1
				}
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	8c 30       	cpi	r24, 0x0C	; 12
     ed8:	e1 f7       	brne	.-8      	; 0xed2 <transferObjToDis+0x306>
     eda:	91 50       	subi	r25, 0x01	; 1
     edc:	6c 5a       	subi	r22, 0xAC	; 172
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     ee0:	99 23       	and	r25, r25
     ee2:	19 f0       	breq	.+6      	; 0xeea <transferObjToDis+0x31e>
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
     ee4:	fb 01       	movw	r30, r22
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	f4 cf       	rjmp	.-24     	; 0xed2 <transferObjToDis+0x306>
     eea:	24 5f       	subi	r18, 0xF4	; 244
     eec:	3f 4f       	sbci	r19, 0xFF	; 255

const unsigned TILESIZE = 12;
void transferObjToDis() {
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
     eee:	24 35       	cpi	r18, 0x54	; 84
     ef0:	31 05       	cpc	r19, r1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <transferObjToDis+0x32a>
     ef4:	a4 ce       	rjmp	.-696    	; 0xc3e <transferObjToDis+0x72>
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	80 51       	subi	r24, 0x10	; 16
     efc:	9c 4f       	sbci	r25, 0xFC	; 252
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	97 e0       	ldi	r25, 0x07	; 7
     f04:	29 0e       	add	r2, r25
     f06:	31 1c       	adc	r3, r1
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
     f08:	a9 81       	ldd	r26, Y+1	; 0x01
     f0a:	ba 81       	ldd	r27, Y+2	; 0x02
     f0c:	a0 3d       	cpi	r26, 0xD0	; 208
     f0e:	bb 40       	sbci	r27, 0x0B	; 11
     f10:	21 f0       	breq	.+8      	; 0xf1a <transferObjToDis+0x34e>
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
     f12:	d1 01       	movw	r26, r2
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	92 ce       	rjmp	.-732    	; 0xc3e <transferObjToDis+0x72>
				}
				break;
			}
		}
	}
}
     f1a:	26 96       	adiw	r28, 0x06	; 6
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	9f 90       	pop	r9
     f3c:	8f 90       	pop	r8
     f3e:	7f 90       	pop	r7
     f40:	6f 90       	pop	r6
     f42:	5f 90       	pop	r5
     f44:	4f 90       	pop	r4
     f46:	3f 90       	pop	r3
     f48:	2f 90       	pop	r2
     f4a:	08 95       	ret

00000f4c <TickGameLogic>:
unsigned short soundQueueCount;

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
     f4c:	cf 92       	push	r12
     f4e:	df 92       	push	r13
     f50:	ef 92       	push	r14
     f52:	ff 92       	push	r15
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
	switch(state) {
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	8a 30       	cpi	r24, 0x0A	; 10
     f5c:	91 05       	cpc	r25, r1
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <TickGameLogic+0x16>
     f60:	ca c6       	rjmp	.+3476   	; 0x1cf6 <TickGameLogic+0xdaa>
     f62:	fc 01       	movw	r30, r24
     f64:	ea 5a       	subi	r30, 0xAA	; 170
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__tablejump2__>
		case GLogicInit:
		state = GLogicMenu;
		break;
		
		case GLogicMenu:
		if(((SNESOutput & 0x1000) == 0x1000) && menuInputDelayCount >= menuInputDelay){
     f6c:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
     f70:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
     f74:	94 ff       	sbrs	r25, 4
     f76:	46 c0       	rjmp	.+140    	; 0x1004 <TickGameLogic+0xb8>
     f78:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <menuInputDelayCount>
     f7c:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <menuInputDelayCount+0x1>
     f80:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <menuInputDelay>
     f84:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <menuInputDelay+0x1>
     f88:	28 17       	cp	r18, r24
     f8a:	39 07       	cpc	r19, r25
     f8c:	50 f5       	brcc	.+84     	; 0xfe2 <TickGameLogic+0x96>
     f8e:	3a c0       	rjmp	.+116    	; 0x1004 <TickGameLogic+0xb8>
		case GLogicLevelInit:
		state = GLogicPlaying;
		break;
		
		case GLogicPlaying:
		if(levelFinish != 0 && levelCount < LEVELMAX) {
     f90:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <levelFinish>
     f94:	88 23       	and	r24, r24
     f96:	31 f0       	breq	.+12     	; 0xfa4 <TickGameLogic+0x58>
     f98:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <levelCount>
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <TickGameLogic+0x56>
     fa0:	fd c0       	rjmp	.+506    	; 0x119c <TickGameLogic+0x250>
     fa2:	44 c1       	rjmp	.+648    	; 0x122c <TickGameLogic+0x2e0>
			state = GLogicLevelComplete;
		}
		else if(levelFinish != 0 && levelCount >= LEVELMAX) {
			state = GLogicWin;
		}
		else if(gameOver != 0 && playerLives > 0) {
     fa4:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <gameOver>
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <TickGameLogic+0x62>
     fac:	f4 c1       	rjmp	.+1000   	; 0x1396 <TickGameLogic+0x44a>
     fae:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <playerLives>
     fb2:	81 11       	cpse	r24, r1
     fb4:	b3 c1       	rjmp	.+870    	; 0x131c <TickGameLogic+0x3d0>
     fb6:	87 c6       	rjmp	.+3342   	; 0x1cc6 <TickGameLogic+0xd7a>
		case GLogicNextLevel:
		state = GLogicPlaying;
		break;
		
		case GLogicLevelComplete:
		if((SNESOutput & 0x1000) == 0x1000){
     fb8:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
     fbc:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
     fc0:	94 fd       	sbrc	r25, 4
     fc2:	f0 c0       	rjmp	.+480    	; 0x11a4 <TickGameLogic+0x258>
     fc4:	eb c0       	rjmp	.+470    	; 0x119c <TickGameLogic+0x250>
			state = GLogicNextLevel;
		}
		break;
		
		case GLogicWin:
		if((SNESOutput & 0x1000) == 0x1000){
     fc6:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
     fca:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
     fce:	94 fd       	sbrc	r25, 4
     fd0:	19 c0       	rjmp	.+50     	; 0x1004 <TickGameLogic+0xb8>
     fd2:	2c c1       	rjmp	.+600    	; 0x122c <TickGameLogic+0x2e0>
		case GLogicRestartLevel:
		state = GLogicPlaying;
		break;
		
		case GLogicGameOver:
		if((SNESOutput &0x1000) == 0x1000){
     fd4:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
     fd8:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
     fdc:	94 fd       	sbrc	r25, 4
     fde:	12 c0       	rjmp	.+36     	; 0x1004 <TickGameLogic+0xb8>
     fe0:	72 c6       	rjmp	.+3300   	; 0x1cc6 <TickGameLogic+0xd7a>
     fe2:	29 ed       	ldi	r18, 0xD9	; 217
     fe4:	32 e0       	ldi	r19, 0x02	; 2
     fe6:	44 e9       	ldi	r20, 0x94	; 148
     fe8:	56 e1       	ldi	r21, 0x16	; 22
     fea:	6e ee       	ldi	r22, 0xEE	; 238
     fec:	72 e0       	ldi	r23, 0x02	; 2
     fee:	b2 c0       	rjmp	.+356    	; 0x1154 <TickGameLogic+0x208>
		break;
	}
	switch(state) {
			case GLogicInit:
			//SNES_init();
			highScore = 0;
     ff0:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <highScore+0x1>
     ff4:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <highScore>
			menuInputDelayCount = 0;
     ff8:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <menuInputDelayCount+0x1>
     ffc:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <menuInputDelayCount>
			break;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	7c c6       	rjmp	.+3320   	; 0x1cfc <TickGameLogic+0xdb0>
			
			case GLogicMenu:
			currentGameState = GLogicMenu;
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			displayScore[2] = (highScore % 10) + '0';
    100a:	e0 91 b5 06 	lds	r30, 0x06B5	; 0x8006b5 <highScore>
    100e:	f0 91 b6 06 	lds	r31, 0x06B6	; 0x8006b6 <highScore+0x1>
    1012:	c2 e9       	ldi	r28, 0x92	; 146
    1014:	d6 e0       	ldi	r29, 0x06	; 6
    1016:	9f 01       	movw	r18, r30
    1018:	ad ec       	ldi	r26, 0xCD	; 205
    101a:	bc ec       	ldi	r27, 0xCC	; 204
    101c:	0e 94 67 13 	call	0x26ce	; 0x26ce <__umulhisi3>
    1020:	ac 01       	movw	r20, r24
    1022:	56 95       	lsr	r21
    1024:	47 95       	ror	r20
    1026:	56 95       	lsr	r21
    1028:	47 95       	ror	r20
    102a:	56 95       	lsr	r21
    102c:	47 95       	ror	r20
    102e:	9a 01       	movw	r18, r20
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	ca 01       	movw	r24, r20
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	9f 01       	movw	r18, r30
    1048:	28 1b       	sub	r18, r24
    104a:	39 0b       	sbc	r19, r25
    104c:	c9 01       	movw	r24, r18
    104e:	80 5d       	subi	r24, 0xD0	; 208
    1050:	8a 83       	std	Y+2, r24	; 0x02
			displayScore[1] = ((highScore / 10) % 10) + '0';
    1052:	9a 01       	movw	r18, r20
    1054:	0e 94 67 13 	call	0x26ce	; 0x26ce <__umulhisi3>
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	96 95       	lsr	r25
    105e:	87 95       	ror	r24
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	9c 01       	movw	r18, r24
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	82 0f       	add	r24, r18
    1078:	93 1f       	adc	r25, r19
    107a:	48 1b       	sub	r20, r24
    107c:	59 0b       	sbc	r21, r25
    107e:	40 5d       	subi	r20, 0xD0	; 208
    1080:	49 83       	std	Y+1, r20	; 0x01
			displayScore[0] = ((highScore / 100) % 10) + '0';
    1082:	9f 01       	movw	r18, r30
    1084:	36 95       	lsr	r19
    1086:	27 95       	ror	r18
    1088:	36 95       	lsr	r19
    108a:	27 95       	ror	r18
    108c:	ab e7       	ldi	r26, 0x7B	; 123
    108e:	b4 e1       	ldi	r27, 0x14	; 20
    1090:	0e 94 67 13 	call	0x26ce	; 0x26ce <__umulhisi3>
    1094:	ac 01       	movw	r20, r24
    1096:	56 95       	lsr	r21
    1098:	47 95       	ror	r20
    109a:	9a 01       	movw	r18, r20
    109c:	ad ec       	ldi	r26, 0xCD	; 205
    109e:	bc ec       	ldi	r27, 0xCC	; 204
    10a0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__umulhisi3>
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	9c 01       	movw	r18, r24
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	82 0f       	add	r24, r18
    10c4:	93 1f       	adc	r25, r19
    10c6:	48 1b       	sub	r20, r24
    10c8:	59 0b       	sbc	r21, r25
    10ca:	40 5d       	subi	r20, 0xD0	; 208
    10cc:	48 83       	st	Y, r20
			if((SNESOutput & 0x0010) == 0x0010) {
    10ce:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    10d2:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    10d6:	84 ff       	sbrs	r24, 4
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <TickGameLogic+0x19e>
				//Save Score = "R"
				eeprom_write_word(EEPROM_ADDRESS_0, highScore);
    10da:	bf 01       	movw	r22, r30
    10dc:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <EEPROM_ADDRESS_0>
    10e0:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <EEPROM_ADDRESS_0+0x1>
    10e4:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <eeprom_write_word>
    10e8:	17 c0       	rjmp	.+46     	; 0x1118 <TickGameLogic+0x1cc>
			}
			else if((SNESOutput & 0x0020) == 0x0020) {
    10ea:	85 ff       	sbrs	r24, 5
    10ec:	0b c0       	rjmp	.+22     	; 0x1104 <TickGameLogic+0x1b8>
				//Load Score = "L"
				highScore = eeprom_read_word(EEPROM_ADDRESS_0);
    10ee:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <EEPROM_ADDRESS_0>
    10f2:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <EEPROM_ADDRESS_0+0x1>
    10f6:	0e 94 76 13 	call	0x26ec	; 0x26ec <eeprom_read_word>
    10fa:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <highScore+0x1>
    10fe:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <highScore>
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <TickGameLogic+0x1cc>
			}
			else if((SNESOutput & 0x2000) == 0x2000) {
    1104:	95 ff       	sbrs	r25, 5
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <TickGameLogic+0x1cc>
				//Clear Score = "SELECT"
				eeprom_write_word(EEPROM_ADDRESS_0, 0x0000);
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <EEPROM_ADDRESS_0>
    1110:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <EEPROM_ADDRESS_0+0x1>
    1114:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <eeprom_write_word>
			}
			
			if(menuInputDelayCount < menuInputDelay) {
    1118:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <menuInputDelayCount>
    111c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <menuInputDelayCount+0x1>
    1120:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <menuInputDelay>
    1124:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <menuInputDelay+0x1>
    1128:	82 17       	cp	r24, r18
    112a:	93 07       	cpc	r25, r19
    112c:	08 f0       	brcs	.+2      	; 0x1130 <TickGameLogic+0x1e4>
    112e:	e5 c5       	rjmp	.+3018   	; 0x1cfa <TickGameLogic+0xdae>
				menuInputDelayCount = menuInputDelayCount + 1;
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <menuInputDelayCount+0x1>
    1136:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <menuInputDelayCount>
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	df c5       	rjmp	.+3006   	; 0x1cfc <TickGameLogic+0xdb0>
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = levelDatabase[0][tempY][tempX];
    113e:	91 91       	ld	r25, Z+
    1140:	9d 93       	st	X+, r25
    1142:	81 50       	subi	r24, 0x01	; 1
			
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
    1144:	e1 f7       	brne	.-8      	; 0x113e <TickGameLogic+0x1f2>
    1146:	29 5f       	subi	r18, 0xF9	; 249
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	49 5f       	subi	r20, 0xF9	; 249
    114c:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
    114e:	26 17       	cp	r18, r22
    1150:	37 07       	cpc	r19, r23
    1152:	21 f0       	breq	.+8      	; 0x115c <TickGameLogic+0x210>
unsigned short soundQueueCount;

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
    1154:	da 01       	movw	r26, r20
    1156:	f9 01       	movw	r30, r18
    1158:	87 e0       	ldi	r24, 0x07	; 7
    115a:	f1 cf       	rjmp	.-30     	; 0x113e <TickGameLogic+0x1f2>
					objectLocMatrix[tempY][tempX] = levelDatabase[0][tempY][tempX];
				}
			}
			
			//Reset Game values
			player1.playerPosX = 0;
    115c:	e9 e9       	ldi	r30, 0x99	; 153
    115e:	f6 e0       	ldi	r31, 0x06	; 6
    1160:	10 82       	st	Z, r1
			player1.playerPosY = 0;
    1162:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
    1164:	13 82       	std	Z+3, r1	; 0x03
			
			currentGameState = GLogicPlaying;
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			levelFinish = 0;
    116c:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <levelFinish>
			levelCount = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <levelCount>
			gameOver = 0;
    1176:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <gameOver>
			tempScore = 0;
    117a:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <tempScore+0x1>
    117e:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <tempScore>
			gameTimer = ROUNDPERIOD;
    1182:	24 e1       	ldi	r18, 0x14	; 20
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	30 93 ce 06 	sts	0x06CE, r19	; 0x8006ce <gameTimer+0x1>
    118a:	20 93 cd 06 	sts	0x06CD, r18	; 0x8006cd <gameTimer>
			gameTimerCountSecond = 0;
    118e:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <gameTimerCountSecond>
			playerLives = LIVESAMOUNT;
    1192:	80 93 a9 16 	sts	0x16A9, r24	; 0x8016a9 <playerLives>
			transferObjToDis();
    1196:	1a dd       	rcall	.-1484   	; 0xbcc <transferObjToDis>
			break;
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	b0 c5       	rjmp	.+2912   	; 0x1cfc <TickGameLogic+0xdb0>
			
			case GLogicLevelComplete:
			currentGameState = GLogicLevelComplete;
    119c:	86 e0       	ldi	r24, 0x06	; 6
    119e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			break;
    11a2:	ac c5       	rjmp	.+2904   	; 0x1cfc <TickGameLogic+0xdb0>
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
    11a4:	20 91 8e 06 	lds	r18, 0x068E	; 0x80068e <levelCount>
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	20 93 8e 06 	sts	0x068E, r18	; 0x80068e <levelCount>
    11ae:	85 e1       	ldi	r24, 0x15	; 21
    11b0:	28 9f       	mul	r18, r24
    11b2:	90 01       	movw	r18, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	2c 53       	subi	r18, 0x3C	; 60
    11b8:	3d 4f       	sbci	r19, 0xFD	; 253
    11ba:	44 e9       	ldi	r20, 0x94	; 148
    11bc:	56 e1       	ldi	r21, 0x16	; 22
    11be:	69 ea       	ldi	r22, 0xA9	; 169
    11c0:	76 e1       	ldi	r23, 0x16	; 22
    11c2:	0b c0       	rjmp	.+22     	; 0x11da <TickGameLogic+0x28e>
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
    11c4:	91 91       	ld	r25, Z+
    11c6:	9d 93       	st	X+, r25
    11c8:	81 50       	subi	r24, 0x01	; 1
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
    11ca:	e1 f7       	brne	.-8      	; 0x11c4 <TickGameLogic+0x278>
    11cc:	29 5f       	subi	r18, 0xF9	; 249
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	49 5f       	subi	r20, 0xF9	; 249
    11d2:	5f 4f       	sbci	r21, 0xFF	; 255
			break;
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
    11d4:	46 17       	cp	r20, r22
    11d6:	57 07       	cpc	r21, r23
    11d8:	21 f0       	breq	.+8      	; 0x11e2 <TickGameLogic+0x296>
unsigned short soundQueueCount;

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
    11da:	da 01       	movw	r26, r20
    11dc:	f9 01       	movw	r30, r18
    11de:	87 e0       	ldi	r24, 0x07	; 7
    11e0:	f1 cf       	rjmp	.-30     	; 0x11c4 <TickGameLogic+0x278>
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
				}
			}
			
			//Reset Game values
			player1.playerPosX = 0;
    11e2:	e9 e9       	ldi	r30, 0x99	; 153
    11e4:	f6 e0       	ldi	r31, 0x06	; 6
    11e6:	10 82       	st	Z, r1
			player1.playerPosY = 0;
    11e8:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
    11ea:	13 82       	std	Z+3, r1	; 0x03
			tempScore = tempScore + gameTimer;
    11ec:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    11f0:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    11f4:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <gameTimer>
    11f8:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <gameTimer+0x1>
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <tempScore+0x1>
    1204:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <tempScore>
			
			currentGameState = GLogicPlaying;
    1208:	84 e0       	ldi	r24, 0x04	; 4
    120a:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			levelFinish = 0;
    120e:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <levelFinish>
			gameOver = 0;
    1212:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <gameOver>
			gameTimer = ROUNDPERIOD;
    1216:	84 e1       	ldi	r24, 0x14	; 20
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <gameTimer+0x1>
    121e:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <gameTimer>
			gameTimerCountSecond = 0;
    1222:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <gameTimerCountSecond>
			transferObjToDis();
    1226:	d2 dc       	rcall	.-1628   	; 0xbcc <transferObjToDis>
			break;
    1228:	87 e0       	ldi	r24, 0x07	; 7
    122a:	68 c5       	rjmp	.+2768   	; 0x1cfc <TickGameLogic+0xdb0>
			
			case GLogicWin:
			currentGameState = GLogicWin;
    122c:	89 e0       	ldi	r24, 0x09	; 9
    122e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			displayScore[2] = (tempScore % 10) + '0';
    1232:	e0 91 8f 06 	lds	r30, 0x068F	; 0x80068f <tempScore>
    1236:	f0 91 90 06 	lds	r31, 0x0690	; 0x800690 <tempScore+0x1>
    123a:	c2 e9       	ldi	r28, 0x92	; 146
    123c:	d6 e0       	ldi	r29, 0x06	; 6
    123e:	9f 01       	movw	r18, r30
    1240:	ad ec       	ldi	r26, 0xCD	; 205
    1242:	bc ec       	ldi	r27, 0xCC	; 204
    1244:	0e 94 67 13 	call	0x26ce	; 0x26ce <__umulhisi3>
    1248:	ac 01       	movw	r20, r24
    124a:	56 95       	lsr	r21
    124c:	47 95       	ror	r20
    124e:	56 95       	lsr	r21
    1250:	47 95       	ror	r20
    1252:	56 95       	lsr	r21
    1254:	47 95       	ror	r20
    1256:	9a 01       	movw	r18, r20
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	ca 01       	movw	r24, r20
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	df 01       	movw	r26, r30
    1270:	a8 1b       	sub	r26, r24
    1272:	b9 0b       	sbc	r27, r25
    1274:	cd 01       	movw	r24, r26
    1276:	80 5d       	subi	r24, 0xD0	; 208
    1278:	8a 83       	std	Y+2, r24	; 0x02
			displayScore[1] = ((tempScore / 10) % 10) + '0';
    127a:	9a 01       	movw	r18, r20
    127c:	ad ec       	ldi	r26, 0xCD	; 205
    127e:	bc ec       	ldi	r27, 0xCC	; 204
    1280:	0e 94 67 13 	call	0x26ce	; 0x26ce <__umulhisi3>
    1284:	96 95       	lsr	r25
    1286:	87 95       	ror	r24
    1288:	96 95       	lsr	r25
    128a:	87 95       	ror	r24
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	9c 01       	movw	r18, r24
    1292:	22 0f       	add	r18, r18
    1294:	33 1f       	adc	r19, r19
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	82 0f       	add	r24, r18
    12a4:	93 1f       	adc	r25, r19
    12a6:	48 1b       	sub	r20, r24
    12a8:	59 0b       	sbc	r21, r25
    12aa:	40 5d       	subi	r20, 0xD0	; 208
    12ac:	49 83       	std	Y+1, r20	; 0x01
			displayScore[0] = ((tempScore / 100) % 10) + '0';
    12ae:	9f 01       	movw	r18, r30
    12b0:	36 95       	lsr	r19
    12b2:	27 95       	ror	r18
    12b4:	36 95       	lsr	r19
    12b6:	27 95       	ror	r18
    12b8:	ab e7       	ldi	r26, 0x7B	; 123
    12ba:	b4 e1       	ldi	r27, 0x14	; 20
    12bc:	0e 94 67 13 	call	0x26ce	; 0x26ce <__umulhisi3>
    12c0:	ac 01       	movw	r20, r24
    12c2:	56 95       	lsr	r21
    12c4:	47 95       	ror	r20
    12c6:	9a 01       	movw	r18, r20
    12c8:	ad ec       	ldi	r26, 0xCD	; 205
    12ca:	bc ec       	ldi	r27, 0xCC	; 204
    12cc:	0e 94 67 13 	call	0x26ce	; 0x26ce <__umulhisi3>
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	9c 01       	movw	r18, r24
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	48 1b       	sub	r20, r24
    12f4:	59 0b       	sbc	r21, r25
    12f6:	40 5d       	subi	r20, 0xD0	; 208
    12f8:	48 83       	st	Y, r20
			if(highScore < tempScore) {
    12fa:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <highScore>
    12fe:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <highScore+0x1>
    1302:	8e 17       	cp	r24, r30
    1304:	9f 07       	cpc	r25, r31
    1306:	20 f4       	brcc	.+8      	; 0x1310 <TickGameLogic+0x3c4>
				highScore = tempScore;
    1308:	f0 93 b6 06 	sts	0x06B6, r31	; 0x8006b6 <highScore+0x1>
    130c:	e0 93 b5 06 	sts	0x06B5, r30	; 0x8006b5 <highScore>
			}
			menuInputDelayCount = 0;
    1310:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <menuInputDelayCount+0x1>
    1314:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <menuInputDelayCount>
			break;
    1318:	89 e0       	ldi	r24, 0x09	; 9
    131a:	f0 c4       	rjmp	.+2528   	; 0x1cfc <TickGameLogic+0xdb0>
			
			case GLogicRestartLevel:
			playerLives = playerLives - 1;
    131c:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <playerLives>
    1320:	81 50       	subi	r24, 0x01	; 1
    1322:	80 93 a9 16 	sts	0x16A9, r24	; 0x8016a9 <playerLives>
    1326:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <levelCount>
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	25 e1       	ldi	r18, 0x15	; 21
    1330:	28 9f       	mul	r18, r24
    1332:	a0 01       	movw	r20, r0
    1334:	29 9f       	mul	r18, r25
    1336:	50 0d       	add	r21, r0
    1338:	11 24       	eor	r1, r1
    133a:	47 52       	subi	r20, 0x27	; 39
    133c:	5d 4f       	sbci	r21, 0xFD	; 253
    133e:	24 e9       	ldi	r18, 0x94	; 148
    1340:	36 e1       	ldi	r19, 0x16	; 22
    1342:	69 ea       	ldi	r22, 0xA9	; 169
    1344:	76 e1       	ldi	r23, 0x16	; 22
    1346:	0c c0       	rjmp	.+24     	; 0x1360 <TickGameLogic+0x414>
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
    1348:	91 91       	ld	r25, Z+
    134a:	9d 93       	st	X+, r25
			break;
			
			case GLogicRestartLevel:
			playerLives = playerLives - 1;
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	87 30       	cpi	r24, 0x07	; 7
    1350:	d9 f7       	brne	.-10     	; 0x1348 <TickGameLogic+0x3fc>
    1352:	49 5f       	subi	r20, 0xF9	; 249
    1354:	5f 4f       	sbci	r21, 0xFF	; 255
    1356:	29 5f       	subi	r18, 0xF9	; 249
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
			menuInputDelayCount = 0;
			break;
			
			case GLogicRestartLevel:
			playerLives = playerLives - 1;
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
    135a:	26 17       	cp	r18, r22
    135c:	37 07       	cpc	r19, r23
    135e:	21 f0       	breq	.+8      	; 0x1368 <TickGameLogic+0x41c>
unsigned short soundQueueCount;

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
    1360:	d9 01       	movw	r26, r18
    1362:	fa 01       	movw	r30, r20
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	f0 cf       	rjmp	.-32     	; 0x1348 <TickGameLogic+0x3fc>
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
				}
			}
			
			//Reset Game values
			player1.playerPosX = 0;
    1368:	e9 e9       	ldi	r30, 0x99	; 153
    136a:	f6 e0       	ldi	r31, 0x06	; 6
    136c:	10 82       	st	Z, r1
			player1.playerPosY = 0;
    136e:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
    1370:	13 82       	std	Z+3, r1	; 0x03
			
			currentGameState = GLogicPlaying;
    1372:	84 e0       	ldi	r24, 0x04	; 4
    1374:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			levelFinish = 0;
    1378:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <levelFinish>
			gameOver = 0;
    137c:	10 92 a3 06 	sts	0x06A3, r1	; 0x8006a3 <gameOver>
			gameTimer = ROUNDPERIOD;
    1380:	84 e1       	ldi	r24, 0x14	; 20
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <gameTimer+0x1>
    1388:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <gameTimer>
			gameTimerCountSecond = 0;
    138c:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <gameTimerCountSecond>
			transferObjToDis();
    1390:	1d dc       	rcall	.-1990   	; 0xbcc <transferObjToDis>
			break;
    1392:	88 e0       	ldi	r24, 0x08	; 8
    1394:	b3 c4       	rjmp	.+2406   	; 0x1cfc <TickGameLogic+0xdb0>
			
			case GLogicPlaying:
			
			//Player Input and Actions
			if(player1.isBombPlaced == 0 && (SNESOutput & 0x8000) == 0x8000) {
    1396:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <player1+0x3>
    139a:	81 11       	cpse	r24, r1
    139c:	10 c0       	rjmp	.+32     	; 0x13be <TickGameLogic+0x472>
    139e:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    13a2:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    13a6:	99 23       	and	r25, r25
    13a8:	54 f4       	brge	.+20     	; 0x13be <TickGameLogic+0x472>
				player1.isBombPlaced = 1;
    13aa:	e9 e9       	ldi	r30, 0x99	; 153
    13ac:	f6 e0       	ldi	r31, 0x06	; 6
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	83 83       	std	Z+3, r24	; 0x03
				player1.bombPosX = player1.playerPosX;
    13b2:	80 81       	ld	r24, Z
    13b4:	84 83       	std	Z+4, r24	; 0x04
				player1.bombPosY = player1.playerPosY;
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	85 83       	std	Z+5, r24	; 0x05
				player1.bombCount = 0;
    13ba:	17 82       	std	Z+7, r1	; 0x07
    13bc:	16 82       	std	Z+6, r1	; 0x06
			}
			unsigned char tempObj;
			if(player1.playerPosX != 6 && (SNESOutput & 0x0100) == 0x0100) {
    13be:	60 91 99 06 	lds	r22, 0x0699	; 0x800699 <player1>
    13c2:	66 30       	cpi	r22, 0x06	; 6
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <TickGameLogic+0x47c>
    13c6:	52 c0       	rjmp	.+164    	; 0x146c <TickGameLogic+0x520>
    13c8:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    13cc:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    13d0:	90 ff       	sbrs	r25, 0
    13d2:	49 c0       	rjmp	.+146    	; 0x1466 <TickGameLogic+0x51a>
				tempObj = objectLocMatrix[player1.playerPosY][(player1.playerPosX + 1)];
    13d4:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <player1+0x1>
    13d8:	26 2f       	mov	r18, r22
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	48 2f       	mov	r20, r24
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	f9 01       	movw	r30, r18
    13e2:	b7 e0       	ldi	r27, 0x07	; 7
    13e4:	8b 9f       	mul	r24, r27
    13e6:	e0 0d       	add	r30, r0
    13e8:	f1 1d       	adc	r31, r1
    13ea:	11 24       	eor	r1, r1
    13ec:	ec 56       	subi	r30, 0x6C	; 108
    13ee:	f9 4e       	sbci	r31, 0xE9	; 233
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
				if(tempObj == OBJEmpty){
    13f2:	81 11       	cpse	r24, r1
    13f4:	19 c0       	rjmp	.+50     	; 0x1428 <TickGameLogic+0x4dc>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    13f6:	ca 01       	movw	r24, r20
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	84 1b       	sub	r24, r20
    1406:	95 0b       	sbc	r25, r21
    1408:	8c 56       	subi	r24, 0x6C	; 108
    140a:	99 4e       	sbci	r25, 0xE9	; 233
    140c:	fc 01       	movw	r30, r24
    140e:	e2 0f       	add	r30, r18
    1410:	f3 1f       	adc	r31, r19
    1412:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX + 1;
    1414:	21 e0       	ldi	r18, 0x01	; 1
    1416:	26 0f       	add	r18, r22
    1418:	20 93 99 06 	sts	0x0699, r18	; 0x800699 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    141c:	fc 01       	movw	r30, r24
    141e:	e2 0f       	add	r30, r18
    1420:	f1 1d       	adc	r31, r1
    1422:	24 e0       	ldi	r18, 0x04	; 4
    1424:	20 83       	st	Z, r18
    1426:	2d c1       	rjmp	.+602    	; 0x1682 <TickGameLogic+0x736>
				}
				else if(tempObj == OBJDoor) {
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	09 f0       	breq	.+2      	; 0x142e <TickGameLogic+0x4e2>
    142c:	2a c1       	rjmp	.+596    	; 0x1682 <TickGameLogic+0x736>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    142e:	ca 01       	movw	r24, r20
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	84 1b       	sub	r24, r20
    143e:	95 0b       	sbc	r25, r21
    1440:	8c 56       	subi	r24, 0x6C	; 108
    1442:	99 4e       	sbci	r25, 0xE9	; 233
    1444:	fc 01       	movw	r30, r24
    1446:	e2 0f       	add	r30, r18
    1448:	f3 1f       	adc	r31, r19
    144a:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX + 1;
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	26 0f       	add	r18, r22
    1450:	20 93 99 06 	sts	0x0699, r18	; 0x800699 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1454:	fc 01       	movw	r30, r24
    1456:	e2 0f       	add	r30, r18
    1458:	f1 1d       	adc	r31, r1
    145a:	24 e0       	ldi	r18, 0x04	; 4
    145c:	20 83       	st	Z, r18
					levelFinish = 1;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <levelFinish>
    1464:	0e c1       	rjmp	.+540    	; 0x1682 <TickGameLogic+0x736>
				}
			}
			else if(player1.playerPosX != 0 && (SNESOutput & 0x0200) == 0x0200) {
    1466:	66 23       	and	r22, r22
    1468:	09 f4       	brne	.+2      	; 0x146c <TickGameLogic+0x520>
    146a:	4f c0       	rjmp	.+158    	; 0x150a <TickGameLogic+0x5be>
    146c:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SNESOutput>
    1470:	90 91 8e 04 	lds	r25, 0x048E	; 0x80048e <SNESOutput+0x1>
    1474:	91 ff       	sbrs	r25, 1
    1476:	49 c0       	rjmp	.+146    	; 0x150a <TickGameLogic+0x5be>
				tempObj = objectLocMatrix[player1.playerPosY][(player1.playerPosX - 1)];
    1478:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <player1+0x1>
    147c:	46 2f       	mov	r20, r22
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	fa 01       	movw	r30, r20
    1486:	97 e0       	ldi	r25, 0x07	; 7
    1488:	89 9f       	mul	r24, r25
    148a:	e0 0d       	add	r30, r0
    148c:	f1 1d       	adc	r31, r1
    148e:	11 24       	eor	r1, r1
    1490:	ed 56       	subi	r30, 0x6D	; 109
    1492:	f9 4e       	sbci	r31, 0xE9	; 233
    1494:	80 81       	ld	r24, Z
				if(tempObj == OBJEmpty){
    1496:	81 11       	cpse	r24, r1
    1498:	19 c0       	rjmp	.+50     	; 0x14cc <TickGameLogic+0x580>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    149a:	c9 01       	movw	r24, r18
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	82 1b       	sub	r24, r18
    14aa:	93 0b       	sbc	r25, r19
    14ac:	8c 56       	subi	r24, 0x6C	; 108
    14ae:	99 4e       	sbci	r25, 0xE9	; 233
    14b0:	fc 01       	movw	r30, r24
    14b2:	e4 0f       	add	r30, r20
    14b4:	f5 1f       	adc	r31, r21
    14b6:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX - 1;
    14b8:	2f ef       	ldi	r18, 0xFF	; 255
    14ba:	26 0f       	add	r18, r22
    14bc:	20 93 99 06 	sts	0x0699, r18	; 0x800699 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f1 1d       	adc	r31, r1
    14c6:	24 e0       	ldi	r18, 0x04	; 4
    14c8:	20 83       	st	Z, r18
    14ca:	db c0       	rjmp	.+438    	; 0x1682 <TickGameLogic+0x736>
				}
				else if(tempObj == OBJDoor) {
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <TickGameLogic+0x586>
    14d0:	d8 c0       	rjmp	.+432    	; 0x1682 <TickGameLogic+0x736>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    14d2:	c9 01       	movw	r24, r18
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	82 1b       	sub	r24, r18
    14e2:	93 0b       	sbc	r25, r19
    14e4:	8c 56       	subi	r24, 0x6C	; 108
    14e6:	99 4e       	sbci	r25, 0xE9	; 233
    14e8:	fc 01       	movw	r30, r24
    14ea:	e4 0f       	add	r30, r20
    14ec:	f5 1f       	adc	r31, r21
    14ee:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX - 1;
    14f0:	2f ef       	ldi	r18, 0xFF	; 255
    14f2:	26 0f       	add	r18, r22
    14f4:	20 93 99 06 	sts	0x0699, r18	; 0x800699 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    14f8:	fc 01       	movw	r30, r24
    14fa:	e2 0f       	add	r30, r18
    14fc:	f1 1d       	adc	r31, r1
    14fe:	24 e0       	ldi	r18, 0x04	; 4
    1500:	20 83       	st	Z, r18
					levelFinish = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <levelFinish>
    1508:	bc c0       	rjmp	.+376    	; 0x1682 <TickGameLogic+0x736>
				}
			}
			else if(player1.playerPosY != 0 && (SNESOutput & 0x0800) == 0x0800) {
    150a:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <player1+0x1>
    150e:	88 23       	and	r24, r24
    1510:	09 f4       	brne	.+2      	; 0x1514 <TickGameLogic+0x5c8>
    1512:	5e c0       	rjmp	.+188    	; 0x15d0 <TickGameLogic+0x684>
    1514:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <SNESOutput>
    1518:	30 91 8e 04 	lds	r19, 0x048E	; 0x80048e <SNESOutput+0x1>
    151c:	33 ff       	sbrs	r19, 3
    151e:	55 c0       	rjmp	.+170    	; 0x15ca <TickGameLogic+0x67e>
				tempObj = objectLocMatrix[player1.playerPosY - 1][(player1.playerPosX)];
    1520:	a8 2f       	mov	r26, r24
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	26 2f       	mov	r18, r22
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	ad 01       	movw	r20, r26
    152a:	41 50       	subi	r20, 0x01	; 1
    152c:	51 09       	sbc	r21, r1
    152e:	fa 01       	movw	r30, r20
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	ee 0f       	add	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	e4 1b       	sub	r30, r20
    153e:	f5 0b       	sbc	r31, r21
    1540:	ec 56       	subi	r30, 0x6C	; 108
    1542:	f9 4e       	sbci	r31, 0xE9	; 233
    1544:	e2 0f       	add	r30, r18
    1546:	f3 1f       	adc	r31, r19
    1548:	90 81       	ld	r25, Z
				if(tempObj == OBJEmpty){
    154a:	91 11       	cpse	r25, r1
    154c:	1c c0       	rjmp	.+56     	; 0x1586 <TickGameLogic+0x63a>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    154e:	fd 01       	movw	r30, r26
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	ea 1b       	sub	r30, r26
    155e:	fb 0b       	sbc	r31, r27
    1560:	ec 56       	subi	r30, 0x6C	; 108
    1562:	f9 4e       	sbci	r31, 0xE9	; 233
    1564:	e2 0f       	add	r30, r18
    1566:	f3 1f       	adc	r31, r19
    1568:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY - 1;
    156a:	81 50       	subi	r24, 0x01	; 1
    156c:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1570:	a7 e0       	ldi	r26, 0x07	; 7
    1572:	8a 9f       	mul	r24, r26
    1574:	20 0d       	add	r18, r0
    1576:	31 1d       	adc	r19, r1
    1578:	11 24       	eor	r1, r1
    157a:	f9 01       	movw	r30, r18
    157c:	ec 56       	subi	r30, 0x6C	; 108
    157e:	f9 4e       	sbci	r31, 0xE9	; 233
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	80 83       	st	Z, r24
    1584:	7e c0       	rjmp	.+252    	; 0x1682 <TickGameLogic+0x736>
				}
				else if(tempObj == OBJDoor) {
    1586:	93 30       	cpi	r25, 0x03	; 3
    1588:	09 f0       	breq	.+2      	; 0x158c <TickGameLogic+0x640>
    158a:	7b c0       	rjmp	.+246    	; 0x1682 <TickGameLogic+0x736>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    158c:	fd 01       	movw	r30, r26
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	ea 1b       	sub	r30, r26
    159c:	fb 0b       	sbc	r31, r27
    159e:	ec 56       	subi	r30, 0x6C	; 108
    15a0:	f9 4e       	sbci	r31, 0xE9	; 233
    15a2:	e2 0f       	add	r30, r18
    15a4:	f3 1f       	adc	r31, r19
    15a6:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY - 1;
    15a8:	81 50       	subi	r24, 0x01	; 1
    15aa:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    15ae:	b7 e0       	ldi	r27, 0x07	; 7
    15b0:	8b 9f       	mul	r24, r27
    15b2:	20 0d       	add	r18, r0
    15b4:	31 1d       	adc	r19, r1
    15b6:	11 24       	eor	r1, r1
    15b8:	f9 01       	movw	r30, r18
    15ba:	ec 56       	subi	r30, 0x6C	; 108
    15bc:	f9 4e       	sbci	r31, 0xE9	; 233
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	80 83       	st	Z, r24
					levelFinish = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <levelFinish>
    15c8:	5c c0       	rjmp	.+184    	; 0x1682 <TickGameLogic+0x736>
				}
			}
			else if(player1.playerPosY != 2 && (SNESOutput & 0x0400) == 0x0400) {
    15ca:	82 30       	cpi	r24, 0x02	; 2
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <TickGameLogic+0x684>
    15ce:	59 c0       	rjmp	.+178    	; 0x1682 <TickGameLogic+0x736>
    15d0:	20 91 8d 04 	lds	r18, 0x048D	; 0x80048d <SNESOutput>
    15d4:	30 91 8e 04 	lds	r19, 0x048E	; 0x80048e <SNESOutput+0x1>
    15d8:	32 ff       	sbrs	r19, 2
    15da:	53 c0       	rjmp	.+166    	; 0x1682 <TickGameLogic+0x736>
				tempObj = objectLocMatrix[player1.playerPosY + 1][(player1.playerPosX)];
    15dc:	a8 2f       	mov	r26, r24
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	26 2f       	mov	r18, r22
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	ad 01       	movw	r20, r26
    15e6:	4f 5f       	subi	r20, 0xFF	; 255
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	fa 01       	movw	r30, r20
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	e4 1b       	sub	r30, r20
    15fa:	f5 0b       	sbc	r31, r21
    15fc:	ec 56       	subi	r30, 0x6C	; 108
    15fe:	f9 4e       	sbci	r31, 0xE9	; 233
    1600:	e2 0f       	add	r30, r18
    1602:	f3 1f       	adc	r31, r19
    1604:	90 81       	ld	r25, Z
				if(tempObj == OBJEmpty){
    1606:	91 11       	cpse	r25, r1
    1608:	1c c0       	rjmp	.+56     	; 0x1642 <TickGameLogic+0x6f6>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    160a:	fd 01       	movw	r30, r26
    160c:	ee 0f       	add	r30, r30
    160e:	ff 1f       	adc	r31, r31
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	ea 1b       	sub	r30, r26
    161a:	fb 0b       	sbc	r31, r27
    161c:	ec 56       	subi	r30, 0x6C	; 108
    161e:	f9 4e       	sbci	r31, 0xE9	; 233
    1620:	e2 0f       	add	r30, r18
    1622:	f3 1f       	adc	r31, r19
    1624:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY + 1;
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    162c:	97 e0       	ldi	r25, 0x07	; 7
    162e:	89 9f       	mul	r24, r25
    1630:	20 0d       	add	r18, r0
    1632:	31 1d       	adc	r19, r1
    1634:	11 24       	eor	r1, r1
    1636:	f9 01       	movw	r30, r18
    1638:	ec 56       	subi	r30, 0x6C	; 108
    163a:	f9 4e       	sbci	r31, 0xE9	; 233
    163c:	84 e0       	ldi	r24, 0x04	; 4
    163e:	80 83       	st	Z, r24
    1640:	20 c0       	rjmp	.+64     	; 0x1682 <TickGameLogic+0x736>
				}
				else if(tempObj == OBJDoor) {
    1642:	93 30       	cpi	r25, 0x03	; 3
    1644:	f1 f4       	brne	.+60     	; 0x1682 <TickGameLogic+0x736>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    1646:	fd 01       	movw	r30, r26
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	ea 1b       	sub	r30, r26
    1656:	fb 0b       	sbc	r31, r27
    1658:	ec 56       	subi	r30, 0x6C	; 108
    165a:	f9 4e       	sbci	r31, 0xE9	; 233
    165c:	e2 0f       	add	r30, r18
    165e:	f3 1f       	adc	r31, r19
    1660:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY + 1;
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1668:	a7 e0       	ldi	r26, 0x07	; 7
    166a:	8a 9f       	mul	r24, r26
    166c:	20 0d       	add	r18, r0
    166e:	31 1d       	adc	r19, r1
    1670:	11 24       	eor	r1, r1
    1672:	f9 01       	movw	r30, r18
    1674:	ec 56       	subi	r30, 0x6C	; 108
    1676:	f9 4e       	sbci	r31, 0xE9	; 233
    1678:	84 e0       	ldi	r24, 0x04	; 4
    167a:	80 83       	st	Z, r24
					levelFinish = 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <levelFinish>
				}
			}
			if((player1.playerPosX != player1.bombPosX || player1.playerPosY != player1.bombPosY) && player1.isBombPlaced != 0) {
    1682:	e9 e9       	ldi	r30, 0x99	; 153
    1684:	f6 e0       	ldi	r31, 0x06	; 6
    1686:	24 81       	ldd	r18, Z+4	; 0x04
    1688:	80 81       	ld	r24, Z
    168a:	82 13       	cpse	r24, r18
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <TickGameLogic+0x74a>
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	85 81       	ldd	r24, Z+5	; 0x05
    1692:	98 17       	cp	r25, r24
    1694:	81 f0       	breq	.+32     	; 0x16b6 <TickGameLogic+0x76a>
    1696:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <player1+0x3>
    169a:	88 23       	and	r24, r24
    169c:	61 f0       	breq	.+24     	; 0x16b6 <TickGameLogic+0x76a>
				objectLocMatrix[player1.bombPosY][player1.bombPosX] = OBJBomb;
    169e:	e0 91 9e 06 	lds	r30, 0x069E	; 0x80069e <player1+0x5>
    16a2:	b7 e0       	ldi	r27, 0x07	; 7
    16a4:	eb 9f       	mul	r30, r27
    16a6:	f0 01       	movw	r30, r0
    16a8:	11 24       	eor	r1, r1
    16aa:	ec 56       	subi	r30, 0x6C	; 108
    16ac:	f9 4e       	sbci	r31, 0xE9	; 233
    16ae:	e2 0f       	add	r30, r18
    16b0:	f1 1d       	adc	r31, r1
    16b2:	86 e0       	ldi	r24, 0x06	; 6
    16b4:	80 83       	st	Z, r24
			}
			
			
			//Check Bomb And Explosion Objs
			while(explodeStackSize != 0) {
    16b6:	80 91 93 16 	lds	r24, 0x1693	; 0x801693 <explodeStackSize>
    16ba:	88 23       	and	r24, r24
    16bc:	b9 f0       	breq	.+46     	; 0x16ec <TickGameLogic+0x7a0>
				objectLocMatrix[explodeStack[explodeStackSize - 1].posY][explodeStack[explodeStackSize - 1].posX] = OBJEmpty;
    16be:	a8 2f       	mov	r26, r24
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	aa 0f       	add	r26, r26
    16c4:	bb 1f       	adc	r27, r27
    16c6:	a9 54       	subi	r26, 0x49	; 73
    16c8:	b9 4f       	sbci	r27, 0xF9	; 249
    16ca:	11 96       	adiw	r26, 0x01	; 1
    16cc:	ec 91       	ld	r30, X
    16ce:	11 97       	sbiw	r26, 0x01	; 1
    16d0:	9c 91       	ld	r25, X
    16d2:	37 e0       	ldi	r19, 0x07	; 7
    16d4:	e3 9f       	mul	r30, r19
    16d6:	f0 01       	movw	r30, r0
    16d8:	11 24       	eor	r1, r1
    16da:	ec 56       	subi	r30, 0x6C	; 108
    16dc:	f9 4e       	sbci	r31, 0xE9	; 233
    16de:	e9 0f       	add	r30, r25
    16e0:	f1 1d       	adc	r31, r1
    16e2:	10 82       	st	Z, r1
				explodeStackSize = explodeStackSize - 1;
    16e4:	81 50       	subi	r24, 0x01	; 1
				objectLocMatrix[player1.bombPosY][player1.bombPosX] = OBJBomb;
			}
			
			
			//Check Bomb And Explosion Objs
			while(explodeStackSize != 0) {
    16e6:	59 f7       	brne	.-42     	; 0x16be <TickGameLogic+0x772>
    16e8:	10 92 93 16 	sts	0x1693, r1	; 0x801693 <explodeStackSize>
				objectLocMatrix[explodeStack[explodeStackSize - 1].posY][explodeStack[explodeStackSize - 1].posX] = OBJEmpty;
				explodeStackSize = explodeStackSize - 1;
			}
			
			if(player1.bombCount < BOMBPERIOD && player1.isBombPlaced != 0) {
    16ec:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <player1+0x6>
    16f0:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <player1+0x7>
    16f4:	8e 31       	cpi	r24, 0x1E	; 30
    16f6:	91 05       	cpc	r25, r1
    16f8:	58 f4       	brcc	.+22     	; 0x1710 <TickGameLogic+0x7c4>
    16fa:	20 91 9c 06 	lds	r18, 0x069C	; 0x80069c <player1+0x3>
    16fe:	22 23       	and	r18, r18
    1700:	09 f4       	brne	.+2      	; 0x1704 <TickGameLogic+0x7b8>
    1702:	08 c2       	rjmp	.+1040   	; 0x1b14 <TickGameLogic+0xbc8>
				player1.bombCount += 1;
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	90 93 a0 06 	sts	0x06A0, r25	; 0x8006a0 <player1+0x7>
    170a:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <player1+0x6>
    170e:	02 c2       	rjmp	.+1028   	; 0x1b14 <TickGameLogic+0xbc8>
			}
			else if(player1.bombCount >= BOMBPERIOD && player1.isBombPlaced != 0) {
    1710:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <player1+0x3>
    1714:	88 23       	and	r24, r24
    1716:	09 f4       	brne	.+2      	; 0x171a <TickGameLogic+0x7ce>
    1718:	fd c1       	rjmp	.+1018   	; 0x1b14 <TickGameLogic+0xbc8>
				tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX)];
    171a:	30 91 9e 06 	lds	r19, 0x069E	; 0x80069e <player1+0x5>
    171e:	42 2f       	mov	r20, r18
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	63 2f       	mov	r22, r19
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	fa 01       	movw	r30, r20
    1728:	87 e0       	ldi	r24, 0x07	; 7
    172a:	38 9f       	mul	r19, r24
    172c:	e0 0d       	add	r30, r0
    172e:	f1 1d       	adc	r31, r1
    1730:	11 24       	eor	r1, r1
    1732:	ec 56       	subi	r30, 0x6C	; 108
    1734:	f9 4e       	sbci	r31, 0xE9	; 233
    1736:	90 81       	ld	r25, Z
				vibrateQueue[vibrateQueueEnd] = 10;
    1738:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <vibrateQueueEnd>
    173c:	e8 2f       	mov	r30, r24
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	ea 56       	subi	r30, 0x6A	; 106
    1742:	f9 4f       	sbci	r31, 0xF9	; 249
    1744:	aa e0       	ldi	r26, 0x0A	; 10
    1746:	a0 83       	st	Z, r26
				if(vibrateQueueEnd >= 2) {
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	18 f0       	brcs	.+6      	; 0x1752 <TickGameLogic+0x806>
					vibrateQueueEnd = 0;
    174c:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <vibrateQueueEnd>
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <TickGameLogic+0x80c>
				}
				else {
					vibrateQueueEnd = vibrateQueueEnd + 1;
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <vibrateQueueEnd>
				}
				vibrateQueueSize = vibrateQueueSize + 1;
    1758:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <vibrateQueueSize>
    175c:	8f 5f       	subi	r24, 0xFF	; 255
    175e:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <vibrateQueueSize>
				
				soundQueue[soundQueueEnd] = NOTE_B0;
    1762:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <soundQueueEnd>
    1766:	e8 2f       	mov	r30, r24
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	ee 0f       	add	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	e7 55       	subi	r30, 0x57	; 87
    1774:	f9 4f       	sbci	r31, 0xF9	; 249
    1776:	0f 2e       	mov	r0, r31
    1778:	c1 2c       	mov	r12, r1
    177a:	d1 2c       	mov	r13, r1
    177c:	f8 ef       	ldi	r31, 0xF8	; 248
    177e:	ef 2e       	mov	r14, r31
    1780:	f1 e4       	ldi	r31, 0x41	; 65
    1782:	ff 2e       	mov	r15, r31
    1784:	f0 2d       	mov	r31, r0
    1786:	c0 82       	st	Z, r12
    1788:	d1 82       	std	Z+1, r13	; 0x01
    178a:	e2 82       	std	Z+2, r14	; 0x02
    178c:	f3 82       	std	Z+3, r15	; 0x03
				if(soundQueueEnd >= 2) {
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	18 f0       	brcs	.+6      	; 0x1798 <TickGameLogic+0x84c>
					soundQueueEnd = 0;
    1792:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <soundQueueEnd>
    1796:	03 c0       	rjmp	.+6      	; 0x179e <TickGameLogic+0x852>
				}
				else {
					soundQueueEnd = soundQueueEnd + 1;
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <soundQueueEnd>
				}
				soundQueueSize = soundQueueSize + 1;
    179e:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <soundQueueSize>
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <soundQueueSize>
				
				if(tempObj == OBJPlayer){
    17a8:	94 30       	cpi	r25, 0x04	; 4
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <TickGameLogic+0x868>
					gameOver = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
    17b2:	17 c0       	rjmp	.+46     	; 0x17e2 <TickGameLogic+0x896>
				}
				else {
					struct explodeNode tempExplo;
					tempExplo.posX = player1.bombPosX;
					tempExplo.posY = player1.bombPosY;
					objectLocMatrix[player1.bombPosY][(player1.bombPosX)] = OBJExplode;
    17b4:	cb 01       	movw	r24, r22
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	86 1b       	sub	r24, r22
    17c4:	97 0b       	sbc	r25, r23
    17c6:	8c 56       	subi	r24, 0x6C	; 108
    17c8:	99 4e       	sbci	r25, 0xE9	; 233
    17ca:	fc 01       	movw	r30, r24
    17cc:	e4 0f       	add	r30, r20
    17ce:	f5 1f       	adc	r31, r21
    17d0:	48 e0       	ldi	r20, 0x08	; 8
    17d2:	40 83       	st	Z, r20
					explodeStack[explodeStackSize] = tempExplo;
    17d4:	e9 eb       	ldi	r30, 0xB9	; 185
    17d6:	f6 e0       	ldi	r31, 0x06	; 6
    17d8:	20 83       	st	Z, r18
    17da:	31 83       	std	Z+1, r19	; 0x01
					explodeStackSize = explodeStackSize + 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 93 16 	sts	0x1693, r24	; 0x801693 <explodeStackSize>
				}
				
				if(player1.bombPosX != 6) {
    17e2:	80 91 9d 06 	lds	r24, 0x069D	; 0x80069d <player1+0x4>
    17e6:	86 30       	cpi	r24, 0x06	; 6
    17e8:	09 f4       	brne	.+2      	; 0x17ec <TickGameLogic+0x8a0>
    17ea:	66 c0       	rjmp	.+204    	; 0x18b8 <TickGameLogic+0x96c>
					tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)];
    17ec:	40 91 9e 06 	lds	r20, 0x069E	; 0x80069e <player1+0x5>
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	2f 5f       	subi	r18, 0xFF	; 255
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	64 2f       	mov	r22, r20
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	f9 01       	movw	r30, r18
    17fe:	97 e0       	ldi	r25, 0x07	; 7
    1800:	49 9f       	mul	r20, r25
    1802:	e0 0d       	add	r30, r0
    1804:	f1 1d       	adc	r31, r1
    1806:	11 24       	eor	r1, r1
    1808:	ec 56       	subi	r30, 0x6C	; 108
    180a:	f9 4e       	sbci	r31, 0xE9	; 233
    180c:	90 81       	ld	r25, Z
					if(tempObj == OBJEmpty || tempObj == OBJWall){
    180e:	92 30       	cpi	r25, 0x02	; 2
    1810:	70 f5       	brcc	.+92     	; 0x186e <TickGameLogic+0x922>
						struct explodeNode tempExplo;
						tempExplo.posX = player1.bombPosX + 1;
						tempExplo.posY = player1.bombPosY;
						objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)] = OBJExplode;
    1812:	fb 01       	movw	r30, r22
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	df 01       	movw	r26, r30
    1822:	a6 1b       	sub	r26, r22
    1824:	b7 0b       	sbc	r27, r23
    1826:	bd 01       	movw	r22, r26
    1828:	6c 56       	subi	r22, 0x6C	; 108
    182a:	79 4e       	sbci	r23, 0xE9	; 233
    182c:	fb 01       	movw	r30, r22
    182e:	e2 0f       	add	r30, r18
    1830:	f3 1f       	adc	r31, r19
    1832:	58 e0       	ldi	r21, 0x08	; 8
    1834:	50 83       	st	Z, r21
						explodeStack[explodeStackSize] = tempExplo;
    1836:	20 91 93 16 	lds	r18, 0x1693	; 0x801693 <explodeStackSize>
    183a:	e2 2f       	mov	r30, r18
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	e7 54       	subi	r30, 0x47	; 71
    1844:	f9 4f       	sbci	r31, 0xF9	; 249
    1846:	31 e0       	ldi	r19, 0x01	; 1
    1848:	38 0f       	add	r19, r24
    184a:	30 83       	st	Z, r19
    184c:	41 83       	std	Z+1, r20	; 0x01
						explodeStackSize = explodeStackSize + 1;
    184e:	2f 5f       	subi	r18, 0xFF	; 255
    1850:	20 93 93 16 	sts	0x1693, r18	; 0x801693 <explodeStackSize>
						if(tempObj == OBJWall) {
    1854:	91 30       	cpi	r25, 0x01	; 1
    1856:	69 f5       	brne	.+90     	; 0x18b2 <TickGameLogic+0x966>
							tempScore = tempScore + 1;
    1858:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    185c:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    1868:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    186c:	22 c0       	rjmp	.+68     	; 0x18b2 <TickGameLogic+0x966>
						}
					}
					else if(tempObj == OBJHidden){
    186e:	92 30       	cpi	r25, 0x02	; 2
    1870:	d9 f4       	brne	.+54     	; 0x18a8 <TickGameLogic+0x95c>
						objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)] = OBJDoor;
    1872:	ab 01       	movw	r20, r22
    1874:	44 0f       	add	r20, r20
    1876:	55 1f       	adc	r21, r21
    1878:	44 0f       	add	r20, r20
    187a:	55 1f       	adc	r21, r21
    187c:	44 0f       	add	r20, r20
    187e:	55 1f       	adc	r21, r21
    1880:	46 1b       	sub	r20, r22
    1882:	57 0b       	sbc	r21, r23
    1884:	4c 56       	subi	r20, 0x6C	; 108
    1886:	59 4e       	sbci	r21, 0xE9	; 233
    1888:	fa 01       	movw	r30, r20
    188a:	e2 0f       	add	r30, r18
    188c:	f3 1f       	adc	r31, r19
    188e:	93 e0       	ldi	r25, 0x03	; 3
    1890:	90 83       	st	Z, r25
						tempScore = tempScore + 5;
    1892:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    1896:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    189a:	2b 5f       	subi	r18, 0xFB	; 251
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    18a2:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <TickGameLogic+0x966>
					}
					else if(tempObj == OBJPlayer){
    18a8:	94 30       	cpi	r25, 0x04	; 4
    18aa:	19 f4       	brne	.+6      	; 0x18b2 <TickGameLogic+0x966>
						gameOver = 1;
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <gameOver>
					}
				}
				if(player1.bombPosX != 0) {
    18b2:	88 23       	and	r24, r24
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <TickGameLogic+0x96c>
    18b6:	60 c0       	rjmp	.+192    	; 0x1978 <TickGameLogic+0xa2c>
					tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)];
    18b8:	20 91 9e 06 	lds	r18, 0x069E	; 0x80069e <player1+0x5>
    18bc:	e8 2f       	mov	r30, r24
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	af 01       	movw	r20, r30
    18c2:	41 50       	subi	r20, 0x01	; 1
    18c4:	51 09       	sbc	r21, r1
    18c6:	62 2f       	mov	r22, r18
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	fa 01       	movw	r30, r20
    18cc:	b7 e0       	ldi	r27, 0x07	; 7
    18ce:	2b 9f       	mul	r18, r27
    18d0:	e0 0d       	add	r30, r0
    18d2:	f1 1d       	adc	r31, r1
    18d4:	11 24       	eor	r1, r1
    18d6:	ec 56       	subi	r30, 0x6C	; 108
    18d8:	f9 4e       	sbci	r31, 0xE9	; 233
    18da:	90 81       	ld	r25, Z
					if(tempObj == OBJEmpty || tempObj == OBJWall){
    18dc:	92 30       	cpi	r25, 0x02	; 2
    18de:	58 f5       	brcc	.+86     	; 0x1936 <TickGameLogic+0x9ea>
						struct explodeNode tempExplo;
						tempExplo.posX = player1.bombPosX - 1;
						tempExplo.posY = player1.bombPosY;
						objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)] = OBJExplode;
    18e0:	fb 01       	movw	r30, r22
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	ee 0f       	add	r30, r30
    18ec:	ff 1f       	adc	r31, r31
    18ee:	e6 1b       	sub	r30, r22
    18f0:	f7 0b       	sbc	r31, r23
    18f2:	ec 56       	subi	r30, 0x6C	; 108
    18f4:	f9 4e       	sbci	r31, 0xE9	; 233
    18f6:	e4 0f       	add	r30, r20
    18f8:	f5 1f       	adc	r31, r21
    18fa:	38 e0       	ldi	r19, 0x08	; 8
    18fc:	30 83       	st	Z, r19
						explodeStack[explodeStackSize] = tempExplo;
    18fe:	30 91 93 16 	lds	r19, 0x1693	; 0x801693 <explodeStackSize>
    1902:	e3 2f       	mov	r30, r19
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	ee 0f       	add	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	e7 54       	subi	r30, 0x47	; 71
    190c:	f9 4f       	sbci	r31, 0xF9	; 249
    190e:	4f ef       	ldi	r20, 0xFF	; 255
    1910:	48 0f       	add	r20, r24
    1912:	40 83       	st	Z, r20
    1914:	21 83       	std	Z+1, r18	; 0x01
						explodeStackSize = explodeStackSize + 1;
    1916:	3f 5f       	subi	r19, 0xFF	; 255
    1918:	30 93 93 16 	sts	0x1693, r19	; 0x801693 <explodeStackSize>
						if(tempObj == OBJWall) {
    191c:	91 30       	cpi	r25, 0x01	; 1
    191e:	61 f5       	brne	.+88     	; 0x1978 <TickGameLogic+0xa2c>
							tempScore = tempScore + 1;
    1920:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    1924:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1928:	2f 5f       	subi	r18, 0xFF	; 255
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
    192c:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    1930:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    1934:	21 c0       	rjmp	.+66     	; 0x1978 <TickGameLogic+0xa2c>
						}
					}
					else if(tempObj == OBJHidden){
    1936:	92 30       	cpi	r25, 0x02	; 2
    1938:	d1 f4       	brne	.+52     	; 0x196e <TickGameLogic+0xa22>
						objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)] = OBJDoor;
    193a:	fb 01       	movw	r30, r22
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	ee 0f       	add	r30, r30
    1942:	ff 1f       	adc	r31, r31
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	e6 1b       	sub	r30, r22
    194a:	f7 0b       	sbc	r31, r23
    194c:	ec 56       	subi	r30, 0x6C	; 108
    194e:	f9 4e       	sbci	r31, 0xE9	; 233
    1950:	e4 0f       	add	r30, r20
    1952:	f5 1f       	adc	r31, r21
    1954:	93 e0       	ldi	r25, 0x03	; 3
    1956:	90 83       	st	Z, r25
						tempScore = tempScore + 5;
    1958:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    195c:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1960:	2b 5f       	subi	r18, 0xFB	; 251
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    1968:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <TickGameLogic+0xa2c>
					}
					else if(tempObj == OBJPlayer){
    196e:	94 30       	cpi	r25, 0x04	; 4
    1970:	19 f4       	brne	.+6      	; 0x1978 <TickGameLogic+0xa2c>
						gameOver = 1;
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <gameOver>
					}
				}
				if(player1.bombPosY != 0) {
    1978:	90 91 9e 06 	lds	r25, 0x069E	; 0x80069e <player1+0x5>
    197c:	99 23       	and	r25, r25
    197e:	09 f4       	brne	.+2      	; 0x1982 <TickGameLogic+0xa36>
    1980:	65 c0       	rjmp	.+202    	; 0x1a4c <TickGameLogic+0xb00>
					tempObj = objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)];
    1982:	29 2f       	mov	r18, r25
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	21 50       	subi	r18, 0x01	; 1
    1988:	31 09       	sbc	r19, r1
    198a:	68 2f       	mov	r22, r24
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	f9 01       	movw	r30, r18
    1990:	ee 0f       	add	r30, r30
    1992:	ff 1f       	adc	r31, r31
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	ee 0f       	add	r30, r30
    199a:	ff 1f       	adc	r31, r31
    199c:	e2 1b       	sub	r30, r18
    199e:	f3 0b       	sbc	r31, r19
    19a0:	ec 56       	subi	r30, 0x6C	; 108
    19a2:	f9 4e       	sbci	r31, 0xE9	; 233
    19a4:	e6 0f       	add	r30, r22
    19a6:	f7 1f       	adc	r31, r23
    19a8:	40 81       	ld	r20, Z
					if(tempObj == OBJEmpty || tempObj == OBJWall){
    19aa:	42 30       	cpi	r20, 0x02	; 2
    19ac:	58 f5       	brcc	.+86     	; 0x1a04 <TickGameLogic+0xab8>
						struct explodeNode tempExplo;
						tempExplo.posX = player1.bombPosX;
						tempExplo.posY = player1.bombPosY - 1;
						objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)] = OBJExplode;
    19ae:	f9 01       	movw	r30, r18
    19b0:	ee 0f       	add	r30, r30
    19b2:	ff 1f       	adc	r31, r31
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	ee 0f       	add	r30, r30
    19ba:	ff 1f       	adc	r31, r31
    19bc:	e2 1b       	sub	r30, r18
    19be:	f3 0b       	sbc	r31, r19
    19c0:	ec 56       	subi	r30, 0x6C	; 108
    19c2:	f9 4e       	sbci	r31, 0xE9	; 233
    19c4:	e6 0f       	add	r30, r22
    19c6:	f7 1f       	adc	r31, r23
    19c8:	28 e0       	ldi	r18, 0x08	; 8
    19ca:	20 83       	st	Z, r18
						explodeStack[explodeStackSize] = tempExplo;
    19cc:	20 91 93 16 	lds	r18, 0x1693	; 0x801693 <explodeStackSize>
    19d0:	e2 2f       	mov	r30, r18
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	e7 54       	subi	r30, 0x47	; 71
    19da:	f9 4f       	sbci	r31, 0xF9	; 249
    19dc:	80 83       	st	Z, r24
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	39 0f       	add	r19, r25
    19e2:	31 83       	std	Z+1, r19	; 0x01
						explodeStackSize = explodeStackSize + 1;
    19e4:	2f 5f       	subi	r18, 0xFF	; 255
    19e6:	20 93 93 16 	sts	0x1693, r18	; 0x801693 <explodeStackSize>
						if(tempObj == OBJWall) {
    19ea:	41 30       	cpi	r20, 0x01	; 1
    19ec:	61 f5       	brne	.+88     	; 0x1a46 <TickGameLogic+0xafa>
							tempScore = tempScore + 1;
    19ee:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    19f2:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    19fe:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    1a02:	21 c0       	rjmp	.+66     	; 0x1a46 <TickGameLogic+0xafa>
						}
					}
					else if(tempObj == OBJHidden){
    1a04:	42 30       	cpi	r20, 0x02	; 2
    1a06:	d1 f4       	brne	.+52     	; 0x1a3c <TickGameLogic+0xaf0>
						objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)] = OBJDoor;
    1a08:	f9 01       	movw	r30, r18
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	ee 0f       	add	r30, r30
    1a10:	ff 1f       	adc	r31, r31
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	e2 1b       	sub	r30, r18
    1a18:	f3 0b       	sbc	r31, r19
    1a1a:	ec 56       	subi	r30, 0x6C	; 108
    1a1c:	f9 4e       	sbci	r31, 0xE9	; 233
    1a1e:	e6 0f       	add	r30, r22
    1a20:	f7 1f       	adc	r31, r23
    1a22:	23 e0       	ldi	r18, 0x03	; 3
    1a24:	20 83       	st	Z, r18
						tempScore = tempScore + 5;
    1a26:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <tempScore>
    1a2a:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <tempScore+0x1>
    1a2e:	2b 5f       	subi	r18, 0xFB	; 251
    1a30:	3f 4f       	sbci	r19, 0xFF	; 255
    1a32:	30 93 90 06 	sts	0x0690, r19	; 0x800690 <tempScore+0x1>
    1a36:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <tempScore>
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <TickGameLogic+0xafa>
					}
					else if(tempObj == OBJPlayer){
    1a3c:	44 30       	cpi	r20, 0x04	; 4
    1a3e:	19 f4       	brne	.+6      	; 0x1a46 <TickGameLogic+0xafa>
						gameOver = 1;
    1a40:	21 e0       	ldi	r18, 0x01	; 1
    1a42:	20 93 a3 06 	sts	0x06A3, r18	; 0x8006a3 <gameOver>
					}
				}
				if(player1.bombPosY != 2) {
    1a46:	92 30       	cpi	r25, 0x02	; 2
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <TickGameLogic+0xb00>
    1a4a:	5f c0       	rjmp	.+190    	; 0x1b0a <TickGameLogic+0xbbe>
					tempObj = objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)];
    1a4c:	29 2f       	mov	r18, r25
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	2f 5f       	subi	r18, 0xFF	; 255
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	68 2f       	mov	r22, r24
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	f9 01       	movw	r30, r18
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	ee 0f       	add	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	ee 0f       	add	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	e2 1b       	sub	r30, r18
    1a68:	f3 0b       	sbc	r31, r19
    1a6a:	ec 56       	subi	r30, 0x6C	; 108
    1a6c:	f9 4e       	sbci	r31, 0xE9	; 233
    1a6e:	e6 0f       	add	r30, r22
    1a70:	f7 1f       	adc	r31, r23
    1a72:	40 81       	ld	r20, Z
					if(tempObj == OBJEmpty || tempObj == OBJWall){
    1a74:	42 30       	cpi	r20, 0x02	; 2
    1a76:	48 f5       	brcc	.+82     	; 0x1aca <TickGameLogic+0xb7e>
						struct explodeNode tempExplo;
						tempExplo.posX = player1.bombPosX;
						tempExplo.posY = player1.bombPosY + 1;
						objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)] = OBJExplode;
    1a78:	f9 01       	movw	r30, r18
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	e2 1b       	sub	r30, r18
    1a88:	f3 0b       	sbc	r31, r19
    1a8a:	ec 56       	subi	r30, 0x6C	; 108
    1a8c:	f9 4e       	sbci	r31, 0xE9	; 233
    1a8e:	e6 0f       	add	r30, r22
    1a90:	f7 1f       	adc	r31, r23
    1a92:	28 e0       	ldi	r18, 0x08	; 8
    1a94:	20 83       	st	Z, r18
						explodeStack[explodeStackSize] = tempExplo;
    1a96:	20 91 93 16 	lds	r18, 0x1693	; 0x801693 <explodeStackSize>
    1a9a:	e2 2f       	mov	r30, r18
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e7 54       	subi	r30, 0x47	; 71
    1aa4:	f9 4f       	sbci	r31, 0xF9	; 249
    1aa6:	80 83       	st	Z, r24
    1aa8:	9f 5f       	subi	r25, 0xFF	; 255
    1aaa:	91 83       	std	Z+1, r25	; 0x01
						explodeStackSize = explodeStackSize + 1;
    1aac:	2f 5f       	subi	r18, 0xFF	; 255
    1aae:	20 93 93 16 	sts	0x1693, r18	; 0x801693 <explodeStackSize>
						if(tempObj == OBJWall) {
    1ab2:	41 30       	cpi	r20, 0x01	; 1
    1ab4:	51 f5       	brne	.+84     	; 0x1b0a <TickGameLogic+0xbbe>
							tempScore = tempScore + 1;
    1ab6:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <tempScore>
    1aba:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <tempScore+0x1>
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <tempScore+0x1>
    1ac4:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <tempScore>
    1ac8:	20 c0       	rjmp	.+64     	; 0x1b0a <TickGameLogic+0xbbe>
						}
					}
					else if(tempObj == OBJHidden){
    1aca:	42 30       	cpi	r20, 0x02	; 2
    1acc:	c9 f4       	brne	.+50     	; 0x1b00 <TickGameLogic+0xbb4>
						objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)] = OBJDoor;
    1ace:	f9 01       	movw	r30, r18
    1ad0:	ee 0f       	add	r30, r30
    1ad2:	ff 1f       	adc	r31, r31
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	e2 1b       	sub	r30, r18
    1ade:	f3 0b       	sbc	r31, r19
    1ae0:	ec 56       	subi	r30, 0x6C	; 108
    1ae2:	f9 4e       	sbci	r31, 0xE9	; 233
    1ae4:	e6 0f       	add	r30, r22
    1ae6:	f7 1f       	adc	r31, r23
    1ae8:	83 e0       	ldi	r24, 0x03	; 3
    1aea:	80 83       	st	Z, r24
						tempScore = tempScore + 5;
    1aec:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <tempScore>
    1af0:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <tempScore+0x1>
    1af4:	05 96       	adiw	r24, 0x05	; 5
    1af6:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <tempScore+0x1>
    1afa:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <tempScore>
    1afe:	05 c0       	rjmp	.+10     	; 0x1b0a <TickGameLogic+0xbbe>
					}
					else if(tempObj == OBJPlayer){
    1b00:	44 30       	cpi	r20, 0x04	; 4
    1b02:	19 f4       	brne	.+6      	; 0x1b0a <TickGameLogic+0xbbe>
						gameOver = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
					}
				}
				player1.bombCount = 0;
    1b0a:	e9 e9       	ldi	r30, 0x99	; 153
    1b0c:	f6 e0       	ldi	r31, 0x06	; 6
    1b0e:	17 82       	std	Z+7, r1	; 0x07
				player1.isBombPlaced = 0;
    1b10:	16 82       	std	Z+6, r1	; 0x06
			}
			
			transferObjToDis();
    1b12:	13 82       	std	Z+3, r1	; 0x03
    1b14:	5b d8       	rcall	.-3914   	; 0xbcc <transferObjToDis>
			
			displayScore[2] = (tempScore % 10) + '0';
    1b16:	c0 91 8f 06 	lds	r28, 0x068F	; 0x80068f <tempScore>
    1b1a:	d0 91 90 06 	lds	r29, 0x0690	; 0x800690 <tempScore+0x1>
    1b1e:	e2 e9       	ldi	r30, 0x92	; 146
    1b20:	f6 e0       	ldi	r31, 0x06	; 6
    1b22:	9e 01       	movw	r18, r28
    1b24:	ad ec       	ldi	r26, 0xCD	; 205
    1b26:	bc ec       	ldi	r27, 0xCC	; 204
    1b28:	d2 d5       	rcall	.+2980   	; 0x26ce <__umulhisi3>
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	56 95       	lsr	r21
    1b2e:	47 95       	ror	r20
    1b30:	56 95       	lsr	r21
    1b32:	47 95       	ror	r20
    1b34:	56 95       	lsr	r21
    1b36:	47 95       	ror	r20
    1b38:	9a 01       	movw	r18, r20
    1b3a:	22 0f       	add	r18, r18
    1b3c:	33 1f       	adc	r19, r19
    1b3e:	ca 01       	movw	r24, r20
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	82 0f       	add	r24, r18
    1b4e:	93 1f       	adc	r25, r19
    1b50:	9e 01       	movw	r18, r28
    1b52:	28 1b       	sub	r18, r24
    1b54:	39 0b       	sbc	r19, r25
    1b56:	c9 01       	movw	r24, r18
    1b58:	80 5d       	subi	r24, 0xD0	; 208
			displayScore[1] = ((tempScore / 10) % 10) + '0';
    1b5a:	82 83       	std	Z+2, r24	; 0x02
    1b5c:	9a 01       	movw	r18, r20
    1b5e:	b7 d5       	rcall	.+2926   	; 0x26ce <__umulhisi3>
    1b60:	96 95       	lsr	r25
    1b62:	87 95       	ror	r24
    1b64:	96 95       	lsr	r25
    1b66:	87 95       	ror	r24
    1b68:	96 95       	lsr	r25
    1b6a:	87 95       	ror	r24
    1b6c:	9c 01       	movw	r18, r24
    1b6e:	22 0f       	add	r18, r18
    1b70:	33 1f       	adc	r19, r19
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	82 0f       	add	r24, r18
    1b80:	93 1f       	adc	r25, r19
    1b82:	48 1b       	sub	r20, r24
    1b84:	59 0b       	sbc	r21, r25
    1b86:	40 5d       	subi	r20, 0xD0	; 208
    1b88:	41 83       	std	Z+1, r20	; 0x01
			displayScore[0] = ((tempScore / 100) % 10) + '0';
    1b8a:	9e 01       	movw	r18, r28
    1b8c:	36 95       	lsr	r19
    1b8e:	27 95       	ror	r18
    1b90:	36 95       	lsr	r19
    1b92:	27 95       	ror	r18
    1b94:	ab e7       	ldi	r26, 0x7B	; 123
    1b96:	b4 e1       	ldi	r27, 0x14	; 20
    1b98:	9a d5       	rcall	.+2868   	; 0x26ce <__umulhisi3>
    1b9a:	ac 01       	movw	r20, r24
    1b9c:	56 95       	lsr	r21
    1b9e:	47 95       	ror	r20
    1ba0:	9a 01       	movw	r18, r20
    1ba2:	ad ec       	ldi	r26, 0xCD	; 205
    1ba4:	bc ec       	ldi	r27, 0xCC	; 204
    1ba6:	93 d5       	rcall	.+2854   	; 0x26ce <__umulhisi3>
    1ba8:	96 95       	lsr	r25
    1baa:	87 95       	ror	r24
    1bac:	96 95       	lsr	r25
    1bae:	87 95       	ror	r24
    1bb0:	96 95       	lsr	r25
    1bb2:	87 95       	ror	r24
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	22 0f       	add	r18, r18
    1bb8:	33 1f       	adc	r19, r19
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	82 0f       	add	r24, r18
    1bc8:	93 1f       	adc	r25, r19
    1bca:	48 1b       	sub	r20, r24
    1bcc:	59 0b       	sbc	r21, r25
    1bce:	40 5d       	subi	r20, 0xD0	; 208
    1bd0:	40 83       	st	Z, r20
			if(gameTimerCountSecond >= gameTimerCountSecondPeriod) {
    1bd2:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <gameTimerCountSecond>
    1bd6:	8a 30       	cpi	r24, 0x0A	; 10
    1bd8:	88 f0       	brcs	.+34     	; 0x1bfc <TickGameLogic+0xcb0>
				gameTimer = gameTimer - 1;
    1bda:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <gameTimer>
    1bde:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <gameTimer+0x1>
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <gameTimer+0x1>
    1be8:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <gameTimer>
				if(gameTimer == 0) {
    1bec:	89 2b       	or	r24, r25
    1bee:	19 f4       	brne	.+6      	; 0x1bf6 <TickGameLogic+0xcaa>
					gameOver = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <gameOver>
				}
				gameTimerCountSecond = 0;
    1bf6:	10 92 95 06 	sts	0x0695, r1	; 0x800695 <gameTimerCountSecond>
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <TickGameLogic+0xcb6>
			}
			else {
				gameTimerCountSecond = gameTimerCountSecond + 1;
    1bfc:	8f 5f       	subi	r24, 0xFF	; 255
    1bfe:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <gameTimerCountSecond>
			}
			displayGameTimer[2] = (gameTimer % 10) + '0';
    1c02:	c0 91 cd 06 	lds	r28, 0x06CD	; 0x8006cd <gameTimer>
    1c06:	d0 91 ce 06 	lds	r29, 0x06CE	; 0x8006ce <gameTimer+0x1>
    1c0a:	e6 ea       	ldi	r30, 0xA6	; 166
    1c0c:	f6 e0       	ldi	r31, 0x06	; 6
    1c0e:	9e 01       	movw	r18, r28
    1c10:	ad ec       	ldi	r26, 0xCD	; 205
    1c12:	bc ec       	ldi	r27, 0xCC	; 204
    1c14:	5c d5       	rcall	.+2744   	; 0x26ce <__umulhisi3>
    1c16:	ac 01       	movw	r20, r24
    1c18:	56 95       	lsr	r21
    1c1a:	47 95       	ror	r20
    1c1c:	56 95       	lsr	r21
    1c1e:	47 95       	ror	r20
    1c20:	56 95       	lsr	r21
    1c22:	47 95       	ror	r20
    1c24:	9a 01       	movw	r18, r20
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	ca 01       	movw	r24, r20
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	82 0f       	add	r24, r18
    1c3a:	93 1f       	adc	r25, r19
    1c3c:	de 01       	movw	r26, r28
    1c3e:	a8 1b       	sub	r26, r24
    1c40:	b9 0b       	sbc	r27, r25
    1c42:	cd 01       	movw	r24, r26
    1c44:	80 5d       	subi	r24, 0xD0	; 208
			displayGameTimer[1] = ((gameTimer / 10) % 10) + '0';
    1c46:	82 83       	std	Z+2, r24	; 0x02
    1c48:	9a 01       	movw	r18, r20
    1c4a:	ad ec       	ldi	r26, 0xCD	; 205
    1c4c:	bc ec       	ldi	r27, 0xCC	; 204
    1c4e:	3f d5       	rcall	.+2686   	; 0x26ce <__umulhisi3>
    1c50:	96 95       	lsr	r25
    1c52:	87 95       	ror	r24
    1c54:	96 95       	lsr	r25
    1c56:	87 95       	ror	r24
    1c58:	96 95       	lsr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	9c 01       	movw	r18, r24
    1c5e:	22 0f       	add	r18, r18
    1c60:	33 1f       	adc	r19, r19
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	82 0f       	add	r24, r18
    1c70:	93 1f       	adc	r25, r19
    1c72:	48 1b       	sub	r20, r24
    1c74:	59 0b       	sbc	r21, r25
    1c76:	40 5d       	subi	r20, 0xD0	; 208
			displayGameTimer[0] = ((gameTimer / 100) % 10) + '0';
    1c78:	41 83       	std	Z+1, r20	; 0x01
    1c7a:	9e 01       	movw	r18, r28
    1c7c:	36 95       	lsr	r19
    1c7e:	27 95       	ror	r18
    1c80:	36 95       	lsr	r19
    1c82:	27 95       	ror	r18
    1c84:	ab e7       	ldi	r26, 0x7B	; 123
    1c86:	b4 e1       	ldi	r27, 0x14	; 20
    1c88:	22 d5       	rcall	.+2628   	; 0x26ce <__umulhisi3>
    1c8a:	ac 01       	movw	r20, r24
    1c8c:	56 95       	lsr	r21
    1c8e:	47 95       	ror	r20
    1c90:	9a 01       	movw	r18, r20
    1c92:	ad ec       	ldi	r26, 0xCD	; 205
    1c94:	bc ec       	ldi	r27, 0xCC	; 204
    1c96:	1b d5       	rcall	.+2614   	; 0x26ce <__umulhisi3>
    1c98:	96 95       	lsr	r25
    1c9a:	87 95       	ror	r24
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	96 95       	lsr	r25
    1ca2:	87 95       	ror	r24
    1ca4:	9c 01       	movw	r18, r24
    1ca6:	22 0f       	add	r18, r18
    1ca8:	33 1f       	adc	r19, r19
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	82 0f       	add	r24, r18
    1cb8:	93 1f       	adc	r25, r19
    1cba:	48 1b       	sub	r20, r24
    1cbc:	59 0b       	sbc	r21, r25
    1cbe:	40 5d       	subi	r20, 0xD0	; 208
    1cc0:	40 83       	st	Z, r20
			
			
			break;
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	1b c0       	rjmp	.+54     	; 0x1cfc <TickGameLogic+0xdb0>
			
			case GLogicGameOver:
			currentGameState = GLogicGameOver;
    1cc6:	85 e0       	ldi	r24, 0x05	; 5
    1cc8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <currentGameState>
			if(highScore < tempScore) {
    1ccc:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <tempScore>
    1cd0:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <tempScore+0x1>
    1cd4:	20 91 b5 06 	lds	r18, 0x06B5	; 0x8006b5 <highScore>
    1cd8:	30 91 b6 06 	lds	r19, 0x06B6	; 0x8006b6 <highScore+0x1>
    1cdc:	28 17       	cp	r18, r24
    1cde:	39 07       	cpc	r19, r25
    1ce0:	20 f4       	brcc	.+8      	; 0x1cea <TickGameLogic+0xd9e>
				highScore = tempScore;
    1ce2:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <highScore+0x1>
    1ce6:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <highScore>
			}
			menuInputDelayCount = 0;
    1cea:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <menuInputDelayCount+0x1>
    1cee:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <menuInputDelayCount>
			break;
    1cf2:	85 e0       	ldi	r24, 0x05	; 5
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <TickGameLogic+0xdb0>
			state = GLogicMenu;
		}
		break;
		
		default:
		state = GLogicStart;
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <TickGameLogic+0xdb0>
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
			
			default:
			break;
	}
	return state;
}
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	08 95       	ret

00001d0a <matrixToDisplay>:

void matrixToDisplay() {
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	0f 2e       	mov	r0, r31
    1d1c:	f3 ed       	ldi	r31, 0xD3	; 211
    1d1e:	ef 2e       	mov	r14, r31
    1d20:	f6 e0       	ldi	r31, 0x06	; 6
    1d22:	ff 2e       	mov	r15, r31
    1d24:	f0 2d       	mov	r31, r0
	for(unsigned char y = 0; y < 48;y++) {
    1d26:	d0 e0       	ldi	r29, 0x00	; 0
    1d28:	10 c0       	rjmp	.+32     	; 0x1d4a <matrixToDisplay+0x40>
		for(unsigned char x = 0; x < 84; x++) {
			nokia_lcd_set_pixel(x,y, displayMatrix[y][x]);
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	41 91       	ld	r20, Z+
    1d2e:	8f 01       	movw	r16, r30
    1d30:	6d 2f       	mov	r22, r29
    1d32:	8c 2f       	mov	r24, r28
    1d34:	0e 94 45 03 	call	0x68a	; 0x68a <nokia_lcd_set_pixel>
	return state;
}

void matrixToDisplay() {
	for(unsigned char y = 0; y < 48;y++) {
		for(unsigned char x = 0; x < 84; x++) {
    1d38:	cf 5f       	subi	r28, 0xFF	; 255
    1d3a:	c4 35       	cpi	r28, 0x54	; 84
    1d3c:	b1 f7       	brne	.-20     	; 0x1d2a <matrixToDisplay+0x20>
	}
	return state;
}

void matrixToDisplay() {
	for(unsigned char y = 0; y < 48;y++) {
    1d3e:	df 5f       	subi	r29, 0xFF	; 255
    1d40:	f4 e5       	ldi	r31, 0x54	; 84
    1d42:	ef 0e       	add	r14, r31
    1d44:	f1 1c       	adc	r15, r1
    1d46:	d0 33       	cpi	r29, 0x30	; 48
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <matrixToDisplay+0x46>
			break;
	}
	return state;
}

void matrixToDisplay() {
    1d4a:	87 01       	movw	r16, r14
    1d4c:	c0 e0       	ldi	r28, 0x00	; 0
    1d4e:	ed cf       	rjmp	.-38     	; 0x1d2a <matrixToDisplay+0x20>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1d50:	0f 2e       	mov	r0, r31
    1d52:	f7 e8       	ldi	r31, 0x87	; 135
    1d54:	ef 2e       	mov	r14, r31
    1d56:	f6 e0       	ldi	r31, 0x06	; 6
    1d58:	ff 2e       	mov	r15, r31
    1d5a:	f0 2d       	mov	r31, r0
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1d60:	08 e8       	ldi	r16, 0x88	; 136
    1d62:	16 e0       	ldi	r17, 0x06	; 6
    1d64:	c8 e2       	ldi	r28, 0x28	; 40
    1d66:	f8 01       	movw	r30, r16
    1d68:	c0 83       	st	Z, r28
		for(unsigned char x = 0; x < 84; x++) {
			nokia_lcd_set_pixel(x,y, displayMatrix[y][x]);
		}
	}
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_char('S', 1);
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	83 e5       	ldi	r24, 0x53	; 83
    1d6e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1d72:	8a e0       	ldi	r24, 0x0A	; 10
    1d74:	f7 01       	movw	r30, r14
    1d76:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1d78:	f8 01       	movw	r30, r16
    1d7a:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(10,40);
	nokia_lcd_write_char(displayScore[0], 1);
    1d7c:	0f 2e       	mov	r0, r31
    1d7e:	f2 e9       	ldi	r31, 0x92	; 146
    1d80:	cf 2e       	mov	r12, r31
    1d82:	f6 e0       	ldi	r31, 0x06	; 6
    1d84:	df 2e       	mov	r13, r31
    1d86:	f0 2d       	mov	r31, r0
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	f6 01       	movw	r30, r12
    1d8c:	80 81       	ld	r24, Z
    1d8e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1d92:	8f e0       	ldi	r24, 0x0F	; 15
    1d94:	f7 01       	movw	r30, r14
    1d96:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1d98:	f8 01       	movw	r30, r16
    1d9a:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(15,40);
	nokia_lcd_write_char(displayScore[1], 1);
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	f6 01       	movw	r30, r12
    1da0:	81 81       	ldd	r24, Z+1	; 0x01
    1da2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1da6:	84 e1       	ldi	r24, 0x14	; 20
    1da8:	f7 01       	movw	r30, r14
    1daa:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1dac:	f8 01       	movw	r30, r16
    1dae:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(20,40);
	nokia_lcd_write_char(displayScore[2], 1);
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	f6 01       	movw	r30, r12
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1dba:	8e e1       	ldi	r24, 0x1E	; 30
    1dbc:	f7 01       	movw	r30, r14
    1dbe:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	c0 83       	st	Z, r28
	
	nokia_lcd_set_cursor(30,40);
	nokia_lcd_write_char('L', 1);
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	8c e4       	ldi	r24, 0x4C	; 76
    1dc8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1dcc:	83 e2       	ldi	r24, 0x23	; 35
    1dce:	f7 01       	movw	r30, r14
    1dd0:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(35,40);
	nokia_lcd_write_char(':', 1);
    1dd6:	61 e0       	ldi	r22, 0x01	; 1
    1dd8:	8a e3       	ldi	r24, 0x3A	; 58
    1dda:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1dde:	f7 01       	movw	r30, r14
    1de0:	c0 83       	st	Z, r28
	nokia_lcd.cursor_y = y;
    1de2:	f8 01       	movw	r30, r16
    1de4:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(40,40);
	nokia_lcd_write_char('0' + playerLives, 1);
    1de6:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <playerLives>
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	80 5d       	subi	r24, 0xD0	; 208
    1dee:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1df2:	87 e3       	ldi	r24, 0x37	; 55
    1df4:	f7 01       	movw	r30, r14
    1df6:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1df8:	f8 01       	movw	r30, r16
    1dfa:	c0 83       	st	Z, r28
	
	nokia_lcd_set_cursor(55,40);
	nokia_lcd_write_char('T', 1);
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	84 e5       	ldi	r24, 0x54	; 84
    1e00:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1e04:	81 e4       	ldi	r24, 0x41	; 65
    1e06:	f7 01       	movw	r30, r14
    1e08:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(65,40);
	nokia_lcd_write_char(displayGameTimer[0], 1);
    1e0e:	0f 2e       	mov	r0, r31
    1e10:	f6 ea       	ldi	r31, 0xA6	; 166
    1e12:	cf 2e       	mov	r12, r31
    1e14:	f6 e0       	ldi	r31, 0x06	; 6
    1e16:	df 2e       	mov	r13, r31
    1e18:	f0 2d       	mov	r31, r0
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	80 81       	ld	r24, Z
    1e20:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1e24:	86 e4       	ldi	r24, 0x46	; 70
    1e26:	f7 01       	movw	r30, r14
    1e28:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(70,40);
	nokia_lcd_write_char(displayGameTimer[1], 1);
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	f6 01       	movw	r30, r12
    1e32:	81 81       	ldd	r24, Z+1	; 0x01
    1e34:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1e38:	8b e4       	ldi	r24, 0x4B	; 75
    1e3a:	f7 01       	movw	r30, r14
    1e3c:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1e3e:	f8 01       	movw	r30, r16
    1e40:	c0 83       	st	Z, r28
	nokia_lcd_set_cursor(75,40);
	nokia_lcd_write_char(displayGameTimer[2], 1);
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	f6 01       	movw	r30, r12
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
}
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	df 90       	pop	r13
    1e5a:	cf 90       	pop	r12
    1e5c:	08 95       	ret

00001e5e <menuDisplay>:
const char MENUMESSAGE1[] = "R:SAVE L:LOAD";
const char MENUMESSAGE2[] = "SEL: CLEAR";
const char MENUMESSAGE3[] = "B. Maze";
//const char RUMBLEMESSAGE1[] = "RUMBLING!";

void menuDisplay() {
    1e5e:	cf 92       	push	r12
    1e60:	df 92       	push	r13
    1e62:	ff 92       	push	r15
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1e6c:	07 e8       	ldi	r16, 0x87	; 135
    1e6e:	16 e0       	ldi	r17, 0x06	; 6
    1e70:	f8 01       	movw	r30, r16
    1e72:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1e74:	c8 e8       	ldi	r28, 0x88	; 136
    1e76:	d6 e0       	ldi	r29, 0x06	; 6
    1e78:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_string(MENUMESSAGE3,2);
    1e7a:	62 e0       	ldi	r22, 0x02	; 2
    1e7c:	80 e1       	ldi	r24, 0x10	; 16
    1e7e:	94 e0       	ldi	r25, 0x04	; 4
    1e80:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1e84:	f8 01       	movw	r30, r16
    1e86:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1e88:	84 e1       	ldi	r24, 0x14	; 20
    1e8a:	88 83       	st	Y, r24
	
	nokia_lcd_set_cursor(0,20);
	nokia_lcd_write_string(MENUMESSAGE1,1);
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	83 e2       	ldi	r24, 0x23	; 35
    1e90:	94 e0       	ldi	r25, 0x04	; 4
    1e92:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1e96:	f8 01       	movw	r30, r16
    1e98:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1e9a:	0f 2e       	mov	r0, r31
    1e9c:	fe e1       	ldi	r31, 0x1E	; 30
    1e9e:	df 2e       	mov	r13, r31
    1ea0:	f0 2d       	mov	r31, r0
    1ea2:	d8 82       	st	Y, r13
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(MENUMESSAGE2,1);
    1ea4:	61 e0       	ldi	r22, 0x01	; 1
    1ea6:	88 e1       	ldi	r24, 0x18	; 24
    1ea8:	94 e0       	ldi	r25, 0x04	; 4
    1eaa:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1eae:	f8 01       	movw	r30, r16
    1eb0:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1eb2:	0f 2e       	mov	r0, r31
    1eb4:	f8 e2       	ldi	r31, 0x28	; 40
    1eb6:	ff 2e       	mov	r15, r31
    1eb8:	f0 2d       	mov	r31, r0
    1eba:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_char('H', 1);
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	88 e4       	ldi	r24, 0x48	; 72
    1ec0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1ec4:	85 e0       	ldi	r24, 0x05	; 5
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1eca:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(5,40);
	nokia_lcd_write_char('i', 1);
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	89 e6       	ldi	r24, 0x69	; 105
    1ed0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1ed4:	8a e0       	ldi	r24, 0x0A	; 10
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1eda:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(10,40);
	nokia_lcd_write_char('g', 1);
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	87 e6       	ldi	r24, 0x67	; 103
    1ee0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1ee4:	8f e0       	ldi	r24, 0x0F	; 15
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1eea:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(15,40);
	nokia_lcd_write_char('h', 1);
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	88 e6       	ldi	r24, 0x68	; 104
    1ef0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1ef4:	89 e1       	ldi	r24, 0x19	; 25
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1efa:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(25,40);
	nokia_lcd_write_char('S', 1);
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	83 e5       	ldi	r24, 0x53	; 83
    1f00:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f04:	f8 01       	movw	r30, r16
    1f06:	d0 82       	st	Z, r13
	nokia_lcd.cursor_y = y;
    1f08:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(30,40);
	nokia_lcd_write_char('c', 1);
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	83 e6       	ldi	r24, 0x63	; 99
    1f0e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f12:	83 e2       	ldi	r24, 0x23	; 35
    1f14:	f8 01       	movw	r30, r16
    1f16:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1f18:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(35,40);
	nokia_lcd_write_char('o', 1);
    1f1a:	61 e0       	ldi	r22, 0x01	; 1
    1f1c:	8f e6       	ldi	r24, 0x6F	; 111
    1f1e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f22:	f8 01       	movw	r30, r16
    1f24:	f0 82       	st	Z, r15
	nokia_lcd.cursor_y = y;
    1f26:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,40);
	nokia_lcd_write_char('r', 1);
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	82 e7       	ldi	r24, 0x72	; 114
    1f2c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f30:	8d e2       	ldi	r24, 0x2D	; 45
    1f32:	f8 01       	movw	r30, r16
    1f34:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1f36:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,40);
	nokia_lcd_write_char('e', 1);
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	85 e6       	ldi	r24, 0x65	; 101
    1f3c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f40:	82 e3       	ldi	r24, 0x32	; 50
    1f42:	f8 01       	movw	r30, r16
    1f44:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1f46:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,40);
	nokia_lcd_write_char(':', 1);
    1f48:	61 e0       	ldi	r22, 0x01	; 1
    1f4a:	8a e3       	ldi	r24, 0x3A	; 58
    1f4c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f50:	8c e3       	ldi	r24, 0x3C	; 60
    1f52:	f8 01       	movw	r30, r16
    1f54:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1f56:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(60,40);
	nokia_lcd_write_char(displayScore[0], 1);
    1f58:	0f 2e       	mov	r0, r31
    1f5a:	f2 e9       	ldi	r31, 0x92	; 146
    1f5c:	cf 2e       	mov	r12, r31
    1f5e:	f6 e0       	ldi	r31, 0x06	; 6
    1f60:	df 2e       	mov	r13, r31
    1f62:	f0 2d       	mov	r31, r0
    1f64:	61 e0       	ldi	r22, 0x01	; 1
    1f66:	f6 01       	movw	r30, r12
    1f68:	80 81       	ld	r24, Z
    1f6a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f6e:	81 e4       	ldi	r24, 0x41	; 65
    1f70:	f8 01       	movw	r30, r16
    1f72:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1f74:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(65,40);
	nokia_lcd_write_char(displayScore[1], 1);
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	f6 01       	movw	r30, r12
    1f7a:	81 81       	ldd	r24, Z+1	; 0x01
    1f7c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1f80:	86 e4       	ldi	r24, 0x46	; 70
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1f86:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(70,40);
	nokia_lcd_write_char(displayScore[2], 1);
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
}
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	08 95       	ret

00001fa2 <levelBeatDisplay>:

const char LEVELMESSAGE1[] = "Level";
const char LEVELMESSAGE2[] = "Completed";
const char LEVELMESSAGE3[] = "Press Start";

void levelBeatDisplay() {
    1fa2:	ff 92       	push	r15
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1fac:	07 e8       	ldi	r16, 0x87	; 135
    1fae:	16 e0       	ldi	r17, 0x06	; 6
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1fb4:	c8 e8       	ldi	r28, 0x88	; 136
    1fb6:	d6 e0       	ldi	r29, 0x06	; 6
    1fb8:	0f 2e       	mov	r0, r31
    1fba:	fa e0       	ldi	r31, 0x0A	; 10
    1fbc:	ff 2e       	mov	r15, r31
    1fbe:	f0 2d       	mov	r31, r0
    1fc0:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,10);
	nokia_lcd_write_string(LEVELMESSAGE1,2);
    1fc2:	62 e0       	ldi	r22, 0x02	; 2
    1fc4:	8a e0       	ldi	r24, 0x0A	; 10
    1fc6:	94 e0       	ldi	r25, 0x04	; 4
    1fc8:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1fcc:	86 e4       	ldi	r24, 0x46	; 70
    1fce:	f8 01       	movw	r30, r16
    1fd0:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1fd2:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(70,10);
	nokia_lcd_write_char('0'+levelCount, 2);
    1fd4:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <levelCount>
    1fd8:	62 e0       	ldi	r22, 0x02	; 2
    1fda:	80 5d       	subi	r24, 0xD0	; 208
    1fdc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1fe4:	8e e1       	ldi	r24, 0x1E	; 30
    1fe6:	88 83       	st	Y, r24
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(LEVELMESSAGE2,1);
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	94 e0       	ldi	r25, 0x04	; 4
    1fee:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1ff6:	88 e2       	ldi	r24, 0x28	; 40
    1ff8:	88 83       	st	Y, r24
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(LEVELMESSAGE3,1);
    1ffa:	61 e0       	ldi	r22, 0x01	; 1
    1ffc:	84 ef       	ldi	r24, 0xF4	; 244
    1ffe:	93 e0       	ldi	r25, 0x03	; 3
    2000:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
}
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	ff 90       	pop	r15
    200e:	08 95       	ret

00002010 <gameOverDisplay>:

const char GAMEOVERMESSAGE1[] = "GameOver";
const char GAMEOVERMESSAGE2[] = "Score:";
const char GAMEOVERMESSAGE3[] = "Press Start";
void gameOverDisplay() {
    2010:	cf 92       	push	r12
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2020:	07 e8       	ldi	r16, 0x87	; 135
    2022:	16 e0       	ldi	r17, 0x06	; 6
    2024:	f8 01       	movw	r30, r16
    2026:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    2028:	c8 e8       	ldi	r28, 0x88	; 136
    202a:	d6 e0       	ldi	r29, 0x06	; 6
    202c:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_string(GAMEOVERMESSAGE1,2);
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	8b ee       	ldi	r24, 0xEB	; 235
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2038:	f8 01       	movw	r30, r16
    203a:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    203c:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_char('G', 2);
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	87 e4       	ldi	r24, 0x47	; 71
    2042:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2046:	f8 01       	movw	r30, r16
    2048:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    204a:	0f 2e       	mov	r0, r31
    204c:	fe e1       	ldi	r31, 0x1E	; 30
    204e:	ff 2e       	mov	r15, r31
    2050:	f0 2d       	mov	r31, r0
    2052:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(GAMEOVERMESSAGE2,1);
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	84 ee       	ldi	r24, 0xE4	; 228
    2058:	93 e0       	ldi	r25, 0x03	; 3
    205a:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    205e:	0f 2e       	mov	r0, r31
    2060:	f8 e2       	ldi	r31, 0x28	; 40
    2062:	ef 2e       	mov	r14, r31
    2064:	f0 2d       	mov	r31, r0
    2066:	f8 01       	movw	r30, r16
    2068:	e0 82       	st	Z, r14
	nokia_lcd.cursor_y = y;
    206a:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,30);
	nokia_lcd_write_char(displayScore[0], 1);
    206c:	0f 2e       	mov	r0, r31
    206e:	f2 e9       	ldi	r31, 0x92	; 146
    2070:	cf 2e       	mov	r12, r31
    2072:	f6 e0       	ldi	r31, 0x06	; 6
    2074:	df 2e       	mov	r13, r31
    2076:	f0 2d       	mov	r31, r0
    2078:	61 e0       	ldi	r22, 0x01	; 1
    207a:	f6 01       	movw	r30, r12
    207c:	80 81       	ld	r24, Z
    207e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2082:	8d e2       	ldi	r24, 0x2D	; 45
    2084:	f8 01       	movw	r30, r16
    2086:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2088:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,30);
	nokia_lcd_write_char(displayScore[1], 1);
    208a:	61 e0       	ldi	r22, 0x01	; 1
    208c:	f6 01       	movw	r30, r12
    208e:	81 81       	ldd	r24, Z+1	; 0x01
    2090:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2094:	82 e3       	ldi	r24, 0x32	; 50
    2096:	f8 01       	movw	r30, r16
    2098:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    209a:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,30);
	nokia_lcd_write_char(displayScore[2], 1);
    209c:	61 e0       	ldi	r22, 0x01	; 1
    209e:	f6 01       	movw	r30, r12
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    20a6:	f8 01       	movw	r30, r16
    20a8:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    20aa:	e8 82       	st	Y, r14
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(GAMEOVERMESSAGE3,1);
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	88 ed       	ldi	r24, 0xD8	; 216
    20b0:	93 e0       	ldi	r25, 0x03	; 3
    20b2:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
}
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	df 90       	pop	r13
    20c4:	cf 90       	pop	r12
    20c6:	08 95       	ret

000020c8 <winDisplay>:

const char WINMESSAGE1[] = "YOU WIN";
void winDisplay() {
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    20d8:	07 e8       	ldi	r16, 0x87	; 135
    20da:	16 e0       	ldi	r17, 0x06	; 6
    20dc:	f8 01       	movw	r30, r16
    20de:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    20e0:	c8 e8       	ldi	r28, 0x88	; 136
    20e2:	d6 e0       	ldi	r29, 0x06	; 6
    20e4:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_string(WINMESSAGE1,2);
    20e6:	62 e0       	ldi	r22, 0x02	; 2
    20e8:	80 ed       	ldi	r24, 0xD0	; 208
    20ea:	93 e0       	ldi	r25, 0x03	; 3
    20ec:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    20f0:	f8 01       	movw	r30, r16
    20f2:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    20f4:	0f 2e       	mov	r0, r31
    20f6:	fe e1       	ldi	r31, 0x1E	; 30
    20f8:	ff 2e       	mov	r15, r31
    20fa:	f0 2d       	mov	r31, r0
    20fc:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(GAMEOVERMESSAGE2,1);
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	84 ee       	ldi	r24, 0xE4	; 228
    2102:	93 e0       	ldi	r25, 0x03	; 3
    2104:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2108:	0f 2e       	mov	r0, r31
    210a:	f8 e2       	ldi	r31, 0x28	; 40
    210c:	ef 2e       	mov	r14, r31
    210e:	f0 2d       	mov	r31, r0
    2110:	f8 01       	movw	r30, r16
    2112:	e0 82       	st	Z, r14
	nokia_lcd.cursor_y = y;
    2114:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,30);
	nokia_lcd_write_char(displayScore[0], 1);
    2116:	0f 2e       	mov	r0, r31
    2118:	f2 e9       	ldi	r31, 0x92	; 146
    211a:	cf 2e       	mov	r12, r31
    211c:	f6 e0       	ldi	r31, 0x06	; 6
    211e:	df 2e       	mov	r13, r31
    2120:	f0 2d       	mov	r31, r0
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	f6 01       	movw	r30, r12
    2126:	80 81       	ld	r24, Z
    2128:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    212c:	8d e2       	ldi	r24, 0x2D	; 45
    212e:	f8 01       	movw	r30, r16
    2130:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2132:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,30);
	nokia_lcd_write_char(displayScore[1], 1);
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	f6 01       	movw	r30, r12
    2138:	81 81       	ldd	r24, Z+1	; 0x01
    213a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    213e:	82 e3       	ldi	r24, 0x32	; 50
    2140:	f8 01       	movw	r30, r16
    2142:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    2144:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,30);
	nokia_lcd_write_char(displayScore[2], 1);
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	f6 01       	movw	r30, r12
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    2150:	f8 01       	movw	r30, r16
    2152:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    2154:	e8 82       	st	Y, r14
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(GAMEOVERMESSAGE3,1);
    2156:	61 e0       	ldi	r22, 0x01	; 1
    2158:	88 ed       	ldi	r24, 0xD8	; 216
    215a:	93 e0       	ldi	r25, 0x03	; 3
    215c:	0e 94 1c 04 	call	0x838	; 0x838 <nokia_lcd_write_string>
}
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	ef 90       	pop	r14
    216c:	df 90       	pop	r13
    216e:	cf 90       	pop	r12
    2170:	08 95       	ret

00002172 <TickLCDDisplay>:
enum LCDDisplayState{LCDDisplayStart, LCDDisplayInit,LCDDisplayMenu, LCDDisplayRunning, LCDDisplayGameOver,LCDDisplayNextLevel, LCDDisplayWin};
	
unsigned char TickLCDDisplay (unsigned char state) {
	switch(state) {
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	87 30       	cpi	r24, 0x07	; 7
    2176:	91 05       	cpc	r25, r1
    2178:	20 f4       	brcc	.+8      	; 0x2182 <TickLCDDisplay+0x10>
    217a:	fc 01       	movw	r30, r24
    217c:	e0 5a       	subi	r30, 0xA0	; 160
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	9d c2       	rjmp	.+1338   	; 0x26bc <__tablejump2__>
			state = LCDDisplayMenu;
		}
		break;
		
		default:
		state = LCDDisplayStart;
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	08 95       	ret
		case LCDDisplayInit:
		state = LCDDisplayMenu;
		break;
		
		case LCDDisplayMenu:
		if(currentGameState == GLogicPlaying) {
    2186:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    218a:	84 30       	cpi	r24, 0x04	; 4
    218c:	d1 f4       	brne	.+52     	; 0x21c2 <TickLCDDisplay+0x50>
    218e:	2e c0       	rjmp	.+92     	; 0x21ec <TickLCDDisplay+0x7a>
			state = LCDDisplayRunning;
		}
		break;
		
		case LCDDisplayRunning:
		if(currentGameState == GLogicMenu) {
    2190:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	a9 f0       	breq	.+42     	; 0x21c2 <TickLCDDisplay+0x50>
			state = LCDDisplayMenu;
		}
		else if(currentGameState == GLogicGameOver) {
    2198:	85 30       	cpi	r24, 0x05	; 5
    219a:	d1 f0       	breq	.+52     	; 0x21d0 <TickLCDDisplay+0x5e>
			state = LCDDisplayGameOver;
		}
		else if(currentGameState == GLogicLevelComplete) {
    219c:	86 30       	cpi	r24, 0x06	; 6
    219e:	69 f1       	breq	.+90     	; 0x21fa <TickLCDDisplay+0x88>
			state = LCDDisplayNextLevel;
		}
		else if(currentGameState == GLogicWin) {
    21a0:	89 30       	cpi	r24, 0x09	; 9
    21a2:	21 f5       	brne	.+72     	; 0x21ec <TickLCDDisplay+0x7a>
    21a4:	1c c0       	rjmp	.+56     	; 0x21de <TickLCDDisplay+0x6c>
			state = LCDDisplayWin;
		}
		break;
		
		case LCDDisplayWin:
		if(currentGameState == GLogicMenu) {
    21a6:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    21aa:	82 30       	cpi	r24, 0x02	; 2
    21ac:	c1 f4       	brne	.+48     	; 0x21de <TickLCDDisplay+0x6c>
    21ae:	09 c0       	rjmp	.+18     	; 0x21c2 <TickLCDDisplay+0x50>
			state = LCDDisplayMenu;
		}
		break;
		
		case LCDDisplayNextLevel:
		if(currentGameState == GLogicPlaying){
    21b0:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	09 f5       	brne	.+66     	; 0x21fa <TickLCDDisplay+0x88>
    21b8:	19 c0       	rjmp	.+50     	; 0x21ec <TickLCDDisplay+0x7a>
			state = LCDDisplayRunning;
		}
		break;
		
		case LCDDisplayGameOver:
		if(currentGameState == GLogicMenu) {
    21ba:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <currentGameState>
    21be:	82 30       	cpi	r24, 0x02	; 2
    21c0:	39 f4       	brne	.+14     	; 0x21d0 <TickLCDDisplay+0x5e>
	switch(state) {
		case LCDDisplayInit:
		break;
		
		case LCDDisplayMenu:
		nokia_lcd_clear();
    21c2:	0e 94 34 03 	call	0x668	; 0x668 <nokia_lcd_clear>
		menuDisplay();
    21c6:	4b de       	rcall	.-874    	; 0x1e5e <menuDisplay>
		nokia_lcd_render();
    21c8:	0e 94 2e 04 	call	0x85c	; 0x85c <nokia_lcd_render>
		break;
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	08 95       	ret
		
		case LCDDisplayGameOver:
		nokia_lcd_clear();
    21d0:	0e 94 34 03 	call	0x668	; 0x668 <nokia_lcd_clear>
		gameOverDisplay();
    21d4:	1d df       	rcall	.-454    	; 0x2010 <gameOverDisplay>
		nokia_lcd_render();
    21d6:	0e 94 2e 04 	call	0x85c	; 0x85c <nokia_lcd_render>
		break;
    21da:	84 e0       	ldi	r24, 0x04	; 4
		
		case LCDDisplayWin:
		nokia_lcd_clear();
    21dc:	08 95       	ret
    21de:	0e 94 34 03 	call	0x668	; 0x668 <nokia_lcd_clear>
		winDisplay();
    21e2:	72 df       	rcall	.-284    	; 0x20c8 <winDisplay>
		nokia_lcd_render();
    21e4:	0e 94 2e 04 	call	0x85c	; 0x85c <nokia_lcd_render>
		break;
    21e8:	86 e0       	ldi	r24, 0x06	; 6
		
		case LCDDisplayRunning:
		nokia_lcd_clear();
    21ea:	08 95       	ret
    21ec:	0e 94 34 03 	call	0x668	; 0x668 <nokia_lcd_clear>
		matrixToDisplay();
    21f0:	8c dd       	rcall	.-1256   	; 0x1d0a <matrixToDisplay>
		nokia_lcd_render();
    21f2:	0e 94 2e 04 	call	0x85c	; 0x85c <nokia_lcd_render>
		break;
    21f6:	83 e0       	ldi	r24, 0x03	; 3
		
		case LCDDisplayNextLevel:
		nokia_lcd_clear();
    21f8:	08 95       	ret
    21fa:	0e 94 34 03 	call	0x668	; 0x668 <nokia_lcd_clear>
		levelBeatDisplay();
    21fe:	d1 de       	rcall	.-606    	; 0x1fa2 <levelBeatDisplay>
		nokia_lcd_render();
    2200:	0e 94 2e 04 	call	0x85c	; 0x85c <nokia_lcd_render>
		break;
    2204:	85 e0       	ldi	r24, 0x05	; 5
    2206:	08 95       	ret
enum LCDDisplayState{LCDDisplayStart, LCDDisplayInit,LCDDisplayMenu, LCDDisplayRunning, LCDDisplayGameOver,LCDDisplayNextLevel, LCDDisplayWin};
	
unsigned char TickLCDDisplay (unsigned char state) {
	switch(state) {
		case LCDDisplayStart:
		state = LCDDisplayInit;
    2208:	81 e0       	ldi	r24, 0x01	; 1
		
		default:
		break;
	}
	return state;
}
    220a:	08 95       	ret

0000220c <main>:

// --------END User defined FSMs-----------------------------------------------


// Implement scheduler code from PES.
int main(){
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	2c 97       	sbiw	r28, 0x0c	; 12
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0x03; PORTA = 0xFC;
    2220:	83 e0       	ldi	r24, 0x03	; 3
    2222:	81 b9       	out	0x01, r24	; 1
    2224:	8c ef       	ldi	r24, 0xFC	; 252
    2226:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
    2228:	1f ef       	ldi	r17, 0xFF	; 255
    222a:	17 b9       	out	0x07, r17	; 7
    222c:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
    222e:	14 b9       	out	0x04, r17	; 4
    2230:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
    2232:	1a b9       	out	0x0a, r17	; 10
    2234:	1b b8       	out	0x0b, r1	; 11
	
	nokia_lcd_init();
    2236:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <nokia_lcd_init>
	nokia_lcd_clear();
    223a:	0e 94 34 03 	call	0x668	; 0x668 <nokia_lcd_clear>
	nokia_lcd_render();
    223e:	0e 94 2e 04 	call	0x85c	; 0x85c <nokia_lcd_render>
	SNES_init();
    2242:	0e 94 ce 02 	call	0x59c	; 0x59c <SNES_init>
	PWM_on();
    2246:	0e 94 dd 05 	call	0xbba	; 0xbba <PWM_on>
	unsigned long int SMTickPWMMotorManager_period = SMTickPWMMotorManager_calc/GCD;
	unsigned long int SMTickSound_period = SMTickSound_calc/GCD;
	
	//Declare an array of tasks 
	static task task1, task2, task3, task4, task5, task6;
	task *tasks[] = {&task1, &task2, &task3, &task4, &task5, &task6};
    224a:	8c e0       	ldi	r24, 0x0C	; 12
    224c:	e4 ec       	ldi	r30, 0xC4	; 196
    224e:	f3 e0       	ldi	r31, 0x03	; 3
    2250:	de 01       	movw	r26, r28
    2252:	11 96       	adiw	r26, 0x01	; 1
    2254:	01 90       	ld	r0, Z+
    2256:	0d 92       	st	X+, r0
    2258:	8a 95       	dec	r24
    225a:	e1 f7       	brne	.-8      	; 0x2254 <main+0x48>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
    225c:	e9 e6       	ldi	r30, 0x69	; 105
    225e:	f4 e0       	ldi	r31, 0x04	; 4
    2260:	10 83       	st	Z, r17
	task1.period = SMTickSNES_period;//Task Period.
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	a0 e0       	ldi	r26, 0x00	; 0
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	81 83       	std	Z+1, r24	; 0x01
    226c:	92 83       	std	Z+2, r25	; 0x02
    226e:	a3 83       	std	Z+3, r26	; 0x03
    2270:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTickSNES_period;//Task current elapsed time.
    2272:	85 83       	std	Z+5, r24	; 0x05
    2274:	96 83       	std	Z+6, r25	; 0x06
    2276:	a7 83       	std	Z+7, r26	; 0x07
    2278:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &TickSNESControl;//Function pointer for the tick.
    227a:	20 ef       	ldi	r18, 0xF0	; 240
    227c:	32 e0       	ldi	r19, 0x02	; 2
    227e:	32 87       	std	Z+10, r19	; 0x0a
    2280:	21 87       	std	Z+9, r18	; 0x09
	
	task2.state = -1;//Task initial state.
    2282:	ee e5       	ldi	r30, 0x5E	; 94
    2284:	f4 e0       	ldi	r31, 0x04	; 4
    2286:	10 83       	st	Z, r17
	task2.period = SMTickLCD_calc;//Task Period.
    2288:	4a e0       	ldi	r20, 0x0A	; 10
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	41 83       	std	Z+1, r20	; 0x01
    2292:	52 83       	std	Z+2, r21	; 0x02
    2294:	63 83       	std	Z+3, r22	; 0x03
    2296:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = SMTickLCD_period;//Task current elapsed time.
    2298:	85 83       	std	Z+5, r24	; 0x05
    229a:	96 83       	std	Z+6, r25	; 0x06
    229c:	a7 83       	std	Z+7, r26	; 0x07
    229e:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &TickLCDDisplay;//Function pointer for the tick.
    22a0:	29 eb       	ldi	r18, 0xB9	; 185
    22a2:	30 e1       	ldi	r19, 0x10	; 16
    22a4:	32 87       	std	Z+10, r19	; 0x0a
    22a6:	21 87       	std	Z+9, r18	; 0x09
	
	task3.state = -1;//Task initial state.
    22a8:	e3 e5       	ldi	r30, 0x53	; 83
    22aa:	f4 e0       	ldi	r31, 0x04	; 4
    22ac:	10 83       	st	Z, r17
	task3.period = SMTickLogic_calc;//Task Period.
    22ae:	41 83       	std	Z+1, r20	; 0x01
    22b0:	52 83       	std	Z+2, r21	; 0x02
    22b2:	63 83       	std	Z+3, r22	; 0x03
    22b4:	74 83       	std	Z+4, r23	; 0x04
	task3.elapsedTime = SMTickLogic_period;//Task current elapsed time.
    22b6:	85 83       	std	Z+5, r24	; 0x05
    22b8:	96 83       	std	Z+6, r25	; 0x06
    22ba:	a7 83       	std	Z+7, r26	; 0x07
    22bc:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &TickGameLogic;//Function pointer for the tick.
    22be:	26 ea       	ldi	r18, 0xA6	; 166
    22c0:	37 e0       	ldi	r19, 0x07	; 7
    22c2:	32 87       	std	Z+10, r19	; 0x0a
    22c4:	21 87       	std	Z+9, r18	; 0x09
	
	task4.state = -1;
    22c6:	e8 e4       	ldi	r30, 0x48	; 72
    22c8:	f4 e0       	ldi	r31, 0x04	; 4
    22ca:	10 83       	st	Z, r17
	task4.period = SMTickPWMMotor_calc;
    22cc:	41 83       	std	Z+1, r20	; 0x01
    22ce:	52 83       	std	Z+2, r21	; 0x02
    22d0:	63 83       	std	Z+3, r22	; 0x03
    22d2:	74 83       	std	Z+4, r23	; 0x04
	task4.elapsedTime = SMTickPWMMotor_period;
    22d4:	85 83       	std	Z+5, r24	; 0x05
    22d6:	96 83       	std	Z+6, r25	; 0x06
    22d8:	a7 83       	std	Z+7, r26	; 0x07
    22da:	b0 87       	std	Z+8, r27	; 0x08
	task4.TickFct = &TickPWMMotor;
    22dc:	28 e9       	ldi	r18, 0x98	; 152
    22de:	31 e0       	ldi	r19, 0x01	; 1
    22e0:	32 87       	std	Z+10, r19	; 0x0a
    22e2:	21 87       	std	Z+9, r18	; 0x09
	
	task5.state = -1;
    22e4:	ed e3       	ldi	r30, 0x3D	; 61
    22e6:	f4 e0       	ldi	r31, 0x04	; 4
    22e8:	10 83       	st	Z, r17
	task5.period = SMTickPWMMotorManager_calc;
    22ea:	41 83       	std	Z+1, r20	; 0x01
    22ec:	52 83       	std	Z+2, r21	; 0x02
    22ee:	63 83       	std	Z+3, r22	; 0x03
    22f0:	74 83       	std	Z+4, r23	; 0x04
	task5.elapsedTime = SMTickPWMMotorManager_period;
    22f2:	85 83       	std	Z+5, r24	; 0x05
    22f4:	96 83       	std	Z+6, r25	; 0x06
    22f6:	a7 83       	std	Z+7, r26	; 0x07
    22f8:	b0 87       	std	Z+8, r27	; 0x08
	task5.TickFct = &TickPWMMotorManager;
    22fa:	26 ef       	ldi	r18, 0xF6	; 246
    22fc:	31 e0       	ldi	r19, 0x01	; 1
    22fe:	32 87       	std	Z+10, r19	; 0x0a
    2300:	21 87       	std	Z+9, r18	; 0x09
	
	task6.state = -1;
    2302:	e2 e3       	ldi	r30, 0x32	; 50
    2304:	f4 e0       	ldi	r31, 0x04	; 4
    2306:	10 83       	st	Z, r17
	task6.period = SMTickSound_calc;
    2308:	41 83       	std	Z+1, r20	; 0x01
    230a:	52 83       	std	Z+2, r21	; 0x02
    230c:	63 83       	std	Z+3, r22	; 0x03
    230e:	74 83       	std	Z+4, r23	; 0x04
	task6.elapsedTime = SMTickSound_period;
    2310:	85 83       	std	Z+5, r24	; 0x05
    2312:	96 83       	std	Z+6, r25	; 0x06
    2314:	a7 83       	std	Z+7, r26	; 0x07
    2316:	b0 87       	std	Z+8, r27	; 0x08
	task6.TickFct = &TickSound;
    2318:	85 ea       	ldi	r24, 0xA5	; 165
    231a:	94 e0       	ldi	r25, 0x04	; 4
    231c:	92 87       	std	Z+10, r25	; 0x0a
    231e:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
    2320:	6a e0       	ldi	r22, 0x0A	; 10
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	0e 94 5d 02 	call	0x4ba	; 0x4ba <TimerSet>
	TimerOn();
    232c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <TimerOn>
    2330:	6e 01       	movw	r12, r28
    2332:	8d e0       	ldi	r24, 0x0D	; 13
    2334:	c8 0e       	add	r12, r24
    2336:	d1 1c       	adc	r13, r1
    2338:	de 01       	movw	r26, r28
    233a:	11 96       	adiw	r26, 0x01	; 1
    233c:	7d 01       	movw	r14, r26
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    233e:	f7 01       	movw	r30, r14
    2340:	01 91       	ld	r16, Z+
    2342:	11 91       	ld	r17, Z+
    2344:	7f 01       	movw	r14, r30
    2346:	d8 01       	movw	r26, r16
    2348:	15 96       	adiw	r26, 0x05	; 5
    234a:	4d 91       	ld	r20, X+
    234c:	5d 91       	ld	r21, X+
    234e:	6d 91       	ld	r22, X+
    2350:	7c 91       	ld	r23, X
    2352:	18 97       	sbiw	r26, 0x08	; 8
    2354:	11 96       	adiw	r26, 0x01	; 1
    2356:	8d 91       	ld	r24, X+
    2358:	9d 91       	ld	r25, X+
    235a:	0d 90       	ld	r0, X+
    235c:	bc 91       	ld	r27, X
    235e:	a0 2d       	mov	r26, r0
    2360:	48 17       	cp	r20, r24
    2362:	59 07       	cpc	r21, r25
    2364:	6a 07       	cpc	r22, r26
    2366:	7b 07       	cpc	r23, r27
    2368:	71 f4       	brne	.+28     	; 0x2386 <main+0x17a>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    236a:	f8 01       	movw	r30, r16
    236c:	80 81       	ld	r24, Z
    236e:	01 84       	ldd	r0, Z+9	; 0x09
    2370:	f2 85       	ldd	r31, Z+10	; 0x0a
    2372:	e0 2d       	mov	r30, r0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	09 95       	icall
    2378:	d8 01       	movw	r26, r16
    237a:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    237c:	f8 01       	movw	r30, r16
    237e:	15 82       	std	Z+5, r1	; 0x05
    2380:	16 82       	std	Z+6, r1	; 0x06
    2382:	17 82       	std	Z+7, r1	; 0x07
    2384:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
    2386:	f8 01       	movw	r30, r16
    2388:	85 81       	ldd	r24, Z+5	; 0x05
    238a:	96 81       	ldd	r25, Z+6	; 0x06
    238c:	a7 81       	ldd	r26, Z+7	; 0x07
    238e:	b0 85       	ldd	r27, Z+8	; 0x08
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	a1 1d       	adc	r26, r1
    2394:	b1 1d       	adc	r27, r1
    2396:	85 83       	std	Z+5, r24	; 0x05
    2398:	96 83       	std	Z+6, r25	; 0x06
    239a:	a7 83       	std	Z+7, r26	; 0x07
    239c:	b0 87       	std	Z+8, r27	; 0x08
	TimerOn();
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    239e:	ce 14       	cp	r12, r14
    23a0:	df 04       	cpc	r13, r15
    23a2:	69 f6       	brne	.-102    	; 0x233e <main+0x132>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
    23a4:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <TimerFlag>
    23a8:	88 23       	and	r24, r24
    23aa:	e1 f3       	breq	.-8      	; 0x23a4 <main+0x198>
		TimerFlag = 0;
    23ac:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <TimerFlag>
	}
    23b0:	c3 cf       	rjmp	.-122    	; 0x2338 <main+0x12c>

000023b2 <__cmpsf2>:
    23b2:	9c d0       	rcall	.+312    	; 0x24ec <__fp_cmp>
    23b4:	08 f4       	brcc	.+2      	; 0x23b8 <__cmpsf2+0x6>
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	08 95       	ret

000023ba <__divsf3>:
    23ba:	0c d0       	rcall	.+24     	; 0x23d4 <__divsf3x>
    23bc:	d2 c0       	rjmp	.+420    	; 0x2562 <__fp_round>
    23be:	ca d0       	rcall	.+404    	; 0x2554 <__fp_pscB>
    23c0:	40 f0       	brcs	.+16     	; 0x23d2 <__divsf3+0x18>
    23c2:	c1 d0       	rcall	.+386    	; 0x2546 <__fp_pscA>
    23c4:	30 f0       	brcs	.+12     	; 0x23d2 <__divsf3+0x18>
    23c6:	21 f4       	brne	.+8      	; 0x23d0 <__divsf3+0x16>
    23c8:	5f 3f       	cpi	r21, 0xFF	; 255
    23ca:	19 f0       	breq	.+6      	; 0x23d2 <__divsf3+0x18>
    23cc:	b3 c0       	rjmp	.+358    	; 0x2534 <__fp_inf>
    23ce:	51 11       	cpse	r21, r1
    23d0:	fc c0       	rjmp	.+504    	; 0x25ca <__fp_szero>
    23d2:	b6 c0       	rjmp	.+364    	; 0x2540 <__fp_nan>

000023d4 <__divsf3x>:
    23d4:	d7 d0       	rcall	.+430    	; 0x2584 <__fp_split3>
    23d6:	98 f3       	brcs	.-26     	; 0x23be <__divsf3+0x4>

000023d8 <__divsf3_pse>:
    23d8:	99 23       	and	r25, r25
    23da:	c9 f3       	breq	.-14     	; 0x23ce <__divsf3+0x14>
    23dc:	55 23       	and	r21, r21
    23de:	b1 f3       	breq	.-20     	; 0x23cc <__divsf3+0x12>
    23e0:	95 1b       	sub	r25, r21
    23e2:	55 0b       	sbc	r21, r21
    23e4:	bb 27       	eor	r27, r27
    23e6:	aa 27       	eor	r26, r26
    23e8:	62 17       	cp	r22, r18
    23ea:	73 07       	cpc	r23, r19
    23ec:	84 07       	cpc	r24, r20
    23ee:	38 f0       	brcs	.+14     	; 0x23fe <__divsf3_pse+0x26>
    23f0:	9f 5f       	subi	r25, 0xFF	; 255
    23f2:	5f 4f       	sbci	r21, 0xFF	; 255
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	44 1f       	adc	r20, r20
    23fa:	aa 1f       	adc	r26, r26
    23fc:	a9 f3       	breq	.-22     	; 0x23e8 <__divsf3_pse+0x10>
    23fe:	33 d0       	rcall	.+102    	; 0x2466 <__divsf3_pse+0x8e>
    2400:	0e 2e       	mov	r0, r30
    2402:	3a f0       	brmi	.+14     	; 0x2412 <__divsf3_pse+0x3a>
    2404:	e0 e8       	ldi	r30, 0x80	; 128
    2406:	30 d0       	rcall	.+96     	; 0x2468 <__divsf3_pse+0x90>
    2408:	91 50       	subi	r25, 0x01	; 1
    240a:	50 40       	sbci	r21, 0x00	; 0
    240c:	e6 95       	lsr	r30
    240e:	00 1c       	adc	r0, r0
    2410:	ca f7       	brpl	.-14     	; 0x2404 <__divsf3_pse+0x2c>
    2412:	29 d0       	rcall	.+82     	; 0x2466 <__divsf3_pse+0x8e>
    2414:	fe 2f       	mov	r31, r30
    2416:	27 d0       	rcall	.+78     	; 0x2466 <__divsf3_pse+0x8e>
    2418:	66 0f       	add	r22, r22
    241a:	77 1f       	adc	r23, r23
    241c:	88 1f       	adc	r24, r24
    241e:	bb 1f       	adc	r27, r27
    2420:	26 17       	cp	r18, r22
    2422:	37 07       	cpc	r19, r23
    2424:	48 07       	cpc	r20, r24
    2426:	ab 07       	cpc	r26, r27
    2428:	b0 e8       	ldi	r27, 0x80	; 128
    242a:	09 f0       	breq	.+2      	; 0x242e <__divsf3_pse+0x56>
    242c:	bb 0b       	sbc	r27, r27
    242e:	80 2d       	mov	r24, r0
    2430:	bf 01       	movw	r22, r30
    2432:	ff 27       	eor	r31, r31
    2434:	93 58       	subi	r25, 0x83	; 131
    2436:	5f 4f       	sbci	r21, 0xFF	; 255
    2438:	2a f0       	brmi	.+10     	; 0x2444 <__divsf3_pse+0x6c>
    243a:	9e 3f       	cpi	r25, 0xFE	; 254
    243c:	51 05       	cpc	r21, r1
    243e:	68 f0       	brcs	.+26     	; 0x245a <__divsf3_pse+0x82>
    2440:	79 c0       	rjmp	.+242    	; 0x2534 <__fp_inf>
    2442:	c3 c0       	rjmp	.+390    	; 0x25ca <__fp_szero>
    2444:	5f 3f       	cpi	r21, 0xFF	; 255
    2446:	ec f3       	brlt	.-6      	; 0x2442 <__divsf3_pse+0x6a>
    2448:	98 3e       	cpi	r25, 0xE8	; 232
    244a:	dc f3       	brlt	.-10     	; 0x2442 <__divsf3_pse+0x6a>
    244c:	86 95       	lsr	r24
    244e:	77 95       	ror	r23
    2450:	67 95       	ror	r22
    2452:	b7 95       	ror	r27
    2454:	f7 95       	ror	r31
    2456:	9f 5f       	subi	r25, 0xFF	; 255
    2458:	c9 f7       	brne	.-14     	; 0x244c <__divsf3_pse+0x74>
    245a:	88 0f       	add	r24, r24
    245c:	91 1d       	adc	r25, r1
    245e:	96 95       	lsr	r25
    2460:	87 95       	ror	r24
    2462:	97 f9       	bld	r25, 7
    2464:	08 95       	ret
    2466:	e1 e0       	ldi	r30, 0x01	; 1
    2468:	66 0f       	add	r22, r22
    246a:	77 1f       	adc	r23, r23
    246c:	88 1f       	adc	r24, r24
    246e:	bb 1f       	adc	r27, r27
    2470:	62 17       	cp	r22, r18
    2472:	73 07       	cpc	r23, r19
    2474:	84 07       	cpc	r24, r20
    2476:	ba 07       	cpc	r27, r26
    2478:	20 f0       	brcs	.+8      	; 0x2482 <__divsf3_pse+0xaa>
    247a:	62 1b       	sub	r22, r18
    247c:	73 0b       	sbc	r23, r19
    247e:	84 0b       	sbc	r24, r20
    2480:	ba 0b       	sbc	r27, r26
    2482:	ee 1f       	adc	r30, r30
    2484:	88 f7       	brcc	.-30     	; 0x2468 <__divsf3_pse+0x90>
    2486:	e0 95       	com	r30
    2488:	08 95       	ret

0000248a <__fixsfsi>:
    248a:	04 d0       	rcall	.+8      	; 0x2494 <__fixunssfsi>
    248c:	68 94       	set
    248e:	b1 11       	cpse	r27, r1
    2490:	9c c0       	rjmp	.+312    	; 0x25ca <__fp_szero>
    2492:	08 95       	ret

00002494 <__fixunssfsi>:
    2494:	7f d0       	rcall	.+254    	; 0x2594 <__fp_splitA>
    2496:	88 f0       	brcs	.+34     	; 0x24ba <__fixunssfsi+0x26>
    2498:	9f 57       	subi	r25, 0x7F	; 127
    249a:	90 f0       	brcs	.+36     	; 0x24c0 <__fixunssfsi+0x2c>
    249c:	b9 2f       	mov	r27, r25
    249e:	99 27       	eor	r25, r25
    24a0:	b7 51       	subi	r27, 0x17	; 23
    24a2:	a0 f0       	brcs	.+40     	; 0x24cc <__fixunssfsi+0x38>
    24a4:	d1 f0       	breq	.+52     	; 0x24da <__fixunssfsi+0x46>
    24a6:	66 0f       	add	r22, r22
    24a8:	77 1f       	adc	r23, r23
    24aa:	88 1f       	adc	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	1a f0       	brmi	.+6      	; 0x24b6 <__fixunssfsi+0x22>
    24b0:	ba 95       	dec	r27
    24b2:	c9 f7       	brne	.-14     	; 0x24a6 <__fixunssfsi+0x12>
    24b4:	12 c0       	rjmp	.+36     	; 0x24da <__fixunssfsi+0x46>
    24b6:	b1 30       	cpi	r27, 0x01	; 1
    24b8:	81 f0       	breq	.+32     	; 0x24da <__fixunssfsi+0x46>
    24ba:	86 d0       	rcall	.+268    	; 0x25c8 <__fp_zero>
    24bc:	b1 e0       	ldi	r27, 0x01	; 1
    24be:	08 95       	ret
    24c0:	83 c0       	rjmp	.+262    	; 0x25c8 <__fp_zero>
    24c2:	67 2f       	mov	r22, r23
    24c4:	78 2f       	mov	r23, r24
    24c6:	88 27       	eor	r24, r24
    24c8:	b8 5f       	subi	r27, 0xF8	; 248
    24ca:	39 f0       	breq	.+14     	; 0x24da <__fixunssfsi+0x46>
    24cc:	b9 3f       	cpi	r27, 0xF9	; 249
    24ce:	cc f3       	brlt	.-14     	; 0x24c2 <__fixunssfsi+0x2e>
    24d0:	86 95       	lsr	r24
    24d2:	77 95       	ror	r23
    24d4:	67 95       	ror	r22
    24d6:	b3 95       	inc	r27
    24d8:	d9 f7       	brne	.-10     	; 0x24d0 <__fixunssfsi+0x3c>
    24da:	3e f4       	brtc	.+14     	; 0x24ea <__fixunssfsi+0x56>
    24dc:	90 95       	com	r25
    24de:	80 95       	com	r24
    24e0:	70 95       	com	r23
    24e2:	61 95       	neg	r22
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	8f 4f       	sbci	r24, 0xFF	; 255
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	08 95       	ret

000024ec <__fp_cmp>:
    24ec:	99 0f       	add	r25, r25
    24ee:	00 08       	sbc	r0, r0
    24f0:	55 0f       	add	r21, r21
    24f2:	aa 0b       	sbc	r26, r26
    24f4:	e0 e8       	ldi	r30, 0x80	; 128
    24f6:	fe ef       	ldi	r31, 0xFE	; 254
    24f8:	16 16       	cp	r1, r22
    24fa:	17 06       	cpc	r1, r23
    24fc:	e8 07       	cpc	r30, r24
    24fe:	f9 07       	cpc	r31, r25
    2500:	c0 f0       	brcs	.+48     	; 0x2532 <__fp_cmp+0x46>
    2502:	12 16       	cp	r1, r18
    2504:	13 06       	cpc	r1, r19
    2506:	e4 07       	cpc	r30, r20
    2508:	f5 07       	cpc	r31, r21
    250a:	98 f0       	brcs	.+38     	; 0x2532 <__fp_cmp+0x46>
    250c:	62 1b       	sub	r22, r18
    250e:	73 0b       	sbc	r23, r19
    2510:	84 0b       	sbc	r24, r20
    2512:	95 0b       	sbc	r25, r21
    2514:	39 f4       	brne	.+14     	; 0x2524 <__fp_cmp+0x38>
    2516:	0a 26       	eor	r0, r26
    2518:	61 f0       	breq	.+24     	; 0x2532 <__fp_cmp+0x46>
    251a:	23 2b       	or	r18, r19
    251c:	24 2b       	or	r18, r20
    251e:	25 2b       	or	r18, r21
    2520:	21 f4       	brne	.+8      	; 0x252a <__fp_cmp+0x3e>
    2522:	08 95       	ret
    2524:	0a 26       	eor	r0, r26
    2526:	09 f4       	brne	.+2      	; 0x252a <__fp_cmp+0x3e>
    2528:	a1 40       	sbci	r26, 0x01	; 1
    252a:	a6 95       	lsr	r26
    252c:	8f ef       	ldi	r24, 0xFF	; 255
    252e:	81 1d       	adc	r24, r1
    2530:	81 1d       	adc	r24, r1
    2532:	08 95       	ret

00002534 <__fp_inf>:
    2534:	97 f9       	bld	r25, 7
    2536:	9f 67       	ori	r25, 0x7F	; 127
    2538:	80 e8       	ldi	r24, 0x80	; 128
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	08 95       	ret

00002540 <__fp_nan>:
    2540:	9f ef       	ldi	r25, 0xFF	; 255
    2542:	80 ec       	ldi	r24, 0xC0	; 192
    2544:	08 95       	ret

00002546 <__fp_pscA>:
    2546:	00 24       	eor	r0, r0
    2548:	0a 94       	dec	r0
    254a:	16 16       	cp	r1, r22
    254c:	17 06       	cpc	r1, r23
    254e:	18 06       	cpc	r1, r24
    2550:	09 06       	cpc	r0, r25
    2552:	08 95       	ret

00002554 <__fp_pscB>:
    2554:	00 24       	eor	r0, r0
    2556:	0a 94       	dec	r0
    2558:	12 16       	cp	r1, r18
    255a:	13 06       	cpc	r1, r19
    255c:	14 06       	cpc	r1, r20
    255e:	05 06       	cpc	r0, r21
    2560:	08 95       	ret

00002562 <__fp_round>:
    2562:	09 2e       	mov	r0, r25
    2564:	03 94       	inc	r0
    2566:	00 0c       	add	r0, r0
    2568:	11 f4       	brne	.+4      	; 0x256e <__fp_round+0xc>
    256a:	88 23       	and	r24, r24
    256c:	52 f0       	brmi	.+20     	; 0x2582 <__fp_round+0x20>
    256e:	bb 0f       	add	r27, r27
    2570:	40 f4       	brcc	.+16     	; 0x2582 <__fp_round+0x20>
    2572:	bf 2b       	or	r27, r31
    2574:	11 f4       	brne	.+4      	; 0x257a <__fp_round+0x18>
    2576:	60 ff       	sbrs	r22, 0
    2578:	04 c0       	rjmp	.+8      	; 0x2582 <__fp_round+0x20>
    257a:	6f 5f       	subi	r22, 0xFF	; 255
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	8f 4f       	sbci	r24, 0xFF	; 255
    2580:	9f 4f       	sbci	r25, 0xFF	; 255
    2582:	08 95       	ret

00002584 <__fp_split3>:
    2584:	57 fd       	sbrc	r21, 7
    2586:	90 58       	subi	r25, 0x80	; 128
    2588:	44 0f       	add	r20, r20
    258a:	55 1f       	adc	r21, r21
    258c:	59 f0       	breq	.+22     	; 0x25a4 <__fp_splitA+0x10>
    258e:	5f 3f       	cpi	r21, 0xFF	; 255
    2590:	71 f0       	breq	.+28     	; 0x25ae <__fp_splitA+0x1a>
    2592:	47 95       	ror	r20

00002594 <__fp_splitA>:
    2594:	88 0f       	add	r24, r24
    2596:	97 fb       	bst	r25, 7
    2598:	99 1f       	adc	r25, r25
    259a:	61 f0       	breq	.+24     	; 0x25b4 <__fp_splitA+0x20>
    259c:	9f 3f       	cpi	r25, 0xFF	; 255
    259e:	79 f0       	breq	.+30     	; 0x25be <__fp_splitA+0x2a>
    25a0:	87 95       	ror	r24
    25a2:	08 95       	ret
    25a4:	12 16       	cp	r1, r18
    25a6:	13 06       	cpc	r1, r19
    25a8:	14 06       	cpc	r1, r20
    25aa:	55 1f       	adc	r21, r21
    25ac:	f2 cf       	rjmp	.-28     	; 0x2592 <__fp_split3+0xe>
    25ae:	46 95       	lsr	r20
    25b0:	f1 df       	rcall	.-30     	; 0x2594 <__fp_splitA>
    25b2:	08 c0       	rjmp	.+16     	; 0x25c4 <__fp_splitA+0x30>
    25b4:	16 16       	cp	r1, r22
    25b6:	17 06       	cpc	r1, r23
    25b8:	18 06       	cpc	r1, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	f1 cf       	rjmp	.-30     	; 0x25a0 <__fp_splitA+0xc>
    25be:	86 95       	lsr	r24
    25c0:	71 05       	cpc	r23, r1
    25c2:	61 05       	cpc	r22, r1
    25c4:	08 94       	sec
    25c6:	08 95       	ret

000025c8 <__fp_zero>:
    25c8:	e8 94       	clt

000025ca <__fp_szero>:
    25ca:	bb 27       	eor	r27, r27
    25cc:	66 27       	eor	r22, r22
    25ce:	77 27       	eor	r23, r23
    25d0:	cb 01       	movw	r24, r22
    25d2:	97 f9       	bld	r25, 7
    25d4:	08 95       	ret

000025d6 <__gesf2>:
    25d6:	8a df       	rcall	.-236    	; 0x24ec <__fp_cmp>
    25d8:	08 f4       	brcc	.+2      	; 0x25dc <__gesf2+0x6>
    25da:	8f ef       	ldi	r24, 0xFF	; 255
    25dc:	08 95       	ret

000025de <__mulsf3>:
    25de:	0b d0       	rcall	.+22     	; 0x25f6 <__mulsf3x>
    25e0:	c0 cf       	rjmp	.-128    	; 0x2562 <__fp_round>
    25e2:	b1 df       	rcall	.-158    	; 0x2546 <__fp_pscA>
    25e4:	28 f0       	brcs	.+10     	; 0x25f0 <__mulsf3+0x12>
    25e6:	b6 df       	rcall	.-148    	; 0x2554 <__fp_pscB>
    25e8:	18 f0       	brcs	.+6      	; 0x25f0 <__mulsf3+0x12>
    25ea:	95 23       	and	r25, r21
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <__mulsf3+0x12>
    25ee:	a2 cf       	rjmp	.-188    	; 0x2534 <__fp_inf>
    25f0:	a7 cf       	rjmp	.-178    	; 0x2540 <__fp_nan>
    25f2:	11 24       	eor	r1, r1
    25f4:	ea cf       	rjmp	.-44     	; 0x25ca <__fp_szero>

000025f6 <__mulsf3x>:
    25f6:	c6 df       	rcall	.-116    	; 0x2584 <__fp_split3>
    25f8:	a0 f3       	brcs	.-24     	; 0x25e2 <__mulsf3+0x4>

000025fa <__mulsf3_pse>:
    25fa:	95 9f       	mul	r25, r21
    25fc:	d1 f3       	breq	.-12     	; 0x25f2 <__mulsf3+0x14>
    25fe:	95 0f       	add	r25, r21
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	55 1f       	adc	r21, r21
    2604:	62 9f       	mul	r22, r18
    2606:	f0 01       	movw	r30, r0
    2608:	72 9f       	mul	r23, r18
    260a:	bb 27       	eor	r27, r27
    260c:	f0 0d       	add	r31, r0
    260e:	b1 1d       	adc	r27, r1
    2610:	63 9f       	mul	r22, r19
    2612:	aa 27       	eor	r26, r26
    2614:	f0 0d       	add	r31, r0
    2616:	b1 1d       	adc	r27, r1
    2618:	aa 1f       	adc	r26, r26
    261a:	64 9f       	mul	r22, r20
    261c:	66 27       	eor	r22, r22
    261e:	b0 0d       	add	r27, r0
    2620:	a1 1d       	adc	r26, r1
    2622:	66 1f       	adc	r22, r22
    2624:	82 9f       	mul	r24, r18
    2626:	22 27       	eor	r18, r18
    2628:	b0 0d       	add	r27, r0
    262a:	a1 1d       	adc	r26, r1
    262c:	62 1f       	adc	r22, r18
    262e:	73 9f       	mul	r23, r19
    2630:	b0 0d       	add	r27, r0
    2632:	a1 1d       	adc	r26, r1
    2634:	62 1f       	adc	r22, r18
    2636:	83 9f       	mul	r24, r19
    2638:	a0 0d       	add	r26, r0
    263a:	61 1d       	adc	r22, r1
    263c:	22 1f       	adc	r18, r18
    263e:	74 9f       	mul	r23, r20
    2640:	33 27       	eor	r19, r19
    2642:	a0 0d       	add	r26, r0
    2644:	61 1d       	adc	r22, r1
    2646:	23 1f       	adc	r18, r19
    2648:	84 9f       	mul	r24, r20
    264a:	60 0d       	add	r22, r0
    264c:	21 1d       	adc	r18, r1
    264e:	82 2f       	mov	r24, r18
    2650:	76 2f       	mov	r23, r22
    2652:	6a 2f       	mov	r22, r26
    2654:	11 24       	eor	r1, r1
    2656:	9f 57       	subi	r25, 0x7F	; 127
    2658:	50 40       	sbci	r21, 0x00	; 0
    265a:	8a f0       	brmi	.+34     	; 0x267e <__mulsf3_pse+0x84>
    265c:	e1 f0       	breq	.+56     	; 0x2696 <__mulsf3_pse+0x9c>
    265e:	88 23       	and	r24, r24
    2660:	4a f0       	brmi	.+18     	; 0x2674 <__mulsf3_pse+0x7a>
    2662:	ee 0f       	add	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	bb 1f       	adc	r27, r27
    2668:	66 1f       	adc	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	88 1f       	adc	r24, r24
    266e:	91 50       	subi	r25, 0x01	; 1
    2670:	50 40       	sbci	r21, 0x00	; 0
    2672:	a9 f7       	brne	.-22     	; 0x265e <__mulsf3_pse+0x64>
    2674:	9e 3f       	cpi	r25, 0xFE	; 254
    2676:	51 05       	cpc	r21, r1
    2678:	70 f0       	brcs	.+28     	; 0x2696 <__mulsf3_pse+0x9c>
    267a:	5c cf       	rjmp	.-328    	; 0x2534 <__fp_inf>
    267c:	a6 cf       	rjmp	.-180    	; 0x25ca <__fp_szero>
    267e:	5f 3f       	cpi	r21, 0xFF	; 255
    2680:	ec f3       	brlt	.-6      	; 0x267c <__mulsf3_pse+0x82>
    2682:	98 3e       	cpi	r25, 0xE8	; 232
    2684:	dc f3       	brlt	.-10     	; 0x267c <__mulsf3_pse+0x82>
    2686:	86 95       	lsr	r24
    2688:	77 95       	ror	r23
    268a:	67 95       	ror	r22
    268c:	b7 95       	ror	r27
    268e:	f7 95       	ror	r31
    2690:	e7 95       	ror	r30
    2692:	9f 5f       	subi	r25, 0xFF	; 255
    2694:	c1 f7       	brne	.-16     	; 0x2686 <__mulsf3_pse+0x8c>
    2696:	fe 2b       	or	r31, r30
    2698:	88 0f       	add	r24, r24
    269a:	91 1d       	adc	r25, r1
    269c:	96 95       	lsr	r25
    269e:	87 95       	ror	r24
    26a0:	97 f9       	bld	r25, 7
    26a2:	08 95       	ret

000026a4 <__udivmodqi4>:
    26a4:	99 1b       	sub	r25, r25
    26a6:	79 e0       	ldi	r23, 0x09	; 9
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <__udivmodqi4_ep>

000026aa <__udivmodqi4_loop>:
    26aa:	99 1f       	adc	r25, r25
    26ac:	96 17       	cp	r25, r22
    26ae:	08 f0       	brcs	.+2      	; 0x26b2 <__udivmodqi4_ep>
    26b0:	96 1b       	sub	r25, r22

000026b2 <__udivmodqi4_ep>:
    26b2:	88 1f       	adc	r24, r24
    26b4:	7a 95       	dec	r23
    26b6:	c9 f7       	brne	.-14     	; 0x26aa <__udivmodqi4_loop>
    26b8:	80 95       	com	r24
    26ba:	08 95       	ret

000026bc <__tablejump2__>:
    26bc:	ee 0f       	add	r30, r30
    26be:	ff 1f       	adc	r31, r31
    26c0:	00 24       	eor	r0, r0
    26c2:	00 1c       	adc	r0, r0
    26c4:	0b be       	out	0x3b, r0	; 59
    26c6:	07 90       	elpm	r0, Z+
    26c8:	f6 91       	elpm	r31, Z
    26ca:	e0 2d       	mov	r30, r0
    26cc:	09 94       	ijmp

000026ce <__umulhisi3>:
    26ce:	a2 9f       	mul	r26, r18
    26d0:	b0 01       	movw	r22, r0
    26d2:	b3 9f       	mul	r27, r19
    26d4:	c0 01       	movw	r24, r0
    26d6:	a3 9f       	mul	r26, r19
    26d8:	70 0d       	add	r23, r0
    26da:	81 1d       	adc	r24, r1
    26dc:	11 24       	eor	r1, r1
    26de:	91 1d       	adc	r25, r1
    26e0:	b2 9f       	mul	r27, r18
    26e2:	70 0d       	add	r23, r0
    26e4:	81 1d       	adc	r24, r1
    26e6:	11 24       	eor	r1, r1
    26e8:	91 1d       	adc	r25, r1
    26ea:	08 95       	ret

000026ec <eeprom_read_word>:
    26ec:	a8 e1       	ldi	r26, 0x18	; 24
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	42 e0       	ldi	r20, 0x02	; 2
    26f2:	50 e0       	ldi	r21, 0x00	; 0
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <eeprom_read_blraw>

000026f6 <eeprom_write_word>:
    26f6:	12 d0       	rcall	.+36     	; 0x271c <eeprom_write_byte>
    26f8:	27 2f       	mov	r18, r23
    26fa:	11 c0       	rjmp	.+34     	; 0x271e <eeprom_write_r18>

000026fc <eeprom_read_block>:
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22

00002700 <eeprom_read_blraw>:
    2700:	fc 01       	movw	r30, r24
    2702:	f9 99       	sbic	0x1f, 1	; 31
    2704:	fe cf       	rjmp	.-4      	; 0x2702 <eeprom_read_blraw+0x2>
    2706:	06 c0       	rjmp	.+12     	; 0x2714 <eeprom_read_blraw+0x14>
    2708:	f2 bd       	out	0x22, r31	; 34
    270a:	e1 bd       	out	0x21, r30	; 33
    270c:	f8 9a       	sbi	0x1f, 0	; 31
    270e:	31 96       	adiw	r30, 0x01	; 1
    2710:	00 b4       	in	r0, 0x20	; 32
    2712:	0d 92       	st	X+, r0
    2714:	41 50       	subi	r20, 0x01	; 1
    2716:	50 40       	sbci	r21, 0x00	; 0
    2718:	b8 f7       	brcc	.-18     	; 0x2708 <eeprom_read_blraw+0x8>
    271a:	08 95       	ret

0000271c <eeprom_write_byte>:
    271c:	26 2f       	mov	r18, r22

0000271e <eeprom_write_r18>:
    271e:	f9 99       	sbic	0x1f, 1	; 31
    2720:	fe cf       	rjmp	.-4      	; 0x271e <eeprom_write_r18>
    2722:	1f ba       	out	0x1f, r1	; 31
    2724:	92 bd       	out	0x22, r25	; 34
    2726:	81 bd       	out	0x21, r24	; 33
    2728:	20 bd       	out	0x20, r18	; 32
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	fa 9a       	sbi	0x1f, 2	; 31
    2730:	f9 9a       	sbi	0x1f, 1	; 31
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	08 95       	ret

00002738 <_exit>:
    2738:	f8 94       	cli

0000273a <__stop_program>:
    273a:	ff cf       	rjmp	.-2      	; 0x273a <__stop_program>
