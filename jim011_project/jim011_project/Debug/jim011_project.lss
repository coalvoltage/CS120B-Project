
jim011_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000b4c  00000be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001203  00800182  00800182  00000c62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a32  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b27  00000000  00000000  00002826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f28  00000000  00000000  0000334d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ef  00000000  00000000  000045ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001267  00000000  00000000  00004fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006242  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	35 c1       	rjmp	.+618    	; 0x2a0 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ae 00       	.word	0x00ae	; ????
  8e:	bc 00       	.word	0x00bc	; ????
  90:	9f 00       	.word	0x009f	; ????
  92:	0a 01       	movw	r0, r20
  94:	d5 00       	.word	0x00d5	; ????
  96:	e3 00       	.word	0x00e3	; ????
  98:	a6 00       	.word	0x00a6	; ????
  9a:	bc 00       	.word	0x00bc	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ec e4       	ldi	r30, 0x4C	; 76
  b0:	fb e0       	ldi	r31, 0x0B	; 11
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a2 38       	cpi	r26, 0x82	; 130
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	23 e1       	ldi	r18, 0x13	; 19
  c4:	a2 e8       	ldi	r26, 0x82	; 130
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a5 38       	cpi	r26, 0x85	; 133
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	2b d4       	rcall	.+2134   	; 0x92a <main>
  d4:	39 c5       	rjmp	.+2674   	; 0xb48 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <write>:
		default:
		break;
	}
	
	return state;
}
  d8:	29 98       	cbi	0x05, 1	; 5
  da:	66 23       	and	r22, r22
  dc:	11 f0       	breq	.+4      	; 0xe2 <write+0xa>
  de:	2b 9a       	sbi	0x05, 3	; 5
  e0:	15 c0       	rjmp	.+42     	; 0x10c <write+0x34>
  e2:	2b 98       	cbi	0x05, 3	; 5
  e4:	13 c0       	rjmp	.+38     	; 0x10c <write+0x34>
  e6:	ac 01       	movw	r20, r24
  e8:	02 2e       	mov	r0, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <write+0x18>
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <write+0x14>
  f4:	40 ff       	sbrs	r20, 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <write+0x24>
  f8:	2c 9a       	sbi	0x05, 4	; 5
  fa:	01 c0       	rjmp	.+2      	; 0xfe <write+0x26>
  fc:	2c 98       	cbi	0x05, 4	; 5
  fe:	2d 9a       	sbi	0x05, 5	; 5
 100:	2d 98       	cbi	0x05, 5	; 5
 102:	21 50       	subi	r18, 0x01	; 1
 104:	31 09       	sbc	r19, r1
 106:	78 f7       	brcc	.-34     	; 0xe6 <write+0xe>
 108:	29 9a       	sbi	0x05, 1	; 5
 10a:	08 95       	ret
 10c:	27 e0       	ldi	r18, 0x07	; 7
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	e9 cf       	rjmp	.-46     	; 0xe6 <write+0xe>

00000114 <write_cmd>:
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	e0 cf       	rjmp	.-64     	; 0xd8 <write>
 118:	08 95       	ret

0000011a <TickSNESControl>:
 11a:	e8 2f       	mov	r30, r24
 11c:	80 b1       	in	r24, 0x00	; 0
 11e:	80 95       	com	r24
 120:	82 fb       	bst	r24, 2
 122:	22 27       	eor	r18, r18
 124:	20 f9       	bld	r18, 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	8e 2f       	mov	r24, r30
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	91 05       	cpc	r25, r1
 130:	20 f4       	brcc	.+8      	; 0x13a <TickSNESControl+0x20>
 132:	fc 01       	movw	r30, r24
 134:	ea 5b       	subi	r30, 0xBA	; 186
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	fe c4       	rjmp	.+2556   	; 0xb36 <__tablejump2__>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	72 c0       	rjmp	.+228    	; 0x222 <TickSNESControl+0x108>
 13e:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <countSNESControl>
 142:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <countSNESControl+0x1>
 146:	06 97       	sbiw	r24, 0x06	; 6
 148:	40 f5       	brcc	.+80     	; 0x19a <TickSNESControl+0x80>
 14a:	16 c0       	rjmp	.+44     	; 0x178 <TickSNESControl+0x5e>
 14c:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <countSNESControl>
 150:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <countSNESControl+0x1>
 154:	0c 97       	sbiw	r24, 0x0c	; 12
 156:	08 f0       	brcs	.+2      	; 0x15a <TickSNESControl+0x40>
 158:	4f c0       	rjmp	.+158    	; 0x1f8 <TickSNESControl+0xde>
 15a:	27 c0       	rjmp	.+78     	; 0x1aa <TickSNESControl+0x90>
 15c:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <countSNESControl+0x1>
 160:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <countSNESControl>
 164:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <SNESOutput+0x1>
 168:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <SNESOutput>
 16c:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <dataSNESControl+0x1>
 170:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <dataSNESControl>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	55 c0       	rjmp	.+170    	; 0x222 <TickSNESControl+0x108>
 178:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <countSNESControl>
 17c:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <countSNESControl+0x1>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <countSNESControl+0x1>
 186:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <countSNESControl>
 18a:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <dataSNESControl+0x1>
 18e:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <dataSNESControl>
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	44 c0       	rjmp	.+136    	; 0x222 <TickSNESControl+0x108>
 19a:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <countSNESControl+0x1>
 19e:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <countSNESControl>
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	3c c0       	rjmp	.+120    	; 0x222 <TickSNESControl+0x108>
 1aa:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <dataSNESControl>
 1ae:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <dataSNESControl+0x1>
 1b2:	82 2b       	or	r24, r18
 1b4:	93 2b       	or	r25, r19
 1b6:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <dataSNESControl+0x1>
 1ba:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <dataSNESControl>
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	2e c0       	rjmp	.+92     	; 0x222 <TickSNESControl+0x108>
 1c6:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <countSNESControl>
 1ca:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <countSNESControl+0x1>
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <countSNESControl+0x1>
 1d4:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <countSNESControl>
 1d8:	0c 97       	sbiw	r24, 0x0c	; 12
 1da:	00 f5       	brcc	.+64     	; 0x21c <TickSNESControl+0x102>
 1dc:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <dataSNESControl>
 1e0:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <dataSNESControl+0x1>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <dataSNESControl+0x1>
 1ec:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <dataSNESControl>
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	51 e0       	ldi	r21, 0x01	; 1
 1f6:	15 c0       	rjmp	.+42     	; 0x222 <TickSNESControl+0x108>
 1f8:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <countSNESControl+0x1>
 1fc:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <countSNESControl>
 200:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <dataSNESControl>
 204:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <dataSNESControl+0x1>
 208:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <SNESOutput+0x1>
 20c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <SNESOutput>
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	07 c0       	rjmp	.+14     	; 0x222 <TickSNESControl+0x108>
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	03 c0       	rjmp	.+6      	; 0x222 <TickSNESControl+0x108>
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	51 e0       	ldi	r21, 0x01	; 1
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	25 2b       	or	r18, r21
 22c:	94 2f       	mov	r25, r20
 22e:	99 0f       	add	r25, r25
 230:	29 2b       	or	r18, r25
 232:	22 b9       	out	0x02, r18	; 2
 234:	08 95       	ret

00000236 <TimerSet>:
 236:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <_avr_timer_M>
 23a:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <_avr_timer_M+0x1>
 23e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <_avr_timer_M+0x2>
 242:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <_avr_timer_M+0x3>
 246:	60 93 9f 03 	sts	0x039F, r22	; 0x80039f <_avr_timer_cntcurr>
 24a:	70 93 a0 03 	sts	0x03A0, r23	; 0x8003a0 <_avr_timer_cntcurr+0x1>
 24e:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <_avr_timer_cntcurr+0x2>
 252:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <_avr_timer_cntcurr+0x3>
 256:	08 95       	ret

00000258 <TimerOn>:
 258:	8b e0       	ldi	r24, 0x0B	; 11
 25a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 25e:	8d e7       	ldi	r24, 0x7D	; 125
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 266:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 270:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 274:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 278:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <_avr_timer_M>
 27c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <_avr_timer_M+0x1>
 280:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <_avr_timer_M+0x2>
 284:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <_avr_timer_M+0x3>
 288:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_avr_timer_cntcurr>
 28c:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <_avr_timer_cntcurr+0x1>
 290:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <_avr_timer_cntcurr+0x2>
 294:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <_avr_timer_cntcurr+0x3>
 298:	8f b7       	in	r24, 0x3f	; 63
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	8f bf       	out	0x3f, r24	; 63
 29e:	08 95       	ret

000002a0 <__vector_13>:
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_avr_timer_cntcurr>
 2b6:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <_avr_timer_cntcurr+0x1>
 2ba:	a0 91 a1 03 	lds	r26, 0x03A1	; 0x8003a1 <_avr_timer_cntcurr+0x2>
 2be:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <_avr_timer_cntcurr+0x3>
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	a1 09       	sbc	r26, r1
 2c6:	b1 09       	sbc	r27, r1
 2c8:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_avr_timer_cntcurr>
 2cc:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <_avr_timer_cntcurr+0x1>
 2d0:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <_avr_timer_cntcurr+0x2>
 2d4:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <_avr_timer_cntcurr+0x3>
 2d8:	89 2b       	or	r24, r25
 2da:	8a 2b       	or	r24, r26
 2dc:	8b 2b       	or	r24, r27
 2de:	99 f4       	brne	.+38     	; 0x306 <__vector_13+0x66>
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <TimerFlag>
 2e6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <_avr_timer_M>
 2ea:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <_avr_timer_M+0x1>
 2ee:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <_avr_timer_M+0x2>
 2f2:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <_avr_timer_M+0x3>
 2f6:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_avr_timer_cntcurr>
 2fa:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <_avr_timer_cntcurr+0x1>
 2fe:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <_avr_timer_cntcurr+0x2>
 302:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <_avr_timer_cntcurr+0x3>
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <nokia_lcd_init>:
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	21 9a       	sbi	0x04, 1	; 4
 31e:	22 9a       	sbi	0x04, 2	; 4
 320:	23 9a       	sbi	0x04, 3	; 4
 322:	24 9a       	sbi	0x04, 4	; 4
 324:	25 9a       	sbi	0x04, 5	; 4
 326:	2a 9a       	sbi	0x05, 2	; 5
 328:	29 9a       	sbi	0x05, 1	; 5
 32a:	83 ec       	ldi	r24, 0xC3	; 195
 32c:	99 e0       	ldi	r25, 0x09	; 9
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <nokia_lcd_init+0x16>
 332:	00 c0       	rjmp	.+0      	; 0x334 <nokia_lcd_init+0x1c>
 334:	00 00       	nop
 336:	2a 98       	cbi	0x05, 2	; 5
 338:	8b e5       	ldi	r24, 0x5B	; 91
 33a:	94 e4       	ldi	r25, 0x44	; 68
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <nokia_lcd_init+0x24>
 340:	00 c0       	rjmp	.+0      	; 0x342 <nokia_lcd_init+0x2a>
 342:	00 00       	nop
 344:	2a 9a       	sbi	0x05, 2	; 5
 346:	29 98       	cbi	0x05, 1	; 5
 348:	81 e2       	ldi	r24, 0x21	; 33
 34a:	e4 de       	rcall	.-568    	; 0x114 <write_cmd>
 34c:	83 e1       	ldi	r24, 0x13	; 19
 34e:	e2 de       	rcall	.-572    	; 0x114 <write_cmd>
 350:	86 e0       	ldi	r24, 0x06	; 6
 352:	e0 de       	rcall	.-576    	; 0x114 <write_cmd>
 354:	82 ec       	ldi	r24, 0xC2	; 194
 356:	de de       	rcall	.-580    	; 0x114 <write_cmd>
 358:	80 e2       	ldi	r24, 0x20	; 32
 35a:	dc de       	rcall	.-584    	; 0x114 <write_cmd>
 35c:	89 e0       	ldi	r24, 0x09	; 9
 35e:	da de       	rcall	.-588    	; 0x114 <write_cmd>
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	d8 de       	rcall	.-592    	; 0x114 <write_cmd>
 364:	80 e4       	ldi	r24, 0x40	; 64
 366:	d6 de       	rcall	.-596    	; 0x114 <write_cmd>
 368:	c8 ef       	ldi	r28, 0xF8	; 248
 36a:	d1 e0       	ldi	r29, 0x01	; 1
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	b3 de       	rcall	.-666    	; 0xd8 <write>
 372:	21 97       	sbiw	r28, 0x01	; 1
 374:	d9 f7       	brne	.-10     	; 0x36c <nokia_lcd_init+0x54>
 376:	88 e0       	ldi	r24, 0x08	; 8
 378:	cd de       	rcall	.-614    	; 0x114 <write_cmd>
 37a:	8c e0       	ldi	r24, 0x0C	; 12
 37c:	cb de       	rcall	.-618    	; 0x114 <write_cmd>
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <nokia_lcd_clear>:
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	c6 de       	rcall	.-628    	; 0x114 <write_cmd>
 388:	80 e4       	ldi	r24, 0x40	; 64
 38a:	c4 de       	rcall	.-632    	; 0x114 <write_cmd>
 38c:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <nokia_lcd+0x1f8>
 390:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <nokia_lcd+0x1f9>
 394:	e5 ea       	ldi	r30, 0xA5	; 165
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	8d e9       	ldi	r24, 0x9D	; 157
 39a:	93 e0       	ldi	r25, 0x03	; 3
 39c:	11 92       	st	Z+, r1
 39e:	e8 17       	cp	r30, r24
 3a0:	f9 07       	cpc	r31, r25
 3a2:	e1 f7       	brne	.-8      	; 0x39c <nokia_lcd_clear+0x18>
 3a4:	08 95       	ret

000003a6 <nokia_lcd_set_pixel>:
 3a6:	26 2f       	mov	r18, r22
 3a8:	26 95       	lsr	r18
 3aa:	26 95       	lsr	r18
 3ac:	26 95       	lsr	r18
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	34 e5       	ldi	r19, 0x54	; 84
 3b2:	23 9f       	mul	r18, r19
 3b4:	80 0d       	add	r24, r0
 3b6:	91 1d       	adc	r25, r1
 3b8:	11 24       	eor	r1, r1
 3ba:	44 23       	and	r20, r20
 3bc:	79 f0       	breq	.+30     	; 0x3dc <nokia_lcd_set_pixel+0x36>
 3be:	fc 01       	movw	r30, r24
 3c0:	eb 55       	subi	r30, 0x5B	; 91
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	67 70       	andi	r22, 0x07	; 7
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <nokia_lcd_set_pixel+0x2a>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <nokia_lcd_set_pixel+0x26>
 3d4:	90 81       	ld	r25, Z
 3d6:	89 2b       	or	r24, r25
 3d8:	80 83       	st	Z, r24
 3da:	08 95       	ret
 3dc:	fc 01       	movw	r30, r24
 3de:	eb 55       	subi	r30, 0x5B	; 91
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	67 70       	andi	r22, 0x07	; 7
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <nokia_lcd_set_pixel+0x48>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <nokia_lcd_set_pixel+0x44>
 3f2:	80 95       	com	r24
 3f4:	90 81       	ld	r25, Z
 3f6:	89 23       	and	r24, r25
 3f8:	80 83       	st	Z, r24
 3fa:	08 95       	ret

000003fc <nokia_lcd_render>:
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	86 de       	rcall	.-756    	; 0x114 <write_cmd>
 408:	80 e4       	ldi	r24, 0x40	; 64
 40a:	84 de       	rcall	.-760    	; 0x114 <write_cmd>
 40c:	c5 ea       	ldi	r28, 0xA5	; 165
 40e:	d1 e0       	ldi	r29, 0x01	; 1
 410:	0d e9       	ldi	r16, 0x9D	; 157
 412:	13 e0       	ldi	r17, 0x03	; 3
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	89 91       	ld	r24, Y+
 418:	5f de       	rcall	.-834    	; 0xd8 <write>
 41a:	c0 17       	cp	r28, r16
 41c:	d1 07       	cpc	r29, r17
 41e:	d1 f7       	brne	.-12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	08 95       	ret

0000042a <transferObjToDis>:
 0x03FF, 0x0557, 0x0AAB};

unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
 42a:	2f 92       	push	r2
 42c:	3f 92       	push	r3
 42e:	4f 92       	push	r4
 430:	5f 92       	push	r5
 432:	6f 92       	push	r6
 434:	7f 92       	push	r7
 436:	8f 92       	push	r8
 438:	9f 92       	push	r9
 43a:	af 92       	push	r10
 43c:	bf 92       	push	r11
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	0f 2e       	mov	r0, r31
 450:	f0 e7       	ldi	r31, 0x70	; 112
 452:	6f 2e       	mov	r6, r31
 454:	f3 e1       	ldi	r31, 0x13	; 19
 456:	7f 2e       	mov	r7, r31
 458:	f0 2d       	mov	r31, r0
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
 45a:	81 2c       	mov	r8, r1
 45c:	91 2c       	mov	r9, r1
 45e:	0f 2e       	mov	r0, r31
 460:	f8 e7       	ldi	r31, 0x78	; 120
 462:	4f 2e       	mov	r4, r31
 464:	f1 e0       	ldi	r31, 0x01	; 1
 466:	5f 2e       	mov	r5, r31
 468:	f0 2d       	mov	r31, r0
 46a:	0f 2e       	mov	r0, r31
 46c:	f0 e6       	ldi	r31, 0x60	; 96
 46e:	cf 2e       	mov	r12, r31
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	df 2e       	mov	r13, r31
 474:	f0 2d       	mov	r31, r0
 476:	60 e3       	ldi	r22, 0x30	; 48
 478:	71 e0       	ldi	r23, 0x01	; 1
 47a:	48 e1       	ldi	r20, 0x18	; 24
 47c:	51 e0       	ldi	r21, 0x01	; 1
 47e:	0f 2e       	mov	r0, r31
 480:	f8 e4       	ldi	r31, 0x48	; 72
 482:	af 2e       	mov	r10, r31
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	bf 2e       	mov	r11, r31
 488:	f0 2d       	mov	r31, r0
 48a:	cd c0       	rjmp	.+410    	; 0x626 <transferObjToDis+0x1fc>
 48c:	f1 01       	movw	r30, r2
 48e:	81 91       	ld	r24, Z+
 490:	1f 01       	movw	r2, r30
 492:	82 30       	cpi	r24, 0x02	; 2
 494:	09 f4       	brne	.+2      	; 0x498 <transferObjToDis+0x6e>
 496:	5b c0       	rjmp	.+182    	; 0x54e <transferObjToDis+0x124>
 498:	28 f4       	brcc	.+10     	; 0x4a4 <transferObjToDis+0x7a>
 49a:	88 23       	and	r24, r24
 49c:	59 f0       	breq	.+22     	; 0x4b4 <transferObjToDis+0x8a>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	19 f1       	breq	.+70     	; 0x4e8 <transferObjToDis+0xbe>
 4a2:	0f c0       	rjmp	.+30     	; 0x4c2 <transferObjToDis+0x98>
 4a4:	84 30       	cpi	r24, 0x04	; 4
 4a6:	09 f4       	brne	.+2      	; 0x4aa <transferObjToDis+0x80>
 4a8:	6c c0       	rjmp	.+216    	; 0x582 <transferObjToDis+0x158>
 4aa:	08 f4       	brcc	.+2      	; 0x4ae <transferObjToDis+0x84>
 4ac:	83 c0       	rjmp	.+262    	; 0x5b4 <transferObjToDis+0x18a>
 4ae:	85 30       	cpi	r24, 0x05	; 5
 4b0:	a1 f1       	breq	.+104    	; 0x51a <transferObjToDis+0xf0>
 4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <transferObjToDis+0x98>
 4b4:	89 01       	movw	r16, r18
 4b6:	08 0d       	add	r16, r8
 4b8:	19 1d       	adc	r17, r9
 4ba:	00 55       	subi	r16, 0x50	; 80
 4bc:	1c 4f       	sbci	r17, 0xFC	; 252
 4be:	ac e0       	ldi	r26, 0x0C	; 12
 4c0:	10 c0       	rjmp	.+32     	; 0x4e2 <transferObjToDis+0xb8>
 4c2:	89 01       	movw	r16, r18
 4c4:	08 0d       	add	r16, r8
 4c6:	19 1d       	adc	r17, r9
 4c8:	00 55       	subi	r16, 0x50	; 80
 4ca:	1c 4f       	sbci	r17, 0xFC	; 252
 4cc:	ac e0       	ldi	r26, 0x0C	; 12
 4ce:	96 c0       	rjmp	.+300    	; 0x5fc <transferObjToDis+0x1d2>
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = 0x0000;
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
 4d0:	19 92       	st	Y+, r1
 4d2:	e1 50       	subi	r30, 0x01	; 1
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = 0x0000;
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 4d4:	e9 f7       	brne	.-6      	; 0x4d0 <transferObjToDis+0xa6>
 4d6:	a1 50       	subi	r26, 0x01	; 1
 4d8:	0c 5a       	subi	r16, 0xAC	; 172
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
 4dc:	aa 23       	and	r26, r26
 4de:	09 f4       	brne	.+2      	; 0x4e2 <transferObjToDis+0xb8>
 4e0:	90 c0       	rjmp	.+288    	; 0x602 <transferObjToDis+0x1d8>
 0x03FF, 0x0557, 0x0AAB};

unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
 4e2:	e8 01       	movw	r28, r16
 4e4:	ec e0       	ldi	r30, 0x0C	; 12
 4e6:	f4 cf       	rjmp	.-24     	; 0x4d0 <transferObjToDis+0xa6>
 4e8:	c0 e3       	ldi	r28, 0x30	; 48
 4ea:	d1 e0       	ldi	r29, 0x01	; 1
 4ec:	c9 01       	movw	r24, r18
 4ee:	88 0d       	add	r24, r8
 4f0:	99 1d       	adc	r25, r9
 4f2:	8c 01       	movw	r16, r24
 4f4:	00 55       	subi	r16, 0x50	; 80
 4f6:	1c 4f       	sbci	r17, 0xFC	; 252
				}
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
 4f8:	89 91       	ld	r24, Y+
 4fa:	99 91       	ld	r25, Y+
 4fc:	d8 01       	movw	r26, r16
 4fe:	ec e0       	ldi	r30, 0x0C	; 12
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
 500:	f8 2f       	mov	r31, r24
 502:	f1 70       	andi	r31, 0x01	; 1
 504:	fd 93       	st	X+, r31
						tempTileData = tempTileData >> 1;
 506:	96 95       	lsr	r25
 508:	87 95       	ror	r24
 50a:	e1 50       	subi	r30, 0x01	; 1
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 50c:	c9 f7       	brne	.-14     	; 0x500 <transferObjToDis+0xd6>
 50e:	0c 5a       	subi	r16, 0xAC	; 172
 510:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
 512:	ca 15       	cp	r28, r10
 514:	db 05       	cpc	r29, r11
 516:	81 f7       	brne	.-32     	; 0x4f8 <transferObjToDis+0xce>
 518:	74 c0       	rjmp	.+232    	; 0x602 <transferObjToDis+0x1d8>
 51a:	c0 e0       	ldi	r28, 0x00	; 0
 51c:	d1 e0       	ldi	r29, 0x01	; 1
 51e:	c9 01       	movw	r24, r18
 520:	88 0d       	add	r24, r8
 522:	99 1d       	adc	r25, r9
 524:	8c 01       	movw	r16, r24
 526:	00 55       	subi	r16, 0x50	; 80
 528:	1c 4f       	sbci	r17, 0xFC	; 252
				}
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = block_img[tileY];
 52a:	89 91       	ld	r24, Y+
 52c:	99 91       	ld	r25, Y+
 52e:	d8 01       	movw	r26, r16
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 530:	e0 e0       	ldi	r30, 0x00	; 0
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
 532:	f8 2f       	mov	r31, r24
 534:	f1 70       	andi	r31, 0x01	; 1
 536:	fd 93       	st	X+, r31
						tempTileData = tempTileData >> 1;
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = block_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 53c:	ef 5f       	subi	r30, 0xFF	; 255
 53e:	ec 30       	cpi	r30, 0x0C	; 12
 540:	c1 f7       	brne	.-16     	; 0x532 <transferObjToDis+0x108>
 542:	0c 5a       	subi	r16, 0xAC	; 172
 544:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
 546:	4c 17       	cp	r20, r28
 548:	5d 07       	cpc	r21, r29
 54a:	79 f7       	brne	.-34     	; 0x52a <transferObjToDis+0x100>
 54c:	5a c0       	rjmp	.+180    	; 0x602 <transferObjToDis+0x1d8>
 54e:	c0 e6       	ldi	r28, 0x60	; 96
 550:	d1 e0       	ldi	r29, 0x01	; 1
 552:	c9 01       	movw	r24, r18
 554:	88 0d       	add	r24, r8
 556:	99 1d       	adc	r25, r9
 558:	8c 01       	movw	r16, r24
 55a:	00 55       	subi	r16, 0x50	; 80
 55c:	1c 4f       	sbci	r17, 0xFC	; 252
				}
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bombperson_img[tileY];
 55e:	89 91       	ld	r24, Y+
 560:	99 91       	ld	r25, Y+
 562:	d8 01       	movw	r26, r16
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 564:	e0 e0       	ldi	r30, 0x00	; 0
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
 566:	f8 2f       	mov	r31, r24
 568:	f1 70       	andi	r31, 0x01	; 1
 56a:	fd 93       	st	X+, r31
						tempTileData = tempTileData >> 1;
 56c:	96 95       	lsr	r25
 56e:	87 95       	ror	r24
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bombperson_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 570:	ef 5f       	subi	r30, 0xFF	; 255
 572:	ec 30       	cpi	r30, 0x0C	; 12
 574:	c1 f7       	brne	.-16     	; 0x566 <transferObjToDis+0x13c>
 576:	0c 5a       	subi	r16, 0xAC	; 172
 578:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
 57a:	4c 16       	cp	r4, r28
 57c:	5d 06       	cpc	r5, r29
 57e:	79 f7       	brne	.-34     	; 0x55e <transferObjToDis+0x134>
 580:	40 c0       	rjmp	.+128    	; 0x602 <transferObjToDis+0x1d8>
 582:	c8 e4       	ldi	r28, 0x48	; 72
 584:	d1 e0       	ldi	r29, 0x01	; 1
 586:	c9 01       	movw	r24, r18
 588:	88 0d       	add	r24, r8
 58a:	99 1d       	adc	r25, r9
 58c:	8c 01       	movw	r16, r24
 58e:	00 55       	subi	r16, 0x50	; 80
 590:	1c 4f       	sbci	r17, 0xFC	; 252
				}
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bomb_img[tileY];
 592:	89 91       	ld	r24, Y+
 594:	99 91       	ld	r25, Y+
 596:	d8 01       	movw	r26, r16
 598:	ec e0       	ldi	r30, 0x0C	; 12
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
 59a:	f8 2f       	mov	r31, r24
 59c:	f1 70       	andi	r31, 0x01	; 1
 59e:	fd 93       	st	X+, r31
						tempTileData = tempTileData >> 1;
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	e1 50       	subi	r30, 0x01	; 1
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bomb_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 5a6:	c9 f7       	brne	.-14     	; 0x59a <transferObjToDis+0x170>
 5a8:	0c 5a       	subi	r16, 0xAC	; 172
 5aa:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
 5ac:	cc 16       	cp	r12, r28
 5ae:	dd 06       	cpc	r13, r29
 5b0:	81 f7       	brne	.-32     	; 0x592 <transferObjToDis+0x168>
 5b2:	27 c0       	rjmp	.+78     	; 0x602 <transferObjToDis+0x1d8>
 5b4:	a8 e1       	ldi	r26, 0x18	; 24
 5b6:	b1 e0       	ldi	r27, 0x01	; 1
 5b8:	c9 01       	movw	r24, r18
 5ba:	88 0d       	add	r24, r8
 5bc:	99 1d       	adc	r25, r9
 5be:	fc 01       	movw	r30, r24
 5c0:	e0 55       	subi	r30, 0x50	; 80
 5c2:	fc 4f       	sbci	r31, 0xFC	; 252
 5c4:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
 5c6:	8d 91       	ld	r24, X+
 5c8:	9d 91       	ld	r25, X+
 5ca:	f7 01       	movw	r30, r14
 5cc:	cc e0       	ldi	r28, 0x0C	; 12
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
 5ce:	d8 2f       	mov	r29, r24
 5d0:	d1 70       	andi	r29, 0x01	; 1
 5d2:	d1 93       	st	Z+, r29
						tempTileData = tempTileData >> 1;
 5d4:	96 95       	lsr	r25
 5d6:	87 95       	ror	r24
 5d8:	c1 50       	subi	r28, 0x01	; 1
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 5da:	c9 f7       	brne	.-14     	; 0x5ce <transferObjToDis+0x1a4>
 5dc:	f4 e5       	ldi	r31, 0x54	; 84
 5de:	ef 0e       	add	r14, r31
 5e0:	f1 1c       	adc	r15, r1
					}
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
 5e2:	a6 17       	cp	r26, r22
 5e4:	b7 07       	cpc	r27, r23
 5e6:	79 f7       	brne	.-34     	; 0x5c6 <transferObjToDis+0x19c>
 5e8:	0c c0       	rjmp	.+24     	; 0x602 <transferObjToDis+0x1d8>
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0;
 5ea:	19 92       	st	Y+, r1
				}
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
 5ec:	bf 5f       	subi	r27, 0xFF	; 255
 5ee:	bc 30       	cpi	r27, 0x0C	; 12
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <transferObjToDis+0x1c0>
 5f2:	a1 50       	subi	r26, 0x01	; 1
 5f4:	0c 5a       	subi	r16, 0xAC	; 172
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
 5f8:	aa 23       	and	r26, r26
 5fa:	19 f0       	breq	.+6      	; 0x602 <transferObjToDis+0x1d8>
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
 5fc:	e8 01       	movw	r28, r16
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	f4 cf       	rjmp	.-24     	; 0x5ea <transferObjToDis+0x1c0>
 602:	24 5f       	subi	r18, 0xF4	; 244
 604:	3f 4f       	sbci	r19, 0xFF	; 255

const unsigned TILESIZE = 12;
void transferObjToDis() {
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
 606:	24 35       	cpi	r18, 0x54	; 84
 608:	31 05       	cpc	r19, r1
 60a:	09 f0       	breq	.+2      	; 0x60e <transferObjToDis+0x1e4>
 60c:	3f cf       	rjmp	.-386    	; 0x48c <transferObjToDis+0x62>
 60e:	80 e1       	ldi	r24, 0x10	; 16
 610:	88 1a       	sub	r8, r24
 612:	8c ef       	ldi	r24, 0xFC	; 252
 614:	98 0a       	sbc	r9, r24
 616:	e7 e0       	ldi	r30, 0x07	; 7
 618:	6e 0e       	add	r6, r30
 61a:	71 1c       	adc	r7, r1
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
 61c:	f0 ed       	ldi	r31, 0xD0	; 208
 61e:	8f 16       	cp	r8, r31
 620:	fb e0       	ldi	r31, 0x0B	; 11
 622:	9f 06       	cpc	r9, r31
 624:	21 f0       	breq	.+8      	; 0x62e <transferObjToDis+0x204>
 0x03FF, 0x0557, 0x0AAB};

unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
 626:	13 01       	movw	r2, r6
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	2f cf       	rjmp	.-418    	; 0x48c <transferObjToDis+0x62>
				}
				break;
			}
		}
	}
}
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	ff 90       	pop	r15
 638:	ef 90       	pop	r14
 63a:	df 90       	pop	r13
 63c:	cf 90       	pop	r12
 63e:	bf 90       	pop	r11
 640:	af 90       	pop	r10
 642:	9f 90       	pop	r9
 644:	8f 90       	pop	r8
 646:	7f 90       	pop	r7
 648:	6f 90       	pop	r6
 64a:	5f 90       	pop	r5
 64c:	4f 90       	pop	r4
 64e:	3f 90       	pop	r3
 650:	2f 90       	pop	r2
 652:	08 95       	ret

00000654 <TickGameLogic>:
};*/


enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicPlaying};
unsigned char TickGameLogic(unsigned char state) {
	switch(state) {
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	31 f0       	breq	.+12     	; 0x664 <TickGameLogic+0x10>
 658:	08 f4       	brcc	.+2      	; 0x65c <TickGameLogic+0x8>
 65a:	2d c1       	rjmp	.+602    	; 0x8b6 <TickGameLogic+0x262>
 65c:	84 30       	cpi	r24, 0x04	; 4
 65e:	28 f1       	brcs	.+74     	; 0x6aa <TickGameLogic+0x56>
		
		case GLogicPlaying:
		break;
		
		default:
		state = GLogicStart;
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	08 95       	ret
 664:	20 e7       	ldi	r18, 0x70	; 112
 666:	33 e1       	ldi	r19, 0x13	; 19
 668:	45 e8       	ldi	r20, 0x85	; 133
 66a:	53 e1       	ldi	r21, 0x13	; 19
 66c:	08 c0       	rjmp	.+16     	; 0x67e <TickGameLogic+0x2a>
			break;
			
			case GLogicMenu:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = OBJEmpty;
 66e:	11 92       	st	Z+, r1
 670:	81 50       	subi	r24, 0x01	; 1
			case GLogicInit: 
			break;
			
			case GLogicMenu:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
 672:	e9 f7       	brne	.-6      	; 0x66e <TickGameLogic+0x1a>
 674:	29 5f       	subi	r18, 0xF9	; 249
 676:	3f 4f       	sbci	r19, 0xFF	; 255
	switch(state) {
			case GLogicInit: 
			break;
			
			case GLogicMenu:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
 678:	24 17       	cp	r18, r20
 67a:	35 07       	cpc	r19, r21
 67c:	19 f0       	breq	.+6      	; 0x684 <TickGameLogic+0x30>
	}
};*/


enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicPlaying};
unsigned char TickGameLogic(unsigned char state) {
 67e:	f9 01       	movw	r30, r18
 680:	87 e0       	ldi	r24, 0x07	; 7
 682:	f5 cf       	rjmp	.-22     	; 0x66e <TickGameLogic+0x1a>
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = OBJEmpty;
				}
			}
			objectLocMatrix[1][1] = OBJBlock;
 684:	e0 e7       	ldi	r30, 0x70	; 112
 686:	f3 e1       	ldi	r31, 0x13	; 19
 688:	85 e0       	ldi	r24, 0x05	; 5
 68a:	80 87       	std	Z+8, r24	; 0x08
			objectLocMatrix[1][3] = OBJBlock;
 68c:	82 87       	std	Z+10, r24	; 0x0a
			objectLocMatrix[1][5] = OBJBlock;
 68e:	84 87       	std	Z+12, r24	; 0x0c
			//objectLocMatrix[0][2] = OBJWall;
			objectLocMatrix[2][0] = OBJWall;
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	86 87       	std	Z+14, r24	; 0x0e
			objectLocMatrix[1][6] = OBJWall;
 694:	85 87       	std	Z+13, r24	; 0x0d
			objectLocMatrix[0][0] = OBJPlayer;
 696:	82 e0       	ldi	r24, 0x02	; 2
 698:	80 83       	st	Z, r24
			player1.playerPosX = 0;
 69a:	e4 ea       	ldi	r30, 0xA4	; 164
 69c:	f3 e0       	ldi	r31, 0x03	; 3
 69e:	10 82       	st	Z, r1
			player1.playerPosY = 0;
 6a0:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
 6a2:	13 82       	std	Z+3, r1	; 0x03
			transferObjToDis();
 6a4:	c2 de       	rcall	.-636    	; 0x42a <transferObjToDis>
			break;
 6a6:	82 e0       	ldi	r24, 0x02	; 2
 6a8:	08 95       	ret
			
			case GLogicPlaying:
			//Input and Actions
			if(player1.isBombPlaced == 0 && (SNESOutput & 0x0800) == 0x0800) {
 6aa:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <player1+0x3>
 6ae:	81 11       	cpse	r24, r1
 6b0:	10 c0       	rjmp	.+32     	; 0x6d2 <TickGameLogic+0x7e>
 6b2:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <SNESOutput>
 6b6:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <SNESOutput+0x1>
 6ba:	93 ff       	sbrs	r25, 3
 6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <TickGameLogic+0x7e>
				player1.isBombPlaced = 1;
 6be:	e4 ea       	ldi	r30, 0xA4	; 164
 6c0:	f3 e0       	ldi	r31, 0x03	; 3
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	83 83       	std	Z+3, r24	; 0x03
				player1.bombPosX = player1.playerPosX;
 6c6:	80 81       	ld	r24, Z
 6c8:	84 83       	std	Z+4, r24	; 0x04
				player1.bombPosY = player1.playerPosY;
 6ca:	81 81       	ldd	r24, Z+1	; 0x01
 6cc:	85 83       	std	Z+5, r24	; 0x05
				player1.bombCount = 0;
 6ce:	17 82       	std	Z+7, r1	; 0x07
 6d0:	16 82       	std	Z+6, r1	; 0x06
			}
			if(player1.playerPosX != 6 && (SNESOutput & 0x0010) == 0x0010) {
 6d2:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <player1>
 6d6:	86 30       	cpi	r24, 0x06	; 6
 6d8:	79 f1       	breq	.+94     	; 0x738 <TickGameLogic+0xe4>
 6da:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <SNESOutput>
 6de:	94 ff       	sbrs	r25, 4
 6e0:	29 c0       	rjmp	.+82     	; 0x734 <TickGameLogic+0xe0>
				if(objectLocMatrix[player1.playerPosY][(player1.playerPosX + 1)] == OBJEmpty){
 6e2:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <player1+0x1>
 6e6:	48 2f       	mov	r20, r24
 6e8:	50 e0       	ldi	r21, 0x00	; 0
 6ea:	69 2f       	mov	r22, r25
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	fa 01       	movw	r30, r20
 6f0:	27 e0       	ldi	r18, 0x07	; 7
 6f2:	92 9f       	mul	r25, r18
 6f4:	e0 0d       	add	r30, r0
 6f6:	f1 1d       	adc	r31, r1
 6f8:	11 24       	eor	r1, r1
 6fa:	e0 59       	subi	r30, 0x90	; 144
 6fc:	fc 4e       	sbci	r31, 0xEC	; 236
 6fe:	91 81       	ldd	r25, Z+1	; 0x01
 700:	91 11       	cpse	r25, r1
 702:	bc c0       	rjmp	.+376    	; 0x87c <TickGameLogic+0x228>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
 704:	9b 01       	movw	r18, r22
 706:	22 0f       	add	r18, r18
 708:	33 1f       	adc	r19, r19
 70a:	22 0f       	add	r18, r18
 70c:	33 1f       	adc	r19, r19
 70e:	22 0f       	add	r18, r18
 710:	33 1f       	adc	r19, r19
 712:	26 1b       	sub	r18, r22
 714:	37 0b       	sbc	r19, r23
 716:	20 59       	subi	r18, 0x90	; 144
 718:	3c 4e       	sbci	r19, 0xEC	; 236
 71a:	f9 01       	movw	r30, r18
 71c:	e4 0f       	add	r30, r20
 71e:	f5 1f       	adc	r31, r21
 720:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX + 1;
 722:	8f 5f       	subi	r24, 0xFF	; 255
 724:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
 728:	f9 01       	movw	r30, r18
 72a:	e8 0f       	add	r30, r24
 72c:	f1 1d       	adc	r31, r1
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	80 83       	st	Z, r24
 732:	a4 c0       	rjmp	.+328    	; 0x87c <TickGameLogic+0x228>
				}
			}
			else if(player1.playerPosX != 0 && (SNESOutput & 0x0020) == 0x0020) {
 734:	88 23       	and	r24, r24
 736:	69 f1       	breq	.+90     	; 0x792 <TickGameLogic+0x13e>
 738:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <SNESOutput>
 73c:	95 ff       	sbrs	r25, 5
 73e:	29 c0       	rjmp	.+82     	; 0x792 <TickGameLogic+0x13e>
				if(objectLocMatrix[player1.playerPosY][(player1.playerPosX - 1)] == OBJEmpty){
 740:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <player1+0x1>
 744:	48 2f       	mov	r20, r24
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	69 2f       	mov	r22, r25
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	fa 01       	movw	r30, r20
 74e:	27 e0       	ldi	r18, 0x07	; 7
 750:	92 9f       	mul	r25, r18
 752:	e0 0d       	add	r30, r0
 754:	f1 1d       	adc	r31, r1
 756:	11 24       	eor	r1, r1
 758:	e1 59       	subi	r30, 0x91	; 145
 75a:	fc 4e       	sbci	r31, 0xEC	; 236
 75c:	90 81       	ld	r25, Z
 75e:	91 11       	cpse	r25, r1
 760:	8d c0       	rjmp	.+282    	; 0x87c <TickGameLogic+0x228>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
 762:	9b 01       	movw	r18, r22
 764:	22 0f       	add	r18, r18
 766:	33 1f       	adc	r19, r19
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	26 1b       	sub	r18, r22
 772:	37 0b       	sbc	r19, r23
 774:	20 59       	subi	r18, 0x90	; 144
 776:	3c 4e       	sbci	r19, 0xEC	; 236
 778:	f9 01       	movw	r30, r18
 77a:	e4 0f       	add	r30, r20
 77c:	f5 1f       	adc	r31, r21
 77e:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX - 1;
 780:	81 50       	subi	r24, 0x01	; 1
 782:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
 786:	f9 01       	movw	r30, r18
 788:	e8 0f       	add	r30, r24
 78a:	f1 1d       	adc	r31, r1
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	80 83       	st	Z, r24
 790:	75 c0       	rjmp	.+234    	; 0x87c <TickGameLogic+0x228>
				}
			}
			else if(player1.playerPosY != 0 && (SNESOutput & 0x0080) == 0x0080) {
 792:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <player1+0x1>
 796:	99 23       	and	r25, r25
 798:	d1 f1       	breq	.+116    	; 0x80e <TickGameLogic+0x1ba>
 79a:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <SNESOutput>
 79e:	27 ff       	sbrs	r18, 7
 7a0:	34 c0       	rjmp	.+104    	; 0x80a <TickGameLogic+0x1b6>
				if(objectLocMatrix[player1.playerPosY - 1][(player1.playerPosX)] == OBJEmpty){
 7a2:	69 2f       	mov	r22, r25
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	28 2f       	mov	r18, r24
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	ab 01       	movw	r20, r22
 7ac:	41 50       	subi	r20, 0x01	; 1
 7ae:	51 09       	sbc	r21, r1
 7b0:	fa 01       	movw	r30, r20
 7b2:	ee 0f       	add	r30, r30
 7b4:	ff 1f       	adc	r31, r31
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	e4 1b       	sub	r30, r20
 7c0:	f5 0b       	sbc	r31, r21
 7c2:	e0 59       	subi	r30, 0x90	; 144
 7c4:	fc 4e       	sbci	r31, 0xEC	; 236
 7c6:	e2 0f       	add	r30, r18
 7c8:	f3 1f       	adc	r31, r19
 7ca:	80 81       	ld	r24, Z
 7cc:	81 11       	cpse	r24, r1
 7ce:	56 c0       	rjmp	.+172    	; 0x87c <TickGameLogic+0x228>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
 7d0:	fb 01       	movw	r30, r22
 7d2:	ee 0f       	add	r30, r30
 7d4:	ff 1f       	adc	r31, r31
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	e6 1b       	sub	r30, r22
 7e0:	f7 0b       	sbc	r31, r23
 7e2:	e0 59       	subi	r30, 0x90	; 144
 7e4:	fc 4e       	sbci	r31, 0xEC	; 236
 7e6:	e2 0f       	add	r30, r18
 7e8:	f3 1f       	adc	r31, r19
 7ea:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY - 1;
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
 7f2:	a9 01       	movw	r20, r18
 7f4:	67 e0       	ldi	r22, 0x07	; 7
 7f6:	96 9f       	mul	r25, r22
 7f8:	40 0d       	add	r20, r0
 7fa:	51 1d       	adc	r21, r1
 7fc:	11 24       	eor	r1, r1
 7fe:	fa 01       	movw	r30, r20
 800:	e0 59       	subi	r30, 0x90	; 144
 802:	fc 4e       	sbci	r31, 0xEC	; 236
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	80 83       	st	Z, r24
 808:	39 c0       	rjmp	.+114    	; 0x87c <TickGameLogic+0x228>
				}
			}
			else if(player1.playerPosY != 2 && (SNESOutput & 0x0040) == 0x0040) {
 80a:	92 30       	cpi	r25, 0x02	; 2
 80c:	b9 f1       	breq	.+110    	; 0x87c <TickGameLogic+0x228>
 80e:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <SNESOutput>
 812:	26 ff       	sbrs	r18, 6
 814:	33 c0       	rjmp	.+102    	; 0x87c <TickGameLogic+0x228>
				if(objectLocMatrix[player1.playerPosY + 1][(player1.playerPosX)] == OBJEmpty){
 816:	69 2f       	mov	r22, r25
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	28 2f       	mov	r18, r24
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	ab 01       	movw	r20, r22
 820:	4f 5f       	subi	r20, 0xFF	; 255
 822:	5f 4f       	sbci	r21, 0xFF	; 255
 824:	fa 01       	movw	r30, r20
 826:	ee 0f       	add	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	ee 0f       	add	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	e4 1b       	sub	r30, r20
 834:	f5 0b       	sbc	r31, r21
 836:	e0 59       	subi	r30, 0x90	; 144
 838:	fc 4e       	sbci	r31, 0xEC	; 236
 83a:	e2 0f       	add	r30, r18
 83c:	f3 1f       	adc	r31, r19
 83e:	80 81       	ld	r24, Z
 840:	81 11       	cpse	r24, r1
 842:	1c c0       	rjmp	.+56     	; 0x87c <TickGameLogic+0x228>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
 844:	fb 01       	movw	r30, r22
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	ee 0f       	add	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	e6 1b       	sub	r30, r22
 854:	f7 0b       	sbc	r31, r23
 856:	e0 59       	subi	r30, 0x90	; 144
 858:	fc 4e       	sbci	r31, 0xEC	; 236
 85a:	e2 0f       	add	r30, r18
 85c:	f3 1f       	adc	r31, r19
 85e:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY + 1;
 860:	9f 5f       	subi	r25, 0xFF	; 255
 862:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
 866:	a9 01       	movw	r20, r18
 868:	67 e0       	ldi	r22, 0x07	; 7
 86a:	96 9f       	mul	r25, r22
 86c:	40 0d       	add	r20, r0
 86e:	51 1d       	adc	r21, r1
 870:	11 24       	eor	r1, r1
 872:	fa 01       	movw	r30, r20
 874:	e0 59       	subi	r30, 0x90	; 144
 876:	fc 4e       	sbci	r31, 0xEC	; 236
 878:	82 e0       	ldi	r24, 0x02	; 2
 87a:	80 83       	st	Z, r24
				}
			}
			if((player1.playerPosX != player1.bombPosX || player1.playerPosY != player1.bombPosY) && player1.isBombPlaced != 0) {
 87c:	e4 ea       	ldi	r30, 0xA4	; 164
 87e:	f3 e0       	ldi	r31, 0x03	; 3
 880:	84 81       	ldd	r24, Z+4	; 0x04
 882:	90 81       	ld	r25, Z
 884:	98 13       	cpse	r25, r24
 886:	04 c0       	rjmp	.+8      	; 0x890 <TickGameLogic+0x23c>
 888:	21 81       	ldd	r18, Z+1	; 0x01
 88a:	95 81       	ldd	r25, Z+5	; 0x05
 88c:	29 17       	cp	r18, r25
 88e:	81 f0       	breq	.+32     	; 0x8b0 <TickGameLogic+0x25c>
 890:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <player1+0x3>
 894:	99 23       	and	r25, r25
 896:	61 f0       	breq	.+24     	; 0x8b0 <TickGameLogic+0x25c>
				objectLocMatrix[player1.bombPosY][player1.bombPosX] = OBJBomb;
 898:	e0 91 a9 03 	lds	r30, 0x03A9	; 0x8003a9 <player1+0x5>
 89c:	97 e0       	ldi	r25, 0x07	; 7
 89e:	e9 9f       	mul	r30, r25
 8a0:	f0 01       	movw	r30, r0
 8a2:	11 24       	eor	r1, r1
 8a4:	e0 59       	subi	r30, 0x90	; 144
 8a6:	fc 4e       	sbci	r31, 0xEC	; 236
 8a8:	e8 0f       	add	r30, r24
 8aa:	f1 1d       	adc	r31, r1
 8ac:	84 e0       	ldi	r24, 0x04	; 4
			}
			transferObjToDis();
 8ae:	80 83       	st	Z, r24
 8b0:	bc dd       	rcall	.-1160   	; 0x42a <transferObjToDis>
			break;
 8b2:	83 e0       	ldi	r24, 0x03	; 3
 8b4:	08 95       	ret

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicPlaying};
unsigned char TickGameLogic(unsigned char state) {
	switch(state) {
		case GLogicStart:
		state = GLogicInit;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
			
			default:
			break;
	}
	return state;
}
 8b8:	08 95       	ret

000008ba <matrixToDisplay>:

void matrixToDisplay() {
 8ba:	ef 92       	push	r14
 8bc:	ff 92       	push	r15
 8be:	0f 93       	push	r16
 8c0:	1f 93       	push	r17
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	0f 2e       	mov	r0, r31
 8c8:	f0 eb       	ldi	r31, 0xB0	; 176
 8ca:	ef 2e       	mov	r14, r31
 8cc:	f3 e0       	ldi	r31, 0x03	; 3
 8ce:	ff 2e       	mov	r15, r31
 8d0:	f0 2d       	mov	r31, r0
	for(unsigned char y = 0; y < 48;y++) {
 8d2:	d0 e0       	ldi	r29, 0x00	; 0
 8d4:	0f c0       	rjmp	.+30     	; 0x8f4 <matrixToDisplay+0x3a>
		for(unsigned char x = 0; x < 84; x++) {
			nokia_lcd_set_pixel(x,y, displayMatrix[y][x]);
 8d6:	f8 01       	movw	r30, r16
 8d8:	41 91       	ld	r20, Z+
 8da:	8f 01       	movw	r16, r30
 8dc:	6d 2f       	mov	r22, r29
 8de:	8c 2f       	mov	r24, r28
 8e0:	62 dd       	rcall	.-1340   	; 0x3a6 <nokia_lcd_set_pixel>
	return state;
}

void matrixToDisplay() {
	for(unsigned char y = 0; y < 48;y++) {
		for(unsigned char x = 0; x < 84; x++) {
 8e2:	cf 5f       	subi	r28, 0xFF	; 255
 8e4:	c4 35       	cpi	r28, 0x54	; 84
 8e6:	b9 f7       	brne	.-18     	; 0x8d6 <matrixToDisplay+0x1c>
	}
	return state;
}

void matrixToDisplay() {
	for(unsigned char y = 0; y < 48;y++) {
 8e8:	df 5f       	subi	r29, 0xFF	; 255
 8ea:	f4 e5       	ldi	r31, 0x54	; 84
 8ec:	ef 0e       	add	r14, r31
 8ee:	f1 1c       	adc	r15, r1
 8f0:	d0 33       	cpi	r29, 0x30	; 48
 8f2:	19 f0       	breq	.+6      	; 0x8fa <matrixToDisplay+0x40>
			break;
	}
	return state;
}

void matrixToDisplay() {
 8f4:	87 01       	movw	r16, r14
 8f6:	c0 e0       	ldi	r28, 0x00	; 0
 8f8:	ee cf       	rjmp	.-36     	; 0x8d6 <matrixToDisplay+0x1c>
	for(unsigned char y = 0; y < 48;y++) {
		for(unsigned char x = 0; x < 84; x++) {
			nokia_lcd_set_pixel(x,y, displayMatrix[y][x]);
		}
	}
}
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	ff 90       	pop	r15
 904:	ef 90       	pop	r14
 906:	08 95       	ret

00000908 <TickLCDDisplay>:

enum LCDDisplayState{LCDDisplayStart, LCDDisplayInit, LCDDisplayRunning};
	
unsigned char TickLCDDisplay (unsigned char state) {
	switch(state) {
 908:	88 23       	and	r24, r24
 90a:	19 f0       	breq	.+6      	; 0x912 <TickLCDDisplay+0xa>
 90c:	83 30       	cpi	r24, 0x03	; 3
 90e:	30 f0       	brcs	.+12     	; 0x91c <TickLCDDisplay+0x14>
 910:	0a c0       	rjmp	.+20     	; 0x926 <TickLCDDisplay+0x1e>
		state = LCDDisplayStart;
		break;
	}
	switch(state) {
		case LCDDisplayInit:
		nokia_lcd_init();
 912:	02 dd       	rcall	.-1532   	; 0x318 <nokia_lcd_init>
		nokia_lcd_clear();
 914:	37 dd       	rcall	.-1426   	; 0x384 <nokia_lcd_clear>
		nokia_lcd_render();
 916:	72 dd       	rcall	.-1308   	; 0x3fc <nokia_lcd_render>
		break;
 918:	81 e0       	ldi	r24, 0x01	; 1
		
		case LCDDisplayRunning:
		nokia_lcd_clear();
 91a:	08 95       	ret
 91c:	33 dd       	rcall	.-1434   	; 0x384 <nokia_lcd_clear>
		
		matrixToDisplay();
 91e:	cd df       	rcall	.-102    	; 0x8ba <matrixToDisplay>
 920:	6d dd       	rcall	.-1318   	; 0x3fc <nokia_lcd_render>
		
		nokia_lcd_render();
 922:	82 e0       	ldi	r24, 0x02	; 2
 924:	08 95       	ret
		break;
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	08 95       	ret

0000092a <main>:
		
		case LCDDisplayRunning:
		break;
		
		default:
		state = LCDDisplayStart;
 92a:	cf 93       	push	r28
		
		default:
		break;
	}
	return state;
}
 92c:	df 93       	push	r29

// --------END User defined FSMs-----------------------------------------------


// Implement scheduler code from PES.
int main(){
 92e:	00 d0       	rcall	.+0      	; 0x930 <main+0x6>
 930:	00 d0       	rcall	.+0      	; 0x932 <main+0x8>
 932:	00 d0       	rcall	.+0      	; 0x934 <main+0xa>
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0x03; PORTA = 0xFC;
 938:	83 e0       	ldi	r24, 0x03	; 3
 93a:	81 b9       	out	0x01, r24	; 1
 93c:	8c ef       	ldi	r24, 0xFC	; 252
 93e:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF; PORTB = 0x00;
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	84 b9       	out	0x04, r24	; 4
 944:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 946:	8a b9       	out	0x0a, r24	; 10
 948:	1b b8       	out	0x0b, r1	; 11
 94a:	0f 2e       	mov	r0, r31
 94c:	f4 e6       	ldi	r31, 0x64	; 100
 94e:	ef 2e       	mov	r14, r31
 950:	f0 2d       	mov	r31, r0
 952:	f1 2c       	mov	r15, r1
 954:	00 e0       	ldi	r16, 0x00	; 0
 956:	10 e0       	ldi	r17, 0x00	; 0
 958:	51 e0       	ldi	r21, 0x01	; 1
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	20 e0       	ldi	r18, 0x00	; 0
 960:	04 c0       	rjmp	.+8      	; 0x96a <main+0x40>
    unsigned long int c;
    while(1){
        c = a%b;
        if(c==0){return b;}
        a = b;
		b = c;
 962:	e6 2e       	mov	r14, r22
 964:	f7 2e       	mov	r15, r23
 966:	08 2f       	mov	r16, r24
 968:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 96a:	65 2f       	mov	r22, r21
 96c:	74 2f       	mov	r23, r20
 96e:	83 2f       	mov	r24, r19
 970:	92 2f       	mov	r25, r18
 972:	2e 2d       	mov	r18, r14
 974:	3f 2d       	mov	r19, r15
 976:	40 2f       	mov	r20, r16
 978:	51 2f       	mov	r21, r17
 97a:	bb d0       	rcall	.+374    	; 0xaf2 <__udivmodsi4>
 97c:	5e 2d       	mov	r21, r14
 97e:	4f 2d       	mov	r20, r15
 980:	30 2f       	mov	r19, r16
 982:	21 2f       	mov	r18, r17
        if(c==0){return b;}
 984:	61 15       	cp	r22, r1
 986:	71 05       	cpc	r23, r1
 988:	81 05       	cpc	r24, r1
 98a:	91 05       	cpc	r25, r1
 98c:	51 f7       	brne	.-44     	; 0x962 <main+0x38>
 98e:	54 e6       	ldi	r21, 0x64	; 100
 990:	40 e0       	ldi	r20, 0x00	; 0
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	20 e0       	ldi	r18, 0x00	; 0
 996:	04 c0       	rjmp	.+8      	; 0x9a0 <main+0x76>
        a = b;
		b = c;
 998:	e6 2e       	mov	r14, r22
 99a:	f7 2e       	mov	r15, r23
 99c:	08 2f       	mov	r16, r24
 99e:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
    unsigned long int c;
    while(1){
        c = a%b;
 9a0:	65 2f       	mov	r22, r21
 9a2:	74 2f       	mov	r23, r20
 9a4:	83 2f       	mov	r24, r19
 9a6:	92 2f       	mov	r25, r18
 9a8:	2e 2d       	mov	r18, r14
 9aa:	3f 2d       	mov	r19, r15
 9ac:	40 2f       	mov	r20, r16
 9ae:	51 2f       	mov	r21, r17
 9b0:	a0 d0       	rcall	.+320    	; 0xaf2 <__udivmodsi4>
 9b2:	5e 2d       	mov	r21, r14
 9b4:	4f 2d       	mov	r20, r15
 9b6:	30 2f       	mov	r19, r16
 9b8:	21 2f       	mov	r18, r17
        if(c==0){return b;}
 9ba:	61 15       	cp	r22, r1
 9bc:	71 05       	cpc	r23, r1
 9be:	81 05       	cpc	r24, r1
 9c0:	91 05       	cpc	r25, r1
 9c2:	51 f7       	brne	.-44     	; 0x998 <main+0x6e>
	tmpGCD = findGCD(SMTickLogic_calc, tmpGCD);
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int SMTickSNES_period = SMTickSNES_calc/GCD;
 9c4:	61 e0       	ldi	r22, 0x01	; 1
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	80 e0       	ldi	r24, 0x00	; 0
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	2e 2d       	mov	r18, r14
 9ce:	3f 2d       	mov	r19, r15
 9d0:	40 2f       	mov	r20, r16
 9d2:	51 2f       	mov	r21, r17
 9d4:	8e d0       	rcall	.+284    	; 0xaf2 <__udivmodsi4>
 9d6:	29 01       	movw	r4, r18
 9d8:	3a 01       	movw	r6, r20
	unsigned long int SMTickLCD_period = SMTickLCD_calc/GCD;
 9da:	0f 2e       	mov	r0, r31
 9dc:	f4 e6       	ldi	r31, 0x64	; 100
 9de:	8f 2e       	mov	r8, r31
 9e0:	91 2c       	mov	r9, r1
 9e2:	a1 2c       	mov	r10, r1
 9e4:	b1 2c       	mov	r11, r1
 9e6:	f0 2d       	mov	r31, r0
 9e8:	c5 01       	movw	r24, r10
 9ea:	b4 01       	movw	r22, r8
 9ec:	2e 2d       	mov	r18, r14
 9ee:	3f 2d       	mov	r19, r15
 9f0:	40 2f       	mov	r20, r16
 9f2:	51 2f       	mov	r21, r17
 9f4:	7e d0       	rcall	.+252    	; 0xaf2 <__udivmodsi4>
	unsigned long int SMTickLogic_period = SMTickLogic_calc/GCD;

	//Declare an array of tasks 
	static task task1, task2, task3;
	task *tasks[] = { &task1, &task2, &task3};
 9f6:	86 e0       	ldi	r24, 0x06	; 6
 9f8:	ec e7       	ldi	r30, 0x7C	; 124
 9fa:	f1 e0       	ldi	r31, 0x01	; 1
 9fc:	de 01       	movw	r26, r28
 9fe:	11 96       	adiw	r26, 0x01	; 1
 a00:	01 90       	ld	r0, Z+
 a02:	0d 92       	st	X+, r0
 a04:	8a 95       	dec	r24
 a06:	e1 f7       	brne	.-8      	; 0xa00 <main+0xd6>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
 a08:	e8 e9       	ldi	r30, 0x98	; 152
 a0a:	f1 e0       	ldi	r31, 0x01	; 1
 a0c:	6f ef       	ldi	r22, 0xFF	; 255
 a0e:	60 83       	st	Z, r22
	task1.period = SMTickSNES_period;//Task Period.
 a10:	41 82       	std	Z+1, r4	; 0x01
 a12:	52 82       	std	Z+2, r5	; 0x02
 a14:	63 82       	std	Z+3, r6	; 0x03
 a16:	74 82       	std	Z+4, r7	; 0x04
	task1.elapsedTime = SMTickSNES_period;//Task current elapsed time.
 a18:	45 82       	std	Z+5, r4	; 0x05
 a1a:	56 82       	std	Z+6, r5	; 0x06
 a1c:	67 82       	std	Z+7, r6	; 0x07
 a1e:	70 86       	std	Z+8, r7	; 0x08
	task1.TickFct = &TickSNESControl;//Function pointer for the tick.
 a20:	8d e8       	ldi	r24, 0x8D	; 141
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	92 87       	std	Z+10, r25	; 0x0a
 a26:	81 87       	std	Z+9, r24	; 0x09
	
	task2.state = -1;//Task initial state.
 a28:	ed e8       	ldi	r30, 0x8D	; 141
 a2a:	f1 e0       	ldi	r31, 0x01	; 1
 a2c:	60 83       	st	Z, r22
	task2.period = SMTickLCD_calc;//Task Period.
 a2e:	81 82       	std	Z+1, r8	; 0x01
 a30:	92 82       	std	Z+2, r9	; 0x02
 a32:	a3 82       	std	Z+3, r10	; 0x03
 a34:	b4 82       	std	Z+4, r11	; 0x04
	task2.elapsedTime = SMTickLCD_period;//Task current elapsed time.
 a36:	25 83       	std	Z+5, r18	; 0x05
 a38:	36 83       	std	Z+6, r19	; 0x06
 a3a:	47 83       	std	Z+7, r20	; 0x07
 a3c:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &TickLCDDisplay;//Function pointer for the tick.
 a3e:	84 e8       	ldi	r24, 0x84	; 132
 a40:	94 e0       	ldi	r25, 0x04	; 4
 a42:	92 87       	std	Z+10, r25	; 0x0a
 a44:	81 87       	std	Z+9, r24	; 0x09
	
	task3.state = -1;//Task initial state.
 a46:	e2 e8       	ldi	r30, 0x82	; 130
 a48:	f1 e0       	ldi	r31, 0x01	; 1
 a4a:	60 83       	st	Z, r22
	task3.period = SMTickLogic_calc;//Task Period.
 a4c:	81 82       	std	Z+1, r8	; 0x01
 a4e:	92 82       	std	Z+2, r9	; 0x02
 a50:	a3 82       	std	Z+3, r10	; 0x03
 a52:	b4 82       	std	Z+4, r11	; 0x04
	task3.elapsedTime = SMTickLogic_period;//Task current elapsed time.
 a54:	25 83       	std	Z+5, r18	; 0x05
 a56:	36 83       	std	Z+6, r19	; 0x06
 a58:	47 83       	std	Z+7, r20	; 0x07
 a5a:	50 87       	std	Z+8, r21	; 0x08
	task3.TickFct = &TickGameLogic;//Function pointer for the tick.
 a5c:	8a e2       	ldi	r24, 0x2A	; 42
 a5e:	93 e0       	ldi	r25, 0x03	; 3
 a60:	92 87       	std	Z+10, r25	; 0x0a
 a62:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
 a64:	6e 2d       	mov	r22, r14
 a66:	7f 2d       	mov	r23, r15
 a68:	80 2f       	mov	r24, r16
 a6a:	91 2f       	mov	r25, r17
	TimerOn();
 a6c:	e4 db       	rcall	.-2104   	; 0x236 <TimerSet>
 a6e:	f4 db       	rcall	.-2072   	; 0x258 <TimerOn>
 a70:	7e 01       	movw	r14, r28
 a72:	87 e0       	ldi	r24, 0x07	; 7
 a74:	e8 0e       	add	r14, r24
 a76:	f1 1c       	adc	r15, r1
 a78:	de 01       	movw	r26, r28
 a7a:	11 96       	adiw	r26, 0x01	; 1
 a7c:	6d 01       	movw	r12, r26
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 a7e:	f6 01       	movw	r30, r12
 a80:	01 91       	ld	r16, Z+
 a82:	11 91       	ld	r17, Z+
 a84:	6f 01       	movw	r12, r30
 a86:	d8 01       	movw	r26, r16
 a88:	15 96       	adiw	r26, 0x05	; 5
 a8a:	4d 91       	ld	r20, X+
 a8c:	5d 91       	ld	r21, X+
 a8e:	6d 91       	ld	r22, X+
 a90:	7c 91       	ld	r23, X
 a92:	18 97       	sbiw	r26, 0x08	; 8
 a94:	11 96       	adiw	r26, 0x01	; 1
 a96:	8d 91       	ld	r24, X+
 a98:	9d 91       	ld	r25, X+
 a9a:	0d 90       	ld	r0, X+
 a9c:	bc 91       	ld	r27, X
 a9e:	a0 2d       	mov	r26, r0
 aa0:	48 17       	cp	r20, r24
 aa2:	59 07       	cpc	r21, r25
 aa4:	6a 07       	cpc	r22, r26
 aa6:	7b 07       	cpc	r23, r27
 aa8:	71 f4       	brne	.+28     	; 0xac6 <main+0x19c>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 aaa:	f8 01       	movw	r30, r16
 aac:	80 81       	ld	r24, Z
 aae:	01 84       	ldd	r0, Z+9	; 0x09
 ab0:	f2 85       	ldd	r31, Z+10	; 0x0a
 ab2:	e0 2d       	mov	r30, r0
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	09 95       	icall
 ab8:	d8 01       	movw	r26, r16
 aba:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 abc:	f8 01       	movw	r30, r16
 abe:	15 82       	std	Z+5, r1	; 0x05
 ac0:	16 82       	std	Z+6, r1	; 0x06
 ac2:	17 82       	std	Z+7, r1	; 0x07
 ac4:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 ac6:	f8 01       	movw	r30, r16
 ac8:	85 81       	ldd	r24, Z+5	; 0x05
 aca:	96 81       	ldd	r25, Z+6	; 0x06
 acc:	a7 81       	ldd	r26, Z+7	; 0x07
 ace:	b0 85       	ldd	r27, Z+8	; 0x08
 ad0:	01 96       	adiw	r24, 0x01	; 1
 ad2:	a1 1d       	adc	r26, r1
 ad4:	b1 1d       	adc	r27, r1
 ad6:	85 83       	std	Z+5, r24	; 0x05
 ad8:	96 83       	std	Z+6, r25	; 0x06
 ada:	a7 83       	std	Z+7, r26	; 0x07
 adc:	b0 87       	std	Z+8, r27	; 0x08
	TimerOn();
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 ade:	ce 14       	cp	r12, r14
 ae0:	df 04       	cpc	r13, r15
 ae2:	69 f6       	brne	.-102    	; 0xa7e <main+0x154>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 ae4:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <TimerFlag>
 ae8:	88 23       	and	r24, r24
 aea:	e1 f3       	breq	.-8      	; 0xae4 <main+0x1ba>
		TimerFlag = 0;
 aec:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <TimerFlag>
	}
 af0:	c3 cf       	rjmp	.-122    	; 0xa78 <main+0x14e>

00000af2 <__udivmodsi4>:
 af2:	a1 e2       	ldi	r26, 0x21	; 33
 af4:	1a 2e       	mov	r1, r26
 af6:	aa 1b       	sub	r26, r26
 af8:	bb 1b       	sub	r27, r27
 afa:	fd 01       	movw	r30, r26
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <__udivmodsi4_ep>

00000afe <__udivmodsi4_loop>:
 afe:	aa 1f       	adc	r26, r26
 b00:	bb 1f       	adc	r27, r27
 b02:	ee 1f       	adc	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	a2 17       	cp	r26, r18
 b08:	b3 07       	cpc	r27, r19
 b0a:	e4 07       	cpc	r30, r20
 b0c:	f5 07       	cpc	r31, r21
 b0e:	20 f0       	brcs	.+8      	; 0xb18 <__udivmodsi4_ep>
 b10:	a2 1b       	sub	r26, r18
 b12:	b3 0b       	sbc	r27, r19
 b14:	e4 0b       	sbc	r30, r20
 b16:	f5 0b       	sbc	r31, r21

00000b18 <__udivmodsi4_ep>:
 b18:	66 1f       	adc	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	1a 94       	dec	r1
 b22:	69 f7       	brne	.-38     	; 0xafe <__udivmodsi4_loop>
 b24:	60 95       	com	r22
 b26:	70 95       	com	r23
 b28:	80 95       	com	r24
 b2a:	90 95       	com	r25
 b2c:	9b 01       	movw	r18, r22
 b2e:	ac 01       	movw	r20, r24
 b30:	bd 01       	movw	r22, r26
 b32:	cf 01       	movw	r24, r30
 b34:	08 95       	ret

00000b36 <__tablejump2__>:
 b36:	ee 0f       	add	r30, r30
 b38:	ff 1f       	adc	r31, r31
 b3a:	00 24       	eor	r0, r0
 b3c:	00 1c       	adc	r0, r0
 b3e:	0b be       	out	0x3b, r0	; 59
 b40:	07 90       	elpm	r0, Z+
 b42:	f6 91       	elpm	r31, Z
 b44:	e0 2d       	mov	r30, r0
 b46:	09 94       	ijmp

00000b48 <_exit>:
 b48:	f8 94       	cli

00000b4a <__stop_program>:
 b4a:	ff cf       	rjmp	.-2      	; 0xb4a <__stop_program>
