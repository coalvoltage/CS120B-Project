
jim011_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800100  00001f60  00001ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000124e  0080025c  0080025c  00002150  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000021c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f7f  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c33  00000000  00000000  00005337  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c94  00000000  00000000  00005f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  00007c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef4  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001df0  00000000  00000000  00008fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000adc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c1       	rjmp	.+670    	; 0x2a0 <__ctors_end>
       2:	00 00       	nop
       4:	6c c1       	rjmp	.+728    	; 0x2de <__bad_interrupt>
       6:	00 00       	nop
       8:	6a c1       	rjmp	.+724    	; 0x2de <__bad_interrupt>
       a:	00 00       	nop
       c:	68 c1       	rjmp	.+720    	; 0x2de <__bad_interrupt>
       e:	00 00       	nop
      10:	66 c1       	rjmp	.+716    	; 0x2de <__bad_interrupt>
      12:	00 00       	nop
      14:	64 c1       	rjmp	.+712    	; 0x2de <__bad_interrupt>
      16:	00 00       	nop
      18:	62 c1       	rjmp	.+708    	; 0x2de <__bad_interrupt>
      1a:	00 00       	nop
      1c:	60 c1       	rjmp	.+704    	; 0x2de <__bad_interrupt>
      1e:	00 00       	nop
      20:	5e c1       	rjmp	.+700    	; 0x2de <__bad_interrupt>
      22:	00 00       	nop
      24:	5c c1       	rjmp	.+696    	; 0x2de <__bad_interrupt>
      26:	00 00       	nop
      28:	5a c1       	rjmp	.+692    	; 0x2de <__bad_interrupt>
      2a:	00 00       	nop
      2c:	58 c1       	rjmp	.+688    	; 0x2de <__bad_interrupt>
      2e:	00 00       	nop
      30:	56 c1       	rjmp	.+684    	; 0x2de <__bad_interrupt>
      32:	00 00       	nop
      34:	66 c2       	rjmp	.+1228   	; 0x502 <__vector_13>
      36:	00 00       	nop
      38:	52 c1       	rjmp	.+676    	; 0x2de <__bad_interrupt>
      3a:	00 00       	nop
      3c:	50 c1       	rjmp	.+672    	; 0x2de <__bad_interrupt>
      3e:	00 00       	nop
      40:	4e c1       	rjmp	.+668    	; 0x2de <__bad_interrupt>
      42:	00 00       	nop
      44:	4c c1       	rjmp	.+664    	; 0x2de <__bad_interrupt>
      46:	00 00       	nop
      48:	4a c1       	rjmp	.+660    	; 0x2de <__bad_interrupt>
      4a:	00 00       	nop
      4c:	48 c1       	rjmp	.+656    	; 0x2de <__bad_interrupt>
      4e:	00 00       	nop
      50:	46 c1       	rjmp	.+652    	; 0x2de <__bad_interrupt>
      52:	00 00       	nop
      54:	44 c1       	rjmp	.+648    	; 0x2de <__bad_interrupt>
      56:	00 00       	nop
      58:	42 c1       	rjmp	.+644    	; 0x2de <__bad_interrupt>
      5a:	00 00       	nop
      5c:	40 c1       	rjmp	.+640    	; 0x2de <__bad_interrupt>
      5e:	00 00       	nop
      60:	3e c1       	rjmp	.+636    	; 0x2de <__bad_interrupt>
      62:	00 00       	nop
      64:	3c c1       	rjmp	.+632    	; 0x2de <__bad_interrupt>
      66:	00 00       	nop
      68:	3a c1       	rjmp	.+628    	; 0x2de <__bad_interrupt>
      6a:	00 00       	nop
      6c:	38 c1       	rjmp	.+624    	; 0x2de <__bad_interrupt>
      6e:	00 00       	nop
      70:	36 c1       	rjmp	.+620    	; 0x2de <__bad_interrupt>
      72:	00 00       	nop
      74:	34 c1       	rjmp	.+616    	; 0x2de <__bad_interrupt>
      76:	00 00       	nop
      78:	32 c1       	rjmp	.+612    	; 0x2de <__bad_interrupt>
      7a:	00 00       	nop
      7c:	30 c1       	rjmp	.+608    	; 0x2de <__bad_interrupt>
      7e:	00 00       	nop
      80:	2e c1       	rjmp	.+604    	; 0x2de <__bad_interrupt>
      82:	00 00       	nop
      84:	2c c1       	rjmp	.+600    	; 0x2de <__bad_interrupt>
      86:	00 00       	nop
      88:	2a c1       	rjmp	.+596    	; 0x2de <__bad_interrupt>
      8a:	00 00       	nop
      8c:	79 04       	cpc	r7, r9
      8e:	95 04       	cpc	r9, r5
      90:	b8 04       	cpc	r11, r8
      92:	dc 04       	cpc	r13, r12
      94:	23 05       	cpc	r18, r3
      96:	6a 05       	cpc	r22, r10
      98:	46 05       	cpc	r20, r6
      9a:	ff 04       	cpc	r15, r15
      9c:	90 05       	cpc	r25, r0
      9e:	44 06       	cpc	r4, r20
      a0:	4e 06       	cpc	r4, r30
      a2:	01 06       	cpc	r0, r17
      a4:	d5 07       	cpc	r29, r21
      a6:	19 06       	cpc	r1, r25
      a8:	3d 06       	cpc	r3, r29
      aa:	28 06       	cpc	r2, r24
      ac:	d5 07       	cpc	r29, r21
      ae:	36 06       	cpc	r3, r22
      b0:	2f 06       	cpc	r2, r31
      b2:	a2 0e       	add	r10, r18
      b4:	7f 0e       	add	r7, r31
      b6:	61 0e       	add	r6, r17
      b8:	66 0e       	add	r6, r22
      ba:	7b 0e       	add	r7, r27
      bc:	76 0e       	add	r7, r22
      be:	71 0e       	add	r7, r17

000000c0 <CHARSET>:
      c0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      d0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      e0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      f0:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     100:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     110:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     120:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     130:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     140:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     150:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     160:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     170:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     180:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     190:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1a0:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1b0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1c0:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1d0:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1e0:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1f0:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     200:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     210:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     220:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     230:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     240:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     250:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     260:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     270:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     280:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     290:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

000002a0 <__ctors_end>:
     2a0:	11 24       	eor	r1, r1
     2a2:	1f be       	out	0x3f, r1	; 63
     2a4:	cf ef       	ldi	r28, 0xFF	; 255
     2a6:	d0 e4       	ldi	r29, 0x40	; 64
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	cd bf       	out	0x3d, r28	; 61

000002ac <__do_copy_data>:
     2ac:	12 e0       	ldi	r17, 0x02	; 2
     2ae:	a0 e0       	ldi	r26, 0x00	; 0
     2b0:	b1 e0       	ldi	r27, 0x01	; 1
     2b2:	e0 e6       	ldi	r30, 0x60	; 96
     2b4:	ff e1       	ldi	r31, 0x1F	; 31
     2b6:	00 e0       	ldi	r16, 0x00	; 0
     2b8:	0b bf       	out	0x3b, r16	; 59
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__do_copy_data+0x14>
     2bc:	07 90       	elpm	r0, Z+
     2be:	0d 92       	st	X+, r0
     2c0:	ac 35       	cpi	r26, 0x5C	; 92
     2c2:	b1 07       	cpc	r27, r17
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <__do_copy_data+0x10>

000002c6 <__do_clear_bss>:
     2c6:	24 e1       	ldi	r18, 0x14	; 20
     2c8:	ac e5       	ldi	r26, 0x5C	; 92
     2ca:	b2 e0       	ldi	r27, 0x02	; 2
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <.do_clear_bss_start>

000002ce <.do_clear_bss_loop>:
     2ce:	1d 92       	st	X+, r1

000002d0 <.do_clear_bss_start>:
     2d0:	aa 3a       	cpi	r26, 0xAA	; 170
     2d2:	b2 07       	cpc	r27, r18
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <.do_clear_bss_loop>
     2d6:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <main>
     2da:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <_exit>

000002de <__bad_interrupt>:
     2de:	90 ce       	rjmp	.-736    	; 0x0 <__vectors>

000002e0 <write>:
		default:
		break;
	}
	
	return state;
}
     2e0:	59 98       	cbi	0x0b, 1	; 11
     2e2:	66 23       	and	r22, r22
     2e4:	11 f0       	breq	.+4      	; 0x2ea <write+0xa>
     2e6:	5b 9a       	sbi	0x0b, 3	; 11
     2e8:	15 c0       	rjmp	.+42     	; 0x314 <write+0x34>
     2ea:	5b 98       	cbi	0x0b, 3	; 11
     2ec:	13 c0       	rjmp	.+38     	; 0x314 <write+0x34>
     2ee:	ac 01       	movw	r20, r24
     2f0:	02 2e       	mov	r0, r18
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <write+0x18>
     2f4:	55 95       	asr	r21
     2f6:	47 95       	ror	r20
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <write+0x14>
     2fc:	40 ff       	sbrs	r20, 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <write+0x24>
     300:	5c 9a       	sbi	0x0b, 4	; 11
     302:	01 c0       	rjmp	.+2      	; 0x306 <write+0x26>
     304:	5c 98       	cbi	0x0b, 4	; 11
     306:	5d 9a       	sbi	0x0b, 5	; 11
     308:	5d 98       	cbi	0x0b, 5	; 11
     30a:	21 50       	subi	r18, 0x01	; 1
     30c:	31 09       	sbc	r19, r1
     30e:	78 f7       	brcc	.-34     	; 0x2ee <write+0xe>
     310:	59 9a       	sbi	0x0b, 1	; 11
     312:	08 95       	ret
     314:	27 e0       	ldi	r18, 0x07	; 7
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	e9 cf       	rjmp	.-46     	; 0x2ee <write+0xe>

0000031c <write_cmd>:
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	e0 cf       	rjmp	.-64     	; 0x2e0 <write>
     320:	08 95       	ret

00000322 <TickPWMMotor>:
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	09 f4       	brne	.+2      	; 0x328 <TickPWMMotor+0x6>
     326:	4c c0       	rjmp	.+152    	; 0x3c0 <TickPWMMotor+0x9e>
     328:	08 f4       	brcc	.+2      	; 0x32c <TickPWMMotor+0xa>
     32a:	43 c0       	rjmp	.+134    	; 0x3b2 <TickPWMMotor+0x90>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	21 f0       	breq	.+8      	; 0x338 <TickPWMMotor+0x16>
     330:	85 30       	cpi	r24, 0x05	; 5
     332:	69 f0       	breq	.+26     	; 0x34e <TickPWMMotor+0x2c>
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	08 95       	ret
     338:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <PWMCount>
     33c:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <PWMCount+0x1>
     340:	05 97       	sbiw	r24, 0x05	; 5
     342:	f0 f1       	brcs	.+124    	; 0x3c0 <TickPWMMotor+0x9e>
     344:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <PWMCount+0x1>
     348:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <PWMCount>
     34c:	34 c0       	rjmp	.+104    	; 0x3b6 <TickPWMMotor+0x94>
     34e:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <PWMCount>
     352:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <PWMCount+0x1>
     356:	05 97       	sbiw	r24, 0x05	; 5
     358:	70 f1       	brcs	.+92     	; 0x3b6 <TickPWMMotor+0x94>
     35a:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <PWMCount+0x1>
     35e:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <PWMCount>
     362:	2e c0       	rjmp	.+92     	; 0x3c0 <TickPWMMotor+0x9e>
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	85 b9       	out	0x05, r24	; 5
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <rumbleMes>
     36e:	03 c0       	rjmp	.+6      	; 0x376 <TickPWMMotor+0x54>
     370:	15 b8       	out	0x05, r1	; 5
     372:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <rumbleMes>
     376:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <PWMCount>
     37a:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <PWMCount+0x1>
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <PWMCount+0x1>
     384:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <PWMCount>
     388:	84 e0       	ldi	r24, 0x04	; 4
     38a:	08 95       	ret
     38c:	15 b8       	out	0x05, r1	; 5
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <rumbleMes>
     394:	03 c0       	rjmp	.+6      	; 0x39c <TickPWMMotor+0x7a>
     396:	15 b8       	out	0x05, r1	; 5
     398:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <rumbleMes>
     39c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <PWMCount>
     3a0:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <PWMCount+0x1>
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <PWMCount+0x1>
     3aa:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <PWMCount>
     3ae:	85 e0       	ldi	r24, 0x05	; 5
     3b0:	08 95       	ret
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	08 95       	ret
     3b6:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <rumbleOn>
     3ba:	81 11       	cpse	r24, r1
     3bc:	e7 cf       	rjmp	.-50     	; 0x38c <TickPWMMotor+0x6a>
     3be:	eb cf       	rjmp	.-42     	; 0x396 <TickPWMMotor+0x74>
     3c0:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <rumbleOn>
     3c4:	81 11       	cpse	r24, r1
     3c6:	ce cf       	rjmp	.-100    	; 0x364 <TickPWMMotor+0x42>
     3c8:	d3 cf       	rjmp	.-90     	; 0x370 <TickPWMMotor+0x4e>

000003ca <TickPWMMotorManager>:
     3ca:	82 30       	cpi	r24, 0x02	; 2
     3cc:	61 f0       	breq	.+24     	; 0x3e6 <TickPWMMotorManager+0x1c>
     3ce:	28 f4       	brcc	.+10     	; 0x3da <TickPWMMotorManager+0x10>
     3d0:	88 23       	and	r24, r24
     3d2:	d1 f0       	breq	.+52     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	21 f1       	breq	.+72     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3d8:	5d c0       	rjmp	.+186    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     3da:	84 30       	cpi	r24, 0x04	; 4
     3dc:	49 f0       	breq	.+18     	; 0x3f0 <TickPWMMotorManager+0x26>
     3de:	a8 f1       	brcs	.+106    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3e0:	85 30       	cpi	r24, 0x05	; 5
     3e2:	f1 f0       	breq	.+60     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3e4:	57 c0       	rjmp	.+174    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     3e6:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <vibrateQueueSize>
     3ea:	81 11       	cpse	r24, r1
     3ec:	1d c0       	rjmp	.+58     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3ee:	18 c0       	rjmp	.+48     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3f0:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <vibrateDuration>
     3f4:	30 91 ba 04 	lds	r19, 0x04BA	; 0x8004ba <vibrateDuration+0x1>
     3f8:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <vibrateQueueCount>
     3fc:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <vibrateQueueCount+0x1>
     400:	82 17       	cp	r24, r18
     402:	93 07       	cpc	r25, r19
     404:	80 f5       	brcc	.+96     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     406:	21 c0       	rjmp	.+66     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     408:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <vibrateQueueSize>
     40c:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <vibrateQueueStart>
     410:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <vibrateQueueEnd>
     414:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <vibrateDuration+0x1>
     418:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <vibrateDuration>
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	08 95       	ret
     420:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <rumbleOn>
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	08 95       	ret
     428:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <vibrateQueueStart>
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	ea 55       	subi	r30, 0x5A	; 90
     430:	fb 4f       	sbci	r31, 0xFB	; 251
     432:	80 81       	ld	r24, Z
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <vibrateDuration+0x1>
     43a:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <vibrateDuration>
     43e:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <vibrateQueueCount+0x1>
     442:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <vibrateQueueCount>
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	08 95       	ret
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <rumbleOn>
     450:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <vibrateQueueCount>
     454:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <vibrateQueueCount+0x1>
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <vibrateQueueCount+0x1>
     45e:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <vibrateQueueCount>
     462:	84 e0       	ldi	r24, 0x04	; 4
     464:	08 95       	ret
     466:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <rumbleOn>
     46a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <vibrateQueueStart>
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	18 f0       	brcs	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     472:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <vibrateQueueStart>
     476:	03 c0       	rjmp	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     478:	8f 5f       	subi	r24, 0xFF	; 255
     47a:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <vibrateQueueStart>
     47e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <vibrateQueueSize>
     482:	81 50       	subi	r24, 0x01	; 1
     484:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <vibrateQueueSize>
     488:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <vibrateQueueCount+0x1>
     48c:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <vibrateQueueCount>
     490:	85 e0       	ldi	r24, 0x05	; 5
     492:	08 95       	ret
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	08 95       	ret

00000498 <TimerSet>:
     498:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <_avr_timer_M>
     49c:	70 93 eb 01 	sts	0x01EB, r23	; 0x8001eb <_avr_timer_M+0x1>
     4a0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <_avr_timer_M+0x2>
     4a4:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <_avr_timer_M+0x3>
     4a8:	60 93 9a 04 	sts	0x049A, r22	; 0x80049a <_avr_timer_cntcurr>
     4ac:	70 93 9b 04 	sts	0x049B, r23	; 0x80049b <_avr_timer_cntcurr+0x1>
     4b0:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_avr_timer_cntcurr+0x2>
     4b4:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <_avr_timer_cntcurr+0x3>
     4b8:	08 95       	ret

000004ba <TimerOn>:
     4ba:	8b e0       	ldi	r24, 0x0B	; 11
     4bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     4c0:	8d e7       	ldi	r24, 0x7D	; 125
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     4d2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     4d6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4da:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_avr_timer_M>
     4de:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <_avr_timer_M+0x1>
     4e2:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <_avr_timer_M+0x2>
     4e6:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <_avr_timer_M+0x3>
     4ea:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <_avr_timer_cntcurr>
     4ee:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <_avr_timer_cntcurr+0x1>
     4f2:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <_avr_timer_cntcurr+0x2>
     4f6:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <_avr_timer_cntcurr+0x3>
     4fa:	8f b7       	in	r24, 0x3f	; 63
     4fc:	80 68       	ori	r24, 0x80	; 128
     4fe:	8f bf       	out	0x3f, r24	; 63
     500:	08 95       	ret

00000502 <__vector_13>:
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	8f 93       	push	r24
     50e:	9f 93       	push	r25
     510:	af 93       	push	r26
     512:	bf 93       	push	r27
     514:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <_avr_timer_cntcurr>
     518:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <_avr_timer_cntcurr+0x1>
     51c:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <_avr_timer_cntcurr+0x2>
     520:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <_avr_timer_cntcurr+0x3>
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	a1 09       	sbc	r26, r1
     528:	b1 09       	sbc	r27, r1
     52a:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <_avr_timer_cntcurr>
     52e:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <_avr_timer_cntcurr+0x1>
     532:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <_avr_timer_cntcurr+0x2>
     536:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <_avr_timer_cntcurr+0x3>
     53a:	89 2b       	or	r24, r25
     53c:	8a 2b       	or	r24, r26
     53e:	8b 2b       	or	r24, r27
     540:	99 f4       	brne	.+38     	; 0x568 <__vector_13+0x66>
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <TimerFlag>
     548:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_avr_timer_M>
     54c:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <_avr_timer_M+0x1>
     550:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <_avr_timer_M+0x2>
     554:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <_avr_timer_M+0x3>
     558:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <_avr_timer_cntcurr>
     55c:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <_avr_timer_cntcurr+0x1>
     560:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <_avr_timer_cntcurr+0x2>
     564:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <_avr_timer_cntcurr+0x3>
     568:	bf 91       	pop	r27
     56a:	af 91       	pop	r26
     56c:	9f 91       	pop	r25
     56e:	8f 91       	pop	r24
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <SNES_init>:
     57a:	10 9a       	sbi	0x02, 0	; 2
     57c:	11 9a       	sbi	0x02, 1	; 2
     57e:	08 95       	ret

00000580 <SNES_Read>:
     580:	11 9a       	sbi	0x02, 1	; 2
     582:	10 9a       	sbi	0x02, 0	; 2
     584:	11 98       	cbi	0x02, 1	; 2
     586:	20 b1       	in	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	20 95       	com	r18
     58c:	30 95       	com	r19
     58e:	22 fb       	bst	r18, 2
     590:	88 27       	eor	r24, r24
     592:	80 f9       	bld	r24, 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	40 e1       	ldi	r20, 0x10	; 16
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	10 98       	cbi	0x02, 0	; 2
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	20 b1       	in	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	20 95       	com	r18
     5a6:	30 95       	com	r19
     5a8:	22 fb       	bst	r18, 2
     5aa:	66 27       	eor	r22, r22
     5ac:	60 f9       	bld	r22, 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	86 2b       	or	r24, r22
     5b2:	97 2b       	or	r25, r23
     5b4:	10 9a       	sbi	0x02, 0	; 2
     5b6:	41 50       	subi	r20, 0x01	; 1
     5b8:	51 09       	sbc	r21, r1
     5ba:	79 f7       	brne	.-34     	; 0x59a <SNES_Read+0x1a>
     5bc:	08 95       	ret

000005be <TickSNESControl>:
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	38 f4       	brcc	.+14     	; 0x5d0 <TickSNESControl+0x12>
     5c2:	de df       	rcall	.-68     	; 0x580 <SNES_Read>
     5c4:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <SNESOutput+0x1>
     5c8:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <SNESOutput>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	08 95       	ret
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	08 95       	ret

000005d4 <nokia_lcd_init>:
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	51 9a       	sbi	0x0a, 1	; 10
     5da:	52 9a       	sbi	0x0a, 2	; 10
     5dc:	53 9a       	sbi	0x0a, 3	; 10
     5de:	54 9a       	sbi	0x0a, 4	; 10
     5e0:	55 9a       	sbi	0x0a, 5	; 10
     5e2:	5a 9a       	sbi	0x0b, 2	; 11
     5e4:	59 9a       	sbi	0x0b, 1	; 11
     5e6:	8f e4       	ldi	r24, 0x4F	; 79
     5e8:	93 ec       	ldi	r25, 0xC3	; 195
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <nokia_lcd_init+0x16>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <nokia_lcd_init+0x1c>
     5f0:	00 00       	nop
     5f2:	5a 98       	cbi	0x0b, 2	; 11
     5f4:	9f eb       	ldi	r25, 0xBF	; 191
     5f6:	25 e4       	ldi	r18, 0x45	; 69
     5f8:	84 e0       	ldi	r24, 0x04	; 4
     5fa:	91 50       	subi	r25, 0x01	; 1
     5fc:	20 40       	sbci	r18, 0x00	; 0
     5fe:	80 40       	sbci	r24, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <nokia_lcd_init+0x26>
     602:	00 c0       	rjmp	.+0      	; 0x604 <nokia_lcd_init+0x30>
     604:	00 00       	nop
     606:	5a 9a       	sbi	0x0b, 2	; 11
     608:	59 98       	cbi	0x0b, 1	; 11
     60a:	81 e2       	ldi	r24, 0x21	; 33
     60c:	87 de       	rcall	.-754    	; 0x31c <write_cmd>
     60e:	83 e1       	ldi	r24, 0x13	; 19
     610:	85 de       	rcall	.-758    	; 0x31c <write_cmd>
     612:	86 e0       	ldi	r24, 0x06	; 6
     614:	83 de       	rcall	.-762    	; 0x31c <write_cmd>
     616:	82 ec       	ldi	r24, 0xC2	; 194
     618:	81 de       	rcall	.-766    	; 0x31c <write_cmd>
     61a:	80 e2       	ldi	r24, 0x20	; 32
     61c:	7f de       	rcall	.-770    	; 0x31c <write_cmd>
     61e:	89 e0       	ldi	r24, 0x09	; 9
     620:	7d de       	rcall	.-774    	; 0x31c <write_cmd>
     622:	80 e8       	ldi	r24, 0x80	; 128
     624:	7b de       	rcall	.-778    	; 0x31c <write_cmd>
     626:	80 e4       	ldi	r24, 0x40	; 64
     628:	79 de       	rcall	.-782    	; 0x31c <write_cmd>
     62a:	c8 ef       	ldi	r28, 0xF8	; 248
     62c:	d1 e0       	ldi	r29, 0x01	; 1
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	56 de       	rcall	.-852    	; 0x2e0 <write>
     634:	21 97       	sbiw	r28, 0x01	; 1
     636:	d9 f7       	brne	.-10     	; 0x62e <nokia_lcd_init+0x5a>
     638:	88 e0       	ldi	r24, 0x08	; 8
     63a:	70 de       	rcall	.-800    	; 0x31c <write_cmd>
     63c:	8c e0       	ldi	r24, 0x0C	; 12
     63e:	6e de       	rcall	.-804    	; 0x31c <write_cmd>
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <nokia_lcd_clear>:
     646:	80 e8       	ldi	r24, 0x80	; 128
     648:	69 de       	rcall	.-814    	; 0x31c <write_cmd>
     64a:	80 e4       	ldi	r24, 0x40	; 64
     64c:	67 de       	rcall	.-818    	; 0x31c <write_cmd>
     64e:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <nokia_lcd+0x1f8>
     652:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <nokia_lcd+0x1f9>
     656:	e0 ea       	ldi	r30, 0xA0	; 160
     658:	f2 e0       	ldi	r31, 0x02	; 2
     65a:	88 e9       	ldi	r24, 0x98	; 152
     65c:	94 e0       	ldi	r25, 0x04	; 4
     65e:	11 92       	st	Z+, r1
     660:	e8 17       	cp	r30, r24
     662:	f9 07       	cpc	r31, r25
     664:	e1 f7       	brne	.-8      	; 0x65e <nokia_lcd_clear+0x18>
     666:	08 95       	ret

00000668 <nokia_lcd_set_pixel>:
     668:	26 2f       	mov	r18, r22
     66a:	26 95       	lsr	r18
     66c:	26 95       	lsr	r18
     66e:	26 95       	lsr	r18
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	34 e5       	ldi	r19, 0x54	; 84
     674:	23 9f       	mul	r18, r19
     676:	80 0d       	add	r24, r0
     678:	91 1d       	adc	r25, r1
     67a:	11 24       	eor	r1, r1
     67c:	44 23       	and	r20, r20
     67e:	79 f0       	breq	.+30     	; 0x69e <nokia_lcd_set_pixel+0x36>
     680:	fc 01       	movw	r30, r24
     682:	e0 56       	subi	r30, 0x60	; 96
     684:	fd 4f       	sbci	r31, 0xFD	; 253
     686:	67 70       	andi	r22, 0x07	; 7
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	02 c0       	rjmp	.+4      	; 0x692 <nokia_lcd_set_pixel+0x2a>
     68e:	88 0f       	add	r24, r24
     690:	99 1f       	adc	r25, r25
     692:	6a 95       	dec	r22
     694:	e2 f7       	brpl	.-8      	; 0x68e <nokia_lcd_set_pixel+0x26>
     696:	90 81       	ld	r25, Z
     698:	89 2b       	or	r24, r25
     69a:	80 83       	st	Z, r24
     69c:	08 95       	ret
     69e:	fc 01       	movw	r30, r24
     6a0:	e0 56       	subi	r30, 0x60	; 96
     6a2:	fd 4f       	sbci	r31, 0xFD	; 253
     6a4:	67 70       	andi	r22, 0x07	; 7
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <nokia_lcd_set_pixel+0x48>
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	6a 95       	dec	r22
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <nokia_lcd_set_pixel+0x44>
     6b4:	80 95       	com	r24
     6b6:	90 81       	ld	r25, Z
     6b8:	89 23       	and	r24, r25
     6ba:	80 83       	st	Z, r24
     6bc:	08 95       	ret

000006be <nokia_lcd_write_char>:
     6be:	5f 92       	push	r5
     6c0:	6f 92       	push	r6
     6c2:	7f 92       	push	r7
     6c4:	8f 92       	push	r8
     6c6:	9f 92       	push	r9
     6c8:	af 92       	push	r10
     6ca:	bf 92       	push	r11
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	56 2e       	mov	r5, r22
     6de:	26 2f       	mov	r18, r22
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	49 01       	movw	r8, r18
     6e4:	88 0c       	add	r8, r8
     6e6:	99 1c       	adc	r9, r9
     6e8:	88 0c       	add	r8, r8
     6ea:	99 1c       	adc	r9, r9
     6ec:	82 0e       	add	r8, r18
     6ee:	93 1e       	adc	r9, r19
     6f0:	18 14       	cp	r1, r8
     6f2:	19 04       	cpc	r1, r9
     6f4:	0c f0       	brlt	.+2      	; 0x6f8 <nokia_lcd_write_char+0x3a>
     6f6:	5b c0       	rjmp	.+182    	; 0x7ae <nokia_lcd_write_char+0xf0>
     6f8:	89 01       	movw	r16, r18
     6fa:	00 0f       	add	r16, r16
     6fc:	11 1f       	adc	r17, r17
     6fe:	00 0f       	add	r16, r16
     700:	11 1f       	adc	r17, r17
     702:	00 0f       	add	r16, r16
     704:	11 1f       	adc	r17, r17
     706:	02 1b       	sub	r16, r18
     708:	13 0b       	sbc	r17, r19
     70a:	61 2c       	mov	r6, r1
     70c:	a8 2e       	mov	r10, r24
     70e:	b1 2c       	mov	r11, r1
     710:	c5 01       	movw	r24, r10
     712:	80 97       	sbiw	r24, 0x20	; 32
     714:	5c 01       	movw	r10, r24
     716:	aa 0c       	add	r10, r10
     718:	bb 1c       	adc	r11, r11
     71a:	aa 0c       	add	r10, r10
     71c:	bb 1c       	adc	r11, r11
     71e:	a8 0e       	add	r10, r24
     720:	b9 1e       	adc	r11, r25
     722:	0f 2e       	mov	r0, r31
     724:	f9 e9       	ldi	r31, 0x99	; 153
     726:	cf 2e       	mov	r12, r31
     728:	f4 e0       	ldi	r31, 0x04	; 4
     72a:	df 2e       	mov	r13, r31
     72c:	f0 2d       	mov	r31, r0
     72e:	0f 2e       	mov	r0, r31
     730:	f8 e9       	ldi	r31, 0x98	; 152
     732:	ef 2e       	mov	r14, r31
     734:	f4 e0       	ldi	r31, 0x04	; 4
     736:	ff 2e       	mov	r15, r31
     738:	f0 2d       	mov	r31, r0
     73a:	2b c0       	rjmp	.+86     	; 0x792 <nokia_lcd_write_char+0xd4>
     73c:	fe 01       	movw	r30, r28
     73e:	24 91       	lpm	r18, Z
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	87 2d       	mov	r24, r7
     744:	65 2d       	mov	r22, r5
     746:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__udivmodqi4>
     74a:	02 c0       	rjmp	.+4      	; 0x750 <nokia_lcd_write_char+0x92>
     74c:	35 95       	asr	r19
     74e:	27 95       	ror	r18
     750:	8a 95       	dec	r24
     752:	e2 f7       	brpl	.-8      	; 0x74c <nokia_lcd_write_char+0x8e>
     754:	20 ff       	sbrs	r18, 0
     756:	09 c0       	rjmp	.+18     	; 0x76a <nokia_lcd_write_char+0xac>
     758:	f6 01       	movw	r30, r12
     75a:	60 81       	ld	r22, Z
     75c:	67 0d       	add	r22, r7
     75e:	f7 01       	movw	r30, r14
     760:	80 81       	ld	r24, Z
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	86 0d       	add	r24, r6
     766:	80 df       	rcall	.-256    	; 0x668 <nokia_lcd_set_pixel>
     768:	08 c0       	rjmp	.+16     	; 0x77a <nokia_lcd_write_char+0xbc>
     76a:	f6 01       	movw	r30, r12
     76c:	60 81       	ld	r22, Z
     76e:	67 0d       	add	r22, r7
     770:	f7 01       	movw	r30, r14
     772:	80 81       	ld	r24, Z
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	86 0d       	add	r24, r6
     778:	77 df       	rcall	.-274    	; 0x668 <nokia_lcd_set_pixel>
     77a:	73 94       	inc	r7
     77c:	87 2d       	mov	r24, r7
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	80 17       	cp	r24, r16
     782:	91 07       	cpc	r25, r17
     784:	dc f2       	brlt	.-74     	; 0x73c <nokia_lcd_write_char+0x7e>
     786:	63 94       	inc	r6
     788:	86 2d       	mov	r24, r6
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	88 15       	cp	r24, r8
     78e:	99 05       	cpc	r25, r9
     790:	74 f4       	brge	.+28     	; 0x7ae <nokia_lcd_write_char+0xf0>
     792:	10 16       	cp	r1, r16
     794:	11 06       	cpc	r1, r17
     796:	bc f7       	brge	.-18     	; 0x786 <nokia_lcd_write_char+0xc8>
     798:	86 2d       	mov	r24, r6
     79a:	65 2d       	mov	r22, r5
     79c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <__udivmodqi4>
     7a0:	e5 01       	movw	r28, r10
     7a2:	c8 0f       	add	r28, r24
     7a4:	d1 1d       	adc	r29, r1
     7a6:	c0 54       	subi	r28, 0x40	; 64
     7a8:	df 4f       	sbci	r29, 0xFF	; 255
     7aa:	71 2c       	mov	r7, r1
     7ac:	c7 cf       	rjmp	.-114    	; 0x73c <nokia_lcd_write_char+0x7e>
     7ae:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <nokia_lcd+0x1f8>
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	98 0f       	add	r25, r24
     7b6:	85 2d       	mov	r24, r5
     7b8:	88 0f       	add	r24, r24
     7ba:	88 0f       	add	r24, r24
     7bc:	85 0d       	add	r24, r5
     7be:	89 0f       	add	r24, r25
     7c0:	84 35       	cpi	r24, 0x54	; 84
     7c2:	18 f4       	brcc	.+6      	; 0x7ca <nokia_lcd_write_char+0x10c>
     7c4:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <nokia_lcd+0x1f8>
     7c8:	0e c0       	rjmp	.+28     	; 0x7e6 <nokia_lcd_write_char+0x128>
     7ca:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <nokia_lcd+0x1f8>
     7ce:	e9 e9       	ldi	r30, 0x99	; 153
     7d0:	f4 e0       	ldi	r31, 0x04	; 4
     7d2:	80 81       	ld	r24, Z
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	98 0f       	add	r25, r24
     7d8:	85 2d       	mov	r24, r5
     7da:	88 0f       	add	r24, r24
     7dc:	88 0f       	add	r24, r24
     7de:	88 0f       	add	r24, r24
     7e0:	85 19       	sub	r24, r5
     7e2:	89 0f       	add	r24, r25
     7e4:	80 83       	st	Z, r24
     7e6:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <nokia_lcd+0x1f9>
     7ea:	80 33       	cpi	r24, 0x30	; 48
     7ec:	20 f0       	brcs	.+8      	; 0x7f6 <nokia_lcd_write_char+0x138>
     7ee:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <nokia_lcd+0x1f8>
     7f2:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <nokia_lcd+0x1f9>
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	bf 90       	pop	r11
     808:	af 90       	pop	r10
     80a:	9f 90       	pop	r9
     80c:	8f 90       	pop	r8
     80e:	7f 90       	pop	r7
     810:	6f 90       	pop	r6
     812:	5f 90       	pop	r5
     814:	08 95       	ret

00000816 <nokia_lcd_write_string>:
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	ec 01       	movw	r28, r24
     81e:	88 81       	ld	r24, Y
     820:	88 23       	and	r24, r24
     822:	39 f0       	breq	.+14     	; 0x832 <nokia_lcd_write_string+0x1c>
     824:	16 2f       	mov	r17, r22
     826:	21 96       	adiw	r28, 0x01	; 1
     828:	61 2f       	mov	r22, r17
     82a:	49 df       	rcall	.-366    	; 0x6be <nokia_lcd_write_char>
     82c:	89 91       	ld	r24, Y+
     82e:	81 11       	cpse	r24, r1
     830:	fb cf       	rjmp	.-10     	; 0x828 <nokia_lcd_write_string+0x12>
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	08 95       	ret

0000083a <nokia_lcd_render>:
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	80 e8       	ldi	r24, 0x80	; 128
     844:	6b dd       	rcall	.-1322   	; 0x31c <write_cmd>
     846:	80 e4       	ldi	r24, 0x40	; 64
     848:	69 dd       	rcall	.-1326   	; 0x31c <write_cmd>
     84a:	c0 ea       	ldi	r28, 0xA0	; 160
     84c:	d2 e0       	ldi	r29, 0x02	; 2
     84e:	08 e9       	ldi	r16, 0x98	; 152
     850:	14 e0       	ldi	r17, 0x04	; 4
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	89 91       	ld	r24, Y+
     856:	44 dd       	rcall	.-1400   	; 0x2e0 <write>
     858:	c0 17       	cp	r28, r16
     85a:	d1 07       	cpc	r29, r17
     85c:	d1 f7       	brne	.-12     	; 0x852 <nokia_lcd_render+0x18>
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <transferObjToDis>:
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
     868:	2f 92       	push	r2
     86a:	3f 92       	push	r3
     86c:	4f 92       	push	r4
     86e:	5f 92       	push	r5
     870:	6f 92       	push	r6
     872:	7f 92       	push	r7
     874:	8f 92       	push	r8
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	00 d0       	rcall	.+0      	; 0x88e <transferObjToDis+0x26>
     88e:	00 d0       	rcall	.+0      	; 0x890 <transferObjToDis+0x28>
     890:	00 d0       	rcall	.+0      	; 0x892 <transferObjToDis+0x2a>
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	85 e9       	ldi	r24, 0x95	; 149
     898:	94 e1       	ldi	r25, 0x14	; 20
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0f 2e       	mov	r0, r31
     8a0:	f2 ed       	ldi	r31, 0xD2	; 210
     8a2:	af 2e       	mov	r10, r31
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	bf 2e       	mov	r11, r31
     8a8:	f0 2d       	mov	r31, r0
     8aa:	0f 2e       	mov	r0, r31
     8ac:	fa ee       	ldi	r31, 0xEA	; 234
     8ae:	8f 2e       	mov	r8, r31
     8b0:	f1 e0       	ldi	r31, 0x01	; 1
     8b2:	9f 2e       	mov	r9, r31
     8b4:	f0 2d       	mov	r31, r0
     8b6:	0f 2e       	mov	r0, r31
     8b8:	fa e8       	ldi	r31, 0x8A	; 138
     8ba:	6f 2e       	mov	r6, r31
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	7f 2e       	mov	r7, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	0f 2e       	mov	r0, r31
     8c4:	fa e5       	ldi	r31, 0x5A	; 90
     8c6:	4f 2e       	mov	r4, r31
     8c8:	f1 e0       	ldi	r31, 0x01	; 1
     8ca:	5f 2e       	mov	r5, r31
     8cc:	f0 2d       	mov	r31, r0
     8ce:	4a eb       	ldi	r20, 0xBA	; 186
     8d0:	51 e0       	ldi	r21, 0x01	; 1
     8d2:	1c 01       	movw	r2, r24
     8d4:	7a 83       	std	Y+2, r23	; 0x02
     8d6:	69 83       	std	Y+1, r22	; 0x01
     8d8:	6a c1       	rjmp	.+724    	; 0xbae <transferObjToDis+0x346>
     8da:	ed 91       	ld	r30, X+
     8dc:	ce 2e       	mov	r12, r30
     8de:	d1 2c       	mov	r13, r1
     8e0:	89 e0       	ldi	r24, 0x09	; 9
     8e2:	c8 16       	cp	r12, r24
     8e4:	d1 04       	cpc	r13, r1
     8e6:	68 f4       	brcc	.+26     	; 0x902 <transferObjToDis+0x9a>
     8e8:	f6 01       	movw	r30, r12
     8ea:	ea 5b       	subi	r30, 0xBA	; 186
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__tablejump2__>
     8f2:	69 81       	ldd	r22, Y+1	; 0x01
     8f4:	7a 81       	ldd	r23, Y+2	; 0x02
     8f6:	62 0f       	add	r22, r18
     8f8:	73 1f       	adc	r23, r19
     8fa:	6c 52       	subi	r22, 0x2C	; 44
     8fc:	7b 4f       	sbci	r23, 0xFB	; 251
     8fe:	9c e0       	ldi	r25, 0x0C	; 12
     900:	11 c0       	rjmp	.+34     	; 0x924 <transferObjToDis+0xbc>
     902:	69 81       	ldd	r22, Y+1	; 0x01
     904:	7a 81       	ldd	r23, Y+2	; 0x02
     906:	62 0f       	add	r22, r18
     908:	73 1f       	adc	r23, r19
     90a:	6c 52       	subi	r22, 0x2C	; 44
     90c:	7b 4f       	sbci	r23, 0xFB	; 251
     90e:	9c e0       	ldi	r25, 0x0C	; 12
     910:	37 c1       	rjmp	.+622    	; 0xb80 <transferObjToDis+0x318>
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = 0x0000;
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     912:	11 92       	st	Z+, r1
     914:	81 50       	subi	r24, 0x01	; 1
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = 0x0000;
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     916:	e9 f7       	brne	.-6      	; 0x912 <transferObjToDis+0xaa>
     918:	91 50       	subi	r25, 0x01	; 1
     91a:	6c 5a       	subi	r22, 0xAC	; 172
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
			switch(objectLocMatrix[y][x]) {
				case OBJEmpty:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     91e:	99 23       	and	r25, r25
     920:	09 f4       	brne	.+2      	; 0x924 <transferObjToDis+0xbc>
     922:	31 c1       	rjmp	.+610    	; 0xb86 <transferObjToDis+0x31e>
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
     924:	fb 01       	movw	r30, r22
     926:	8c e0       	ldi	r24, 0x0C	; 12
     928:	f4 cf       	rjmp	.-24     	; 0x912 <transferObjToDis+0xaa>
     92a:	e2 ea       	ldi	r30, 0xA2	; 162
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	fc 83       	std	Y+4, r31	; 0x04
     930:	eb 83       	std	Y+3, r30	; 0x03
     932:	69 81       	ldd	r22, Y+1	; 0x01
     934:	7a 81       	ldd	r23, Y+2	; 0x02
     936:	62 0f       	add	r22, r18
     938:	73 1f       	adc	r23, r19
     93a:	6c 52       	subi	r22, 0x2C	; 44
     93c:	7b 4f       	sbci	r23, 0xFB	; 251
     93e:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
     940:	f7 01       	movw	r30, r14
     942:	c1 90       	ld	r12, Z+
     944:	d1 90       	ld	r13, Z+
     946:	7f 01       	movw	r14, r30
     948:	8b 01       	movw	r16, r22
     94a:	8c e0       	ldi	r24, 0x0C	; 12
     94c:	f6 01       	movw	r30, r12
     94e:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     950:	9e 2f       	mov	r25, r30
     952:	91 70       	andi	r25, 0x01	; 1
     954:	d8 01       	movw	r26, r16
     956:	9d 93       	st	X+, r25
     958:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     95a:	f6 95       	lsr	r31
     95c:	e7 95       	ror	r30
     95e:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     960:	b9 f7       	brne	.-18     	; 0x950 <transferObjToDis+0xe8>
     962:	d6 01       	movw	r26, r12
     964:	6c 5a       	subi	r22, 0xAC	; 172
     966:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJWall:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     968:	4e 15       	cp	r20, r14
     96a:	5f 05       	cpc	r21, r15
     96c:	49 f7       	brne	.-46     	; 0x940 <transferObjToDis+0xd8>
     96e:	0b c1       	rjmp	.+534    	; 0xb86 <transferObjToDis+0x31e>
     970:	e2 ea       	ldi	r30, 0xA2	; 162
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	fc 83       	std	Y+4, r31	; 0x04
     976:	eb 83       	std	Y+3, r30	; 0x03
     978:	69 81       	ldd	r22, Y+1	; 0x01
     97a:	7a 81       	ldd	r23, Y+2	; 0x02
     97c:	62 0f       	add	r22, r18
     97e:	73 1f       	adc	r23, r19
     980:	6c 52       	subi	r22, 0x2C	; 44
     982:	7b 4f       	sbci	r23, 0xFB	; 251
     984:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
     986:	f7 01       	movw	r30, r14
     988:	c1 90       	ld	r12, Z+
     98a:	d1 90       	ld	r13, Z+
     98c:	7f 01       	movw	r14, r30
     98e:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f6 01       	movw	r30, r12
     994:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     996:	9e 2f       	mov	r25, r30
     998:	91 70       	andi	r25, 0x01	; 1
     99a:	d8 01       	movw	r26, r16
     99c:	9d 93       	st	X+, r25
     99e:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     9a0:	f6 95       	lsr	r31
     9a2:	e7 95       	ror	r30
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = wall_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	8c 30       	cpi	r24, 0x0C	; 12
     9a8:	b1 f7       	brne	.-20     	; 0x996 <transferObjToDis+0x12e>
     9aa:	d6 01       	movw	r26, r12
     9ac:	6c 5a       	subi	r22, 0xAC	; 172
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJHidden:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     9b0:	4e 15       	cp	r20, r14
     9b2:	5f 05       	cpc	r21, r15
     9b4:	41 f7       	brne	.-48     	; 0x986 <transferObjToDis+0x11e>
     9b6:	e7 c0       	rjmp	.+462    	; 0xb86 <transferObjToDis+0x31e>
     9b8:	e2 e4       	ldi	r30, 0x42	; 66
     9ba:	f1 e0       	ldi	r31, 0x01	; 1
     9bc:	fc 83       	std	Y+4, r31	; 0x04
     9be:	eb 83       	std	Y+3, r30	; 0x03
     9c0:	69 81       	ldd	r22, Y+1	; 0x01
     9c2:	7a 81       	ldd	r23, Y+2	; 0x02
     9c4:	62 0f       	add	r22, r18
     9c6:	73 1f       	adc	r23, r19
     9c8:	6c 52       	subi	r22, 0x2C	; 44
     9ca:	7b 4f       	sbci	r23, 0xFB	; 251
     9cc:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = door_img[tileY];
     9ce:	f7 01       	movw	r30, r14
     9d0:	c1 90       	ld	r12, Z+
     9d2:	d1 90       	ld	r13, Z+
     9d4:	7f 01       	movw	r14, r30
     9d6:	8b 01       	movw	r16, r22
     9d8:	8c e0       	ldi	r24, 0x0C	; 12
     9da:	f6 01       	movw	r30, r12
     9dc:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     9de:	9e 2f       	mov	r25, r30
     9e0:	91 70       	andi	r25, 0x01	; 1
     9e2:	d8 01       	movw	r26, r16
     9e4:	9d 93       	st	X+, r25
     9e6:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     9e8:	f6 95       	lsr	r31
     9ea:	e7 95       	ror	r30
     9ec:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = door_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     9ee:	b9 f7       	brne	.-18     	; 0x9de <transferObjToDis+0x176>
     9f0:	d6 01       	movw	r26, r12
     9f2:	6c 5a       	subi	r22, 0xAC	; 172
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJDoor:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     9f6:	4e 14       	cp	r4, r14
     9f8:	5f 04       	cpc	r5, r15
     9fa:	49 f7       	brne	.-46     	; 0x9ce <transferObjToDis+0x166>
     9fc:	c4 c0       	rjmp	.+392    	; 0xb86 <transferObjToDis+0x31e>
     9fe:	e2 e7       	ldi	r30, 0x72	; 114
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	fc 83       	std	Y+4, r31	; 0x04
     a04:	eb 83       	std	Y+3, r30	; 0x03
     a06:	69 81       	ldd	r22, Y+1	; 0x01
     a08:	7a 81       	ldd	r23, Y+2	; 0x02
     a0a:	62 0f       	add	r22, r18
     a0c:	73 1f       	adc	r23, r19
     a0e:	6c 52       	subi	r22, 0x2C	; 44
     a10:	7b 4f       	sbci	r23, 0xFB	; 251
     a12:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = block_img[tileY];
     a14:	f7 01       	movw	r30, r14
     a16:	c1 90       	ld	r12, Z+
     a18:	d1 90       	ld	r13, Z+
     a1a:	7f 01       	movw	r14, r30
     a1c:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f6 01       	movw	r30, r12
     a22:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     a24:	9e 2f       	mov	r25, r30
     a26:	91 70       	andi	r25, 0x01	; 1
     a28:	d8 01       	movw	r26, r16
     a2a:	9d 93       	st	X+, r25
     a2c:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     a2e:	f6 95       	lsr	r31
     a30:	e7 95       	ror	r30
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = block_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	8c 30       	cpi	r24, 0x0C	; 12
     a36:	b1 f7       	brne	.-20     	; 0xa24 <transferObjToDis+0x1bc>
     a38:	d6 01       	movw	r26, r12
     a3a:	6c 5a       	subi	r22, 0xAC	; 172
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJBlock:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     a3e:	6e 14       	cp	r6, r14
     a40:	7f 04       	cpc	r7, r15
     a42:	41 f7       	brne	.-48     	; 0xa14 <transferObjToDis+0x1ac>
     a44:	a0 c0       	rjmp	.+320    	; 0xb86 <transferObjToDis+0x31e>
     a46:	e2 ed       	ldi	r30, 0xD2	; 210
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	fc 83       	std	Y+4, r31	; 0x04
     a4c:	eb 83       	std	Y+3, r30	; 0x03
     a4e:	69 81       	ldd	r22, Y+1	; 0x01
     a50:	7a 81       	ldd	r23, Y+2	; 0x02
     a52:	62 0f       	add	r22, r18
     a54:	73 1f       	adc	r23, r19
     a56:	6c 52       	subi	r22, 0x2C	; 44
     a58:	7b 4f       	sbci	r23, 0xFB	; 251
     a5a:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bombperson_img[tileY];
     a5c:	f7 01       	movw	r30, r14
     a5e:	c1 90       	ld	r12, Z+
     a60:	d1 90       	ld	r13, Z+
     a62:	7f 01       	movw	r14, r30
     a64:	8b 01       	movw	r16, r22
     a66:	8c e0       	ldi	r24, 0x0C	; 12
     a68:	f6 01       	movw	r30, r12
     a6a:	6d 01       	movw	r12, r26
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     a6c:	9e 2f       	mov	r25, r30
     a6e:	91 70       	andi	r25, 0x01	; 1
     a70:	d8 01       	movw	r26, r16
     a72:	9d 93       	st	X+, r25
     a74:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     a76:	f6 95       	lsr	r31
     a78:	e7 95       	ror	r30
     a7a:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bombperson_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     a7c:	b9 f7       	brne	.-18     	; 0xa6c <transferObjToDis+0x204>
     a7e:	d6 01       	movw	r26, r12
     a80:	6c 5a       	subi	r22, 0xAC	; 172
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJPlayer:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     a84:	e8 14       	cp	r14, r8
     a86:	f9 04       	cpc	r15, r9
     a88:	49 f7       	brne	.-46     	; 0xa5c <transferObjToDis+0x1f4>
     a8a:	7d c0       	rjmp	.+250    	; 0xb86 <transferObjToDis+0x31e>
     a8c:	ea eb       	ldi	r30, 0xBA	; 186
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	fc 83       	std	Y+4, r31	; 0x04
     a92:	eb 83       	std	Y+3, r30	; 0x03
     a94:	69 81       	ldd	r22, Y+1	; 0x01
     a96:	7a 81       	ldd	r23, Y+2	; 0x02
     a98:	62 0f       	add	r22, r18
     a9a:	73 1f       	adc	r23, r19
     a9c:	6c 52       	subi	r22, 0x2C	; 44
     a9e:	7b 4f       	sbci	r23, 0xFB	; 251
     aa0:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bomb_img[tileY];
     aa2:	f7 01       	movw	r30, r14
     aa4:	c1 90       	ld	r12, Z+
     aa6:	d1 90       	ld	r13, Z+
     aa8:	7f 01       	movw	r14, r30
     aaa:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	f6 01       	movw	r30, r12
     ab0:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     ab2:	9e 2f       	mov	r25, r30
     ab4:	91 70       	andi	r25, 0x01	; 1
     ab6:	d8 01       	movw	r26, r16
     ab8:	9d 93       	st	X+, r25
     aba:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     abc:	f6 95       	lsr	r31
     abe:	e7 95       	ror	r30
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = bomb_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	8c 30       	cpi	r24, 0x0C	; 12
     ac4:	b1 f7       	brne	.-20     	; 0xab2 <transferObjToDis+0x24a>
     ac6:	d6 01       	movw	r26, r12
     ac8:	6c 5a       	subi	r22, 0xAC	; 172
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJBomb:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     acc:	ae 14       	cp	r10, r14
     ace:	bf 04       	cpc	r11, r15
     ad0:	41 f7       	brne	.-48     	; 0xaa2 <transferObjToDis+0x23a>
     ad2:	59 c0       	rjmp	.+178    	; 0xb86 <transferObjToDis+0x31e>
     ad4:	ea e8       	ldi	r30, 0x8A	; 138
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	fc 83       	std	Y+4, r31	; 0x04
     ada:	eb 83       	std	Y+3, r30	; 0x03
     adc:	69 81       	ldd	r22, Y+1	; 0x01
     ade:	7a 81       	ldd	r23, Y+2	; 0x02
     ae0:	62 0f       	add	r22, r18
     ae2:	73 1f       	adc	r23, r19
     ae4:	6c 52       	subi	r22, 0x2C	; 44
     ae6:	7b 4f       	sbci	r23, 0xFB	; 251
     ae8:	7f 01       	movw	r14, r30
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
     aea:	f7 01       	movw	r30, r14
     aec:	c1 90       	ld	r12, Z+
     aee:	d1 90       	ld	r13, Z+
     af0:	7f 01       	movw	r14, r30
     af2:	8b 01       	movw	r16, r22
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	f6 01       	movw	r30, r12
     af8:	6d 01       	movw	r12, r26
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     afa:	9e 2f       	mov	r25, r30
     afc:	91 70       	andi	r25, 0x01	; 1
     afe:	d8 01       	movw	r26, r16
     b00:	9d 93       	st	X+, r25
     b02:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     b04:	f6 95       	lsr	r31
     b06:	e7 95       	ror	r30
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = enemy_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     b08:	8f 5f       	subi	r24, 0xFF	; 255
     b0a:	8c 30       	cpi	r24, 0x0C	; 12
     b0c:	b1 f7       	brne	.-20     	; 0xafa <transferObjToDis+0x292>
     b0e:	d6 01       	movw	r26, r12
     b10:	6c 5a       	subi	r22, 0xAC	; 172
     b12:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJEnemy:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     b14:	e2 ea       	ldi	r30, 0xA2	; 162
     b16:	f1 e0       	ldi	r31, 0x01	; 1
     b18:	ee 15       	cp	r30, r14
     b1a:	ff 05       	cpc	r31, r15
     b1c:	31 f7       	brne	.-52     	; 0xaea <transferObjToDis+0x282>
     b1e:	33 c0       	rjmp	.+102    	; 0xb86 <transferObjToDis+0x31e>
     b20:	8a e5       	ldi	r24, 0x5A	; 90
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	69 81       	ldd	r22, Y+1	; 0x01
     b2a:	7a 81       	ldd	r23, Y+2	; 0x02
     b2c:	62 0f       	add	r22, r18
     b2e:	73 1f       	adc	r23, r19
     b30:	6c 52       	subi	r22, 0x2C	; 44
     b32:	7b 4f       	sbci	r23, 0xFB	; 251
     b34:	7c 01       	movw	r14, r24
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
     b36:	f7 01       	movw	r30, r14
     b38:	c1 90       	ld	r12, Z+
     b3a:	d1 90       	ld	r13, Z+
     b3c:	7f 01       	movw	r14, r30
     b3e:	8b 01       	movw	r16, r22
     b40:	8c e0       	ldi	r24, 0x0C	; 12
     b42:	be 83       	std	Y+6, r27	; 0x06
     b44:	ad 83       	std	Y+5, r26	; 0x05
     b46:	f6 01       	movw	r30, r12
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0x01 & tempTileData;
     b48:	9e 2f       	mov	r25, r30
     b4a:	91 70       	andi	r25, 0x01	; 1
     b4c:	d8 01       	movw	r26, r16
     b4e:	9d 93       	st	X+, r25
     b50:	8d 01       	movw	r16, r26
						tempTileData = tempTileData >> 1;
     b52:	f6 95       	lsr	r31
     b54:	e7 95       	ror	r30
     b56:	81 50       	subi	r24, 0x01	; 1
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     b58:	b9 f7       	brne	.-18     	; 0xb48 <transferObjToDis+0x2e0>
     b5a:	ad 81       	ldd	r26, Y+5	; 0x05
     b5c:	be 81       	ldd	r27, Y+6	; 0x06
     b5e:	6c 5a       	subi	r22, 0xAC	; 172
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     b62:	e2 e7       	ldi	r30, 0x72	; 114
     b64:	ee 16       	cp	r14, r30
     b66:	e1 e0       	ldi	r30, 0x01	; 1
     b68:	fe 06       	cpc	r15, r30
     b6a:	29 f7       	brne	.-54     	; 0xb36 <transferObjToDis+0x2ce>
     b6c:	0c c0       	rjmp	.+24     	; 0xb86 <transferObjToDis+0x31e>
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
						displayMatrix[y*TILESIZE + tileY][x*TILESIZE + tileX] = 0;
     b6e:	11 92       	st	Z+, r1
				}
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					for(unsigned char tileX = 0; tileX < TILESIZE; tileX++) {
     b70:	8f 5f       	subi	r24, 0xFF	; 255
     b72:	8c 30       	cpi	r24, 0x0C	; 12
     b74:	e1 f7       	brne	.-8      	; 0xb6e <transferObjToDis+0x306>
     b76:	91 50       	subi	r25, 0x01	; 1
     b78:	6c 5a       	subi	r22, 0xAC	; 172
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
					}
				}
				break;
				
				default:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
     b7c:	99 23       	and	r25, r25
     b7e:	19 f0       	breq	.+6      	; 0xb86 <transferObjToDis+0x31e>
				}
				break;
				
				case OBJExplode:
				for(unsigned char tileY = 0; tileY < TILESIZE; tileY++) {
					tempTileData = explode_img[tileY];
     b80:	fb 01       	movw	r30, r22
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f4 cf       	rjmp	.-24     	; 0xb6e <transferObjToDis+0x306>
     b86:	24 5f       	subi	r18, 0xF4	; 244
     b88:	3f 4f       	sbci	r19, 0xFF	; 255

const unsigned TILESIZE = 12;
void transferObjToDis() {
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
		for(unsigned char x = 0; x < 7; x++) {
     b8a:	24 35       	cpi	r18, 0x54	; 84
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f0       	breq	.+2      	; 0xb92 <transferObjToDis+0x32a>
     b90:	a4 ce       	rjmp	.-696    	; 0x8da <transferObjToDis+0x72>
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	80 51       	subi	r24, 0x10	; 16
     b98:	9c 4f       	sbci	r25, 0xFC	; 252
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	89 83       	std	Y+1, r24	; 0x01
     b9e:	97 e0       	ldi	r25, 0x07	; 7
     ba0:	29 0e       	add	r2, r25
     ba2:	31 1c       	adc	r3, r1
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
	unsigned short tempTileData = 0x0000;
	for(unsigned char y = 0; y < 3; y++) {
     ba4:	a9 81       	ldd	r26, Y+1	; 0x01
     ba6:	ba 81       	ldd	r27, Y+2	; 0x02
     ba8:	a0 3d       	cpi	r26, 0xD0	; 208
     baa:	bb 40       	sbci	r27, 0x0B	; 11
     bac:	21 f0       	breq	.+8      	; 0xbb6 <transferObjToDis+0x34e>
					{OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJEmpty, OBJHidden}}
					};
unsigned char displayMatrix[48][84];

const unsigned TILESIZE = 12;
void transferObjToDis() {
     bae:	d1 01       	movw	r26, r2
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	92 ce       	rjmp	.-732    	; 0x8da <transferObjToDis+0x72>
				}
				break;
			}
		}
	}
}
     bb6:	26 96       	adiw	r28, 0x06	; 6
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	bf 90       	pop	r11
     bd4:	af 90       	pop	r10
     bd6:	9f 90       	pop	r9
     bd8:	8f 90       	pop	r8
     bda:	7f 90       	pop	r7
     bdc:	6f 90       	pop	r6
     bde:	5f 90       	pop	r5
     be0:	4f 90       	pop	r4
     be2:	3f 90       	pop	r3
     be4:	2f 90       	pop	r2
     be6:	08 95       	ret

00000be8 <TickGameLogic>:
const unsigned char LEVELMAX = 3;

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
	switch(state) {
     bec:	48 2f       	mov	r20, r24
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	4a 30       	cpi	r20, 0x0A	; 10
     bf2:	51 05       	cpc	r21, r1
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <TickGameLogic+0x10>
     bf6:	41 c6       	rjmp	.+3202   	; 0x187a <TickGameLogic+0xc92>
     bf8:	fa 01       	movw	r30, r20
     bfa:	e1 5b       	subi	r30, 0xB1	; 177
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__tablejump2__>
		case GLogicInit:
		state = GLogicMenu;
		break;
		
		case GLogicMenu:
		if(((SNESOutput & 0x1000) == 0x1000) && menuInputDelayCount >= menuInputDelay){
     c02:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SNESOutput>
     c06:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SNESOutput+0x1>
     c0a:	94 ff       	sbrs	r25, 4
     c0c:	47 c0       	rjmp	.+142    	; 0xc9c <TickGameLogic+0xb4>
     c0e:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <menuInputDelayCount>
     c12:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <menuInputDelayCount+0x1>
     c16:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <menuInputDelay>
     c1a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <menuInputDelay+0x1>
     c1e:	28 17       	cp	r18, r24
     c20:	39 07       	cpc	r19, r25
     c22:	e0 f1       	brcs	.+120    	; 0xc9c <TickGameLogic+0xb4>
     c24:	23 e0       	ldi	r18, 0x03	; 3
     c26:	31 e0       	ldi	r19, 0x01	; 1
     c28:	45 e9       	ldi	r20, 0x95	; 149
     c2a:	54 e1       	ldi	r21, 0x14	; 20
     c2c:	68 e1       	ldi	r22, 0x18	; 24
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	dd c0       	rjmp	.+442    	; 0xdec <TickGameLogic+0x204>
		case GLogicLevelInit:
		state = GLogicPlaying;
		break;
		
		case GLogicPlaying:
		if(levelFinish != 0 && levelCount < LEVELMAX) {
     c32:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <levelFinish>
     c36:	88 23       	and	r24, r24
     c38:	31 f0       	breq	.+12     	; 0xc46 <TickGameLogic+0x5e>
     c3a:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <levelCount>
     c3e:	83 30       	cpi	r24, 0x03	; 3
     c40:	08 f4       	brcc	.+2      	; 0xc44 <TickGameLogic+0x5c>
     c42:	f6 c0       	rjmp	.+492    	; 0xe30 <TickGameLogic+0x248>
     c44:	3d c1       	rjmp	.+634    	; 0xec0 <TickGameLogic+0x2d8>
			state = GLogicLevelComplete;
		}
		else if(levelFinish != 0 && levelCount >= LEVELMAX) {
			state = GLogicWin;
		}
		else if(gameOver != 0) {
     c46:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <gameOver>
     c4a:	81 11       	cpse	r24, r1
     c4c:	fc c5       	rjmp	.+3064   	; 0x1846 <TickGameLogic+0xc5e>
     c4e:	ad c1       	rjmp	.+858    	; 0xfaa <TickGameLogic+0x3c2>
		case GLogicNextLevel:
		state = GLogicPlaying;
		break;
		
		case GLogicLevelComplete:
		if((SNESOutput & 0x1000) == 0x1000){
     c50:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SNESOutput>
     c54:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SNESOutput+0x1>
     c58:	94 fd       	sbrc	r25, 4
     c5a:	ee c0       	rjmp	.+476    	; 0xe38 <TickGameLogic+0x250>
     c5c:	e9 c0       	rjmp	.+466    	; 0xe30 <TickGameLogic+0x248>
			state = GLogicNextLevel;
		}
		break;
		
		case GLogicWin:
		if((SNESOutput & 0x1000) == 0x1000){
     c5e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SNESOutput>
     c62:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SNESOutput+0x1>
     c66:	94 fd       	sbrc	r25, 4
     c68:	19 c0       	rjmp	.+50     	; 0xc9c <TickGameLogic+0xb4>
     c6a:	2a c1       	rjmp	.+596    	; 0xec0 <TickGameLogic+0x2d8>
			state = GLogicMenu;
		}
		break;
		
		case GLogicRestartLevel:
		if((SNESOutput & 0x1000) == 0x1000){
     c6c:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <SNESOutput>
     c70:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <SNESOutput+0x1>
     c74:	34 fd       	sbrc	r19, 4
     c76:	99 c1       	rjmp	.+818    	; 0xfaa <TickGameLogic+0x3c2>
     c78:	01 c6       	rjmp	.+3074   	; 0x187c <TickGameLogic+0xc94>
			state = GLogicPlaying;
		}
		break;
		
		case GLogicGameOver:
		if((SNESOutput &0x1000) == 0x1000){
     c7a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SNESOutput>
     c7e:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SNESOutput+0x1>
     c82:	94 fd       	sbrc	r25, 4
     c84:	0b c0       	rjmp	.+22     	; 0xc9c <TickGameLogic+0xb4>
     c86:	df c5       	rjmp	.+3006   	; 0x1846 <TickGameLogic+0xc5e>
		break;
	}
	switch(state) {
			case GLogicInit:
			//SNES_init();
			highScore = 0;
     c88:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <highScore+0x1>
     c8c:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <highScore>
			menuInputDelayCount = 0;
     c90:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <menuInputDelayCount+0x1>
     c94:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <menuInputDelayCount>
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
	switch(state) {
		case GLogicStart:
		state = GLogicInit;
     c98:	81 e0       	ldi	r24, 0x01	; 1
	switch(state) {
			case GLogicInit:
			//SNES_init();
			highScore = 0;
			menuInputDelayCount = 0;
			break;
     c9a:	f0 c5       	rjmp	.+3040   	; 0x187c <TickGameLogic+0xc94>
			
			case GLogicMenu:
			currentGameState = GLogicMenu;
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			displayScore[2] = (highScore % 10) + '0';
     ca2:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <highScore>
     ca6:	f0 91 b8 04 	lds	r31, 0x04B8	; 0x8004b8 <highScore+0x1>
     caa:	c2 ea       	ldi	r28, 0xA2	; 162
     cac:	d4 e0       	ldi	r29, 0x04	; 4
     cae:	9f 01       	movw	r18, r30
     cb0:	ad ec       	ldi	r26, 0xCD	; 205
     cb2:	bc ec       	ldi	r27, 0xCC	; 204
     cb4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__umulhisi3>
     cb8:	ac 01       	movw	r20, r24
     cba:	56 95       	lsr	r21
     cbc:	47 95       	ror	r20
     cbe:	56 95       	lsr	r21
     cc0:	47 95       	ror	r20
     cc2:	56 95       	lsr	r21
     cc4:	47 95       	ror	r20
     cc6:	9a 01       	movw	r18, r20
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	ca 01       	movw	r24, r20
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	82 0f       	add	r24, r18
     cdc:	93 1f       	adc	r25, r19
     cde:	9f 01       	movw	r18, r30
     ce0:	28 1b       	sub	r18, r24
     ce2:	39 0b       	sbc	r19, r25
     ce4:	c9 01       	movw	r24, r18
     ce6:	80 5d       	subi	r24, 0xD0	; 208
     ce8:	8a 83       	std	Y+2, r24	; 0x02
			displayScore[1] = ((highScore / 10) % 10) + '0';
     cea:	9a 01       	movw	r18, r20
     cec:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__umulhisi3>
     cf0:	96 95       	lsr	r25
     cf2:	87 95       	ror	r24
     cf4:	96 95       	lsr	r25
     cf6:	87 95       	ror	r24
     cf8:	96 95       	lsr	r25
     cfa:	87 95       	ror	r24
     cfc:	9c 01       	movw	r18, r24
     cfe:	22 0f       	add	r18, r18
     d00:	33 1f       	adc	r19, r19
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	82 0f       	add	r24, r18
     d10:	93 1f       	adc	r25, r19
     d12:	48 1b       	sub	r20, r24
     d14:	59 0b       	sbc	r21, r25
     d16:	40 5d       	subi	r20, 0xD0	; 208
     d18:	49 83       	std	Y+1, r20	; 0x01
			displayScore[0] = ((highScore / 100) % 10) + '0';
     d1a:	9f 01       	movw	r18, r30
     d1c:	36 95       	lsr	r19
     d1e:	27 95       	ror	r18
     d20:	36 95       	lsr	r19
     d22:	27 95       	ror	r18
     d24:	ab e7       	ldi	r26, 0x7B	; 123
     d26:	b4 e1       	ldi	r27, 0x14	; 20
     d28:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__umulhisi3>
     d2c:	ac 01       	movw	r20, r24
     d2e:	56 95       	lsr	r21
     d30:	47 95       	ror	r20
     d32:	9a 01       	movw	r18, r20
     d34:	ad ec       	ldi	r26, 0xCD	; 205
     d36:	bc ec       	ldi	r27, 0xCC	; 204
     d38:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__umulhisi3>
     d3c:	96 95       	lsr	r25
     d3e:	87 95       	ror	r24
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	9c 01       	movw	r18, r24
     d4a:	22 0f       	add	r18, r18
     d4c:	33 1f       	adc	r19, r19
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	48 1b       	sub	r20, r24
     d60:	59 0b       	sbc	r21, r25
     d62:	40 5d       	subi	r20, 0xD0	; 208
     d64:	48 83       	st	Y, r20
			if((SNESOutput & 0x0010) == 0x0010) {
     d66:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SNESOutput>
     d6a:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SNESOutput+0x1>
     d6e:	84 ff       	sbrs	r24, 4
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <TickGameLogic+0x19a>
				//Save Score = "R"
				eeprom_write_word(EEPROM_ADDRESS_0, highScore);
     d72:	bf 01       	movw	r22, r30
     d74:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <EEPROM_ADDRESS_0>
     d78:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <EEPROM_ADDRESS_0+0x1>
     d7c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <eeprom_write_word>
     d80:	17 c0       	rjmp	.+46     	; 0xdb0 <TickGameLogic+0x1c8>
			}
			else if((SNESOutput & 0x0020) == 0x0020) {
     d82:	85 ff       	sbrs	r24, 5
     d84:	0b c0       	rjmp	.+22     	; 0xd9c <TickGameLogic+0x1b4>
				//Load Score = "L"
				highScore = eeprom_read_word(EEPROM_ADDRESS_0);
     d86:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <EEPROM_ADDRESS_0>
     d8a:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <EEPROM_ADDRESS_0+0x1>
     d8e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <eeprom_read_word>
     d92:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <highScore+0x1>
     d96:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <highScore>
     d9a:	0a c0       	rjmp	.+20     	; 0xdb0 <TickGameLogic+0x1c8>
			}
			else if((SNESOutput & 0x2000) == 0x2000) {
     d9c:	95 ff       	sbrs	r25, 5
     d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <TickGameLogic+0x1c8>
				//Clear Score = "SELECT"
				eeprom_write_word(EEPROM_ADDRESS_0, 0x0000);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <EEPROM_ADDRESS_0>
     da8:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <EEPROM_ADDRESS_0+0x1>
     dac:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <eeprom_write_word>
			}
			
			if(menuInputDelayCount < menuInputDelay) {
     db0:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <menuInputDelayCount>
     db4:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <menuInputDelayCount+0x1>
     db8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <menuInputDelay>
     dbc:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <menuInputDelay+0x1>
     dc0:	82 17       	cp	r24, r18
     dc2:	93 07       	cpc	r25, r19
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <TickGameLogic+0x1e0>
     dc6:	57 c5       	rjmp	.+2734   	; 0x1876 <TickGameLogic+0xc8e>
				menuInputDelayCount = menuInputDelayCount + 1;
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <menuInputDelayCount+0x1>
     dce:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <menuInputDelayCount>
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	53 c5       	rjmp	.+2726   	; 0x187c <TickGameLogic+0xc94>
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = levelDatabase[0][tempY][tempX];
     dd6:	91 91       	ld	r25, Z+
     dd8:	9d 93       	st	X+, r25
     dda:	81 50       	subi	r24, 0x01	; 1
			
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <TickGameLogic+0x1ee>
     dde:	29 5f       	subi	r18, 0xF9	; 249
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	49 5f       	subi	r20, 0xF9	; 249
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			
			break;
			
			case GLogicLevelInit:
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
     de6:	26 17       	cp	r18, r22
     de8:	37 07       	cpc	r19, r23
     dea:	21 f0       	breq	.+8      	; 0xdf4 <TickGameLogic+0x20c>
const unsigned char LEVELMAX = 3;

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
     dec:	da 01       	movw	r26, r20
     dee:	f9 01       	movw	r30, r18
     df0:	87 e0       	ldi	r24, 0x07	; 7
     df2:	f1 cf       	rjmp	.-30     	; 0xdd6 <TickGameLogic+0x1ee>
					objectLocMatrix[tempY][tempX] = levelDatabase[0][tempY][tempX];
				}
			}
			
			//Reset Game values
			player1.playerPosX = 0;
     df4:	e9 ea       	ldi	r30, 0xA9	; 169
     df6:	f4 e0       	ldi	r31, 0x04	; 4
     df8:	10 82       	st	Z, r1
			player1.playerPosY = 0;
     dfa:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
     dfc:	13 82       	std	Z+3, r1	; 0x03
			
			currentGameState = GLogicPlaying;
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			levelFinish = 0;
     e04:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <levelFinish>
			levelCount = 1;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <levelCount>
			gameOver = 0;
     e0e:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <gameOver>
			tempScore = 0;
     e12:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <tempScore+0x1>
     e16:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <tempScore>
			gameTimer = ROUNDPERIOD;
     e1a:	84 e1       	ldi	r24, 0x14	; 20
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <gameTimer+0x1>
     e22:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <gameTimer>
			gameTimerCountSecond = 0;
     e26:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <gameTimerCountSecond>
			transferObjToDis();
     e2a:	1e dd       	rcall	.-1476   	; 0x868 <transferObjToDis>
			break;
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	26 c5       	rjmp	.+2636   	; 0x187c <TickGameLogic+0xc94>
			
			case GLogicLevelComplete:
			currentGameState = GLogicLevelComplete;
     e30:	86 e0       	ldi	r24, 0x06	; 6
     e32:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			break;
     e36:	22 c5       	rjmp	.+2628   	; 0x187c <TickGameLogic+0xc94>
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
     e38:	20 91 9f 04 	lds	r18, 0x049F	; 0x80049f <levelCount>
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	20 93 9f 04 	sts	0x049F, r18	; 0x80049f <levelCount>
     e42:	85 e1       	ldi	r24, 0x15	; 21
     e44:	28 9f       	mul	r18, r24
     e46:	90 01       	movw	r18, r0
     e48:	11 24       	eor	r1, r1
     e4a:	22 51       	subi	r18, 0x12	; 18
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	45 e9       	ldi	r20, 0x95	; 149
     e50:	54 e1       	ldi	r21, 0x14	; 20
     e52:	6a ea       	ldi	r22, 0xAA	; 170
     e54:	74 e1       	ldi	r23, 0x14	; 20
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <TickGameLogic+0x286>
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
     e58:	91 91       	ld	r25, Z+
     e5a:	9d 93       	st	X+, r25
     e5c:	81 50       	subi	r24, 0x01	; 1
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
				for(unsigned char tempX = 0; tempX < 7;tempX++) {
     e5e:	e1 f7       	brne	.-8      	; 0xe58 <TickGameLogic+0x270>
     e60:	29 5f       	subi	r18, 0xF9	; 249
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	49 5f       	subi	r20, 0xF9	; 249
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
			break;
			
			case GLogicNextLevel:
			levelCount = levelCount + 1;
			
			for(unsigned char tempY = 0; tempY < 3;tempY++) {
     e68:	46 17       	cp	r20, r22
     e6a:	57 07       	cpc	r21, r23
     e6c:	21 f0       	breq	.+8      	; 0xe76 <TickGameLogic+0x28e>
const unsigned char LEVELMAX = 3;

enum GameLogicStates{GLogicStart, GLogicInit, GLogicMenu, GLogicLevelInit, GLogicPlaying, GLogicGameOver, GLogicLevelComplete, GLogicNextLevel, GLogicRestartLevel, GLogicWin};
	
unsigned char currentGameState = GLogicMenu;
unsigned char TickGameLogic(unsigned char state) {
     e6e:	da 01       	movw	r26, r20
     e70:	f9 01       	movw	r30, r18
     e72:	87 e0       	ldi	r24, 0x07	; 7
     e74:	f1 cf       	rjmp	.-30     	; 0xe58 <TickGameLogic+0x270>
					objectLocMatrix[tempY][tempX] = levelDatabase[levelCount - 1][tempY][tempX];
				}
			}
			
			//Reset Game values
			player1.playerPosX = 0;
     e76:	e9 ea       	ldi	r30, 0xA9	; 169
     e78:	f4 e0       	ldi	r31, 0x04	; 4
     e7a:	10 82       	st	Z, r1
			player1.playerPosY = 0;
     e7c:	11 82       	std	Z+1, r1	; 0x01
			player1.isBombPlaced = 0;
     e7e:	13 82       	std	Z+3, r1	; 0x03
			tempScore = tempScore + gameTimer;
     e80:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <tempScore>
     e84:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <tempScore+0x1>
     e88:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <gameTimer>
     e8c:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <gameTimer+0x1>
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <tempScore+0x1>
     e98:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <tempScore>
			
			currentGameState = GLogicPlaying;
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			levelFinish = 0;
     ea2:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <levelFinish>
			gameOver = 0;
     ea6:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <gameOver>
			gameTimer = ROUNDPERIOD;
     eaa:	84 e1       	ldi	r24, 0x14	; 20
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <gameTimer+0x1>
     eb2:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <gameTimer>
			gameTimerCountSecond = 0;
     eb6:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <gameTimerCountSecond>
			transferObjToDis();
     eba:	d6 dc       	rcall	.-1620   	; 0x868 <transferObjToDis>
			break;
     ebc:	87 e0       	ldi	r24, 0x07	; 7
     ebe:	de c4       	rjmp	.+2492   	; 0x187c <TickGameLogic+0xc94>
			
			case GLogicWin:
			currentGameState = GLogicWin;
     ec0:	89 e0       	ldi	r24, 0x09	; 9
     ec2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			displayScore[2] = (tempScore % 10) + '0';
     ec6:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <tempScore>
     eca:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <tempScore+0x1>
     ece:	c2 ea       	ldi	r28, 0xA2	; 162
     ed0:	d4 e0       	ldi	r29, 0x04	; 4
     ed2:	9f 01       	movw	r18, r30
     ed4:	ad ec       	ldi	r26, 0xCD	; 205
     ed6:	bc ec       	ldi	r27, 0xCC	; 204
     ed8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__umulhisi3>
     edc:	ac 01       	movw	r20, r24
     ede:	56 95       	lsr	r21
     ee0:	47 95       	ror	r20
     ee2:	56 95       	lsr	r21
     ee4:	47 95       	ror	r20
     ee6:	56 95       	lsr	r21
     ee8:	47 95       	ror	r20
     eea:	9a 01       	movw	r18, r20
     eec:	22 0f       	add	r18, r18
     eee:	33 1f       	adc	r19, r19
     ef0:	ca 01       	movw	r24, r20
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	82 0f       	add	r24, r18
     f00:	93 1f       	adc	r25, r19
     f02:	df 01       	movw	r26, r30
     f04:	a8 1b       	sub	r26, r24
     f06:	b9 0b       	sbc	r27, r25
     f08:	cd 01       	movw	r24, r26
     f0a:	80 5d       	subi	r24, 0xD0	; 208
     f0c:	8a 83       	std	Y+2, r24	; 0x02
			displayScore[1] = ((tempScore / 10) % 10) + '0';
     f0e:	9a 01       	movw	r18, r20
     f10:	ad ec       	ldi	r26, 0xCD	; 205
     f12:	bc ec       	ldi	r27, 0xCC	; 204
     f14:	ee d7       	rcall	.+4060   	; 0x1ef2 <__umulhisi3>
     f16:	96 95       	lsr	r25
     f18:	87 95       	ror	r24
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	9c 01       	movw	r18, r24
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	48 1b       	sub	r20, r24
     f3a:	59 0b       	sbc	r21, r25
     f3c:	40 5d       	subi	r20, 0xD0	; 208
     f3e:	49 83       	std	Y+1, r20	; 0x01
			displayScore[0] = ((tempScore / 100) % 10) + '0';
     f40:	9f 01       	movw	r18, r30
     f42:	36 95       	lsr	r19
     f44:	27 95       	ror	r18
     f46:	36 95       	lsr	r19
     f48:	27 95       	ror	r18
     f4a:	ab e7       	ldi	r26, 0x7B	; 123
     f4c:	b4 e1       	ldi	r27, 0x14	; 20
     f4e:	d1 d7       	rcall	.+4002   	; 0x1ef2 <__umulhisi3>
     f50:	ac 01       	movw	r20, r24
     f52:	56 95       	lsr	r21
     f54:	47 95       	ror	r20
     f56:	9a 01       	movw	r18, r20
     f58:	ad ec       	ldi	r26, 0xCD	; 205
     f5a:	bc ec       	ldi	r27, 0xCC	; 204
     f5c:	ca d7       	rcall	.+3988   	; 0x1ef2 <__umulhisi3>
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	96 95       	lsr	r25
     f64:	87 95       	ror	r24
     f66:	96 95       	lsr	r25
     f68:	87 95       	ror	r24
     f6a:	9c 01       	movw	r18, r24
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	82 0f       	add	r24, r18
     f7e:	93 1f       	adc	r25, r19
     f80:	48 1b       	sub	r20, r24
     f82:	59 0b       	sbc	r21, r25
     f84:	40 5d       	subi	r20, 0xD0	; 208
     f86:	48 83       	st	Y, r20
			if(highScore < tempScore) {
     f88:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <highScore>
     f8c:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <highScore+0x1>
     f90:	8e 17       	cp	r24, r30
     f92:	9f 07       	cpc	r25, r31
     f94:	20 f4       	brcc	.+8      	; 0xf9e <TickGameLogic+0x3b6>
				highScore = tempScore;
     f96:	f0 93 b8 04 	sts	0x04B8, r31	; 0x8004b8 <highScore+0x1>
     f9a:	e0 93 b7 04 	sts	0x04B7, r30	; 0x8004b7 <highScore>
			}
			menuInputDelayCount = 0;
     f9e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <menuInputDelayCount+0x1>
     fa2:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <menuInputDelayCount>
			break;
     fa6:	89 e0       	ldi	r24, 0x09	; 9
     fa8:	69 c4       	rjmp	.+2258   	; 0x187c <TickGameLogic+0xc94>
			
			case GLogicPlaying:
			
			//Player Input and Actions
			if(player1.isBombPlaced == 0 && (SNESOutput & 0x8000) == 0x8000) {
     faa:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <player1+0x3>
     fae:	81 11       	cpse	r24, r1
     fb0:	10 c0       	rjmp	.+32     	; 0xfd2 <TickGameLogic+0x3ea>
     fb2:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SNESOutput>
     fb6:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SNESOutput+0x1>
     fba:	99 23       	and	r25, r25
     fbc:	54 f4       	brge	.+20     	; 0xfd2 <TickGameLogic+0x3ea>
				player1.isBombPlaced = 1;
     fbe:	e9 ea       	ldi	r30, 0xA9	; 169
     fc0:	f4 e0       	ldi	r31, 0x04	; 4
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	83 83       	std	Z+3, r24	; 0x03
				player1.bombPosX = player1.playerPosX;
     fc6:	80 81       	ld	r24, Z
     fc8:	84 83       	std	Z+4, r24	; 0x04
				player1.bombPosY = player1.playerPosY;
     fca:	81 81       	ldd	r24, Z+1	; 0x01
     fcc:	85 83       	std	Z+5, r24	; 0x05
				player1.bombCount = 0;
     fce:	17 82       	std	Z+7, r1	; 0x07
     fd0:	16 82       	std	Z+6, r1	; 0x06
			}
			unsigned char tempObj;
			if(player1.playerPosX != 6 && (SNESOutput & 0x0100) == 0x0100) {
     fd2:	60 91 a9 04 	lds	r22, 0x04A9	; 0x8004a9 <player1>
     fd6:	66 30       	cpi	r22, 0x06	; 6
     fd8:	09 f4       	brne	.+2      	; 0xfdc <TickGameLogic+0x3f4>
     fda:	52 c0       	rjmp	.+164    	; 0x1080 <TickGameLogic+0x498>
     fdc:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SNESOutput>
     fe0:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SNESOutput+0x1>
     fe4:	90 ff       	sbrs	r25, 0
     fe6:	49 c0       	rjmp	.+146    	; 0x107a <TickGameLogic+0x492>
				tempObj = objectLocMatrix[player1.playerPosY][(player1.playerPosX + 1)];
     fe8:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <player1+0x1>
     fec:	26 2f       	mov	r18, r22
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	48 2f       	mov	r20, r24
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	f9 01       	movw	r30, r18
     ff6:	b7 e0       	ldi	r27, 0x07	; 7
     ff8:	8b 9f       	mul	r24, r27
     ffa:	e0 0d       	add	r30, r0
     ffc:	f1 1d       	adc	r31, r1
     ffe:	11 24       	eor	r1, r1
    1000:	eb 56       	subi	r30, 0x6B	; 107
    1002:	fb 4e       	sbci	r31, 0xEB	; 235
    1004:	81 81       	ldd	r24, Z+1	; 0x01
				if(tempObj == OBJEmpty){
    1006:	81 11       	cpse	r24, r1
    1008:	19 c0       	rjmp	.+50     	; 0x103c <TickGameLogic+0x454>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    100a:	ca 01       	movw	r24, r20
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	84 1b       	sub	r24, r20
    101a:	95 0b       	sbc	r25, r21
    101c:	8b 56       	subi	r24, 0x6B	; 107
    101e:	9b 4e       	sbci	r25, 0xEB	; 235
    1020:	fc 01       	movw	r30, r24
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX + 1;
    1028:	21 e0       	ldi	r18, 0x01	; 1
    102a:	26 0f       	add	r18, r22
    102c:	20 93 a9 04 	sts	0x04A9, r18	; 0x8004a9 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1030:	fc 01       	movw	r30, r24
    1032:	e2 0f       	add	r30, r18
    1034:	f1 1d       	adc	r31, r1
    1036:	24 e0       	ldi	r18, 0x04	; 4
    1038:	20 83       	st	Z, r18
    103a:	2d c1       	rjmp	.+602    	; 0x1296 <TickGameLogic+0x6ae>
				}
				else if(tempObj == OBJDoor) {
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	09 f0       	breq	.+2      	; 0x1042 <TickGameLogic+0x45a>
    1040:	2a c1       	rjmp	.+596    	; 0x1296 <TickGameLogic+0x6ae>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    1042:	ca 01       	movw	r24, r20
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	84 1b       	sub	r24, r20
    1052:	95 0b       	sbc	r25, r21
    1054:	8b 56       	subi	r24, 0x6B	; 107
    1056:	9b 4e       	sbci	r25, 0xEB	; 235
    1058:	fc 01       	movw	r30, r24
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX + 1;
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	26 0f       	add	r18, r22
    1064:	20 93 a9 04 	sts	0x04A9, r18	; 0x8004a9 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f1 1d       	adc	r31, r1
    106e:	24 e0       	ldi	r18, 0x04	; 4
    1070:	20 83       	st	Z, r18
					levelFinish = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <levelFinish>
    1078:	0e c1       	rjmp	.+540    	; 0x1296 <TickGameLogic+0x6ae>
				}
			}
			else if(player1.playerPosX != 0 && (SNESOutput & 0x0200) == 0x0200) {
    107a:	66 23       	and	r22, r22
    107c:	09 f4       	brne	.+2      	; 0x1080 <TickGameLogic+0x498>
    107e:	4f c0       	rjmp	.+158    	; 0x111e <TickGameLogic+0x536>
    1080:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SNESOutput>
    1084:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <SNESOutput+0x1>
    1088:	91 ff       	sbrs	r25, 1
    108a:	49 c0       	rjmp	.+146    	; 0x111e <TickGameLogic+0x536>
				tempObj = objectLocMatrix[player1.playerPosY][(player1.playerPosX - 1)];
    108c:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <player1+0x1>
    1090:	46 2f       	mov	r20, r22
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	fa 01       	movw	r30, r20
    109a:	97 e0       	ldi	r25, 0x07	; 7
    109c:	89 9f       	mul	r24, r25
    109e:	e0 0d       	add	r30, r0
    10a0:	f1 1d       	adc	r31, r1
    10a2:	11 24       	eor	r1, r1
    10a4:	ec 56       	subi	r30, 0x6C	; 108
    10a6:	fb 4e       	sbci	r31, 0xEB	; 235
    10a8:	80 81       	ld	r24, Z
				if(tempObj == OBJEmpty){
    10aa:	81 11       	cpse	r24, r1
    10ac:	19 c0       	rjmp	.+50     	; 0x10e0 <TickGameLogic+0x4f8>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    10ae:	c9 01       	movw	r24, r18
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	82 1b       	sub	r24, r18
    10be:	93 0b       	sbc	r25, r19
    10c0:	8b 56       	subi	r24, 0x6B	; 107
    10c2:	9b 4e       	sbci	r25, 0xEB	; 235
    10c4:	fc 01       	movw	r30, r24
    10c6:	e4 0f       	add	r30, r20
    10c8:	f5 1f       	adc	r31, r21
    10ca:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX - 1;
    10cc:	2f ef       	ldi	r18, 0xFF	; 255
    10ce:	26 0f       	add	r18, r22
    10d0:	20 93 a9 04 	sts	0x04A9, r18	; 0x8004a9 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    10d4:	fc 01       	movw	r30, r24
    10d6:	e2 0f       	add	r30, r18
    10d8:	f1 1d       	adc	r31, r1
    10da:	24 e0       	ldi	r18, 0x04	; 4
    10dc:	20 83       	st	Z, r18
    10de:	db c0       	rjmp	.+438    	; 0x1296 <TickGameLogic+0x6ae>
				}
				else if(tempObj == OBJDoor) {
    10e0:	83 30       	cpi	r24, 0x03	; 3
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <TickGameLogic+0x4fe>
    10e4:	d8 c0       	rjmp	.+432    	; 0x1296 <TickGameLogic+0x6ae>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    10e6:	c9 01       	movw	r24, r18
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	82 1b       	sub	r24, r18
    10f6:	93 0b       	sbc	r25, r19
    10f8:	8b 56       	subi	r24, 0x6B	; 107
    10fa:	9b 4e       	sbci	r25, 0xEB	; 235
    10fc:	fc 01       	movw	r30, r24
    10fe:	e4 0f       	add	r30, r20
    1100:	f5 1f       	adc	r31, r21
    1102:	10 82       	st	Z, r1
					player1.playerPosX = player1.playerPosX - 1;
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	26 0f       	add	r18, r22
    1108:	20 93 a9 04 	sts	0x04A9, r18	; 0x8004a9 <player1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    110c:	fc 01       	movw	r30, r24
    110e:	e2 0f       	add	r30, r18
    1110:	f1 1d       	adc	r31, r1
    1112:	24 e0       	ldi	r18, 0x04	; 4
    1114:	20 83       	st	Z, r18
					levelFinish = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <levelFinish>
    111c:	bc c0       	rjmp	.+376    	; 0x1296 <TickGameLogic+0x6ae>
				}
			}
			else if(player1.playerPosY != 0 && (SNESOutput & 0x0800) == 0x0800) {
    111e:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <player1+0x1>
    1122:	88 23       	and	r24, r24
    1124:	09 f4       	brne	.+2      	; 0x1128 <TickGameLogic+0x540>
    1126:	5e c0       	rjmp	.+188    	; 0x11e4 <TickGameLogic+0x5fc>
    1128:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <SNESOutput>
    112c:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <SNESOutput+0x1>
    1130:	33 ff       	sbrs	r19, 3
    1132:	55 c0       	rjmp	.+170    	; 0x11de <TickGameLogic+0x5f6>
				tempObj = objectLocMatrix[player1.playerPosY - 1][(player1.playerPosX)];
    1134:	a8 2f       	mov	r26, r24
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	26 2f       	mov	r18, r22
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	ad 01       	movw	r20, r26
    113e:	41 50       	subi	r20, 0x01	; 1
    1140:	51 09       	sbc	r21, r1
    1142:	fa 01       	movw	r30, r20
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	e4 1b       	sub	r30, r20
    1152:	f5 0b       	sbc	r31, r21
    1154:	eb 56       	subi	r30, 0x6B	; 107
    1156:	fb 4e       	sbci	r31, 0xEB	; 235
    1158:	e2 0f       	add	r30, r18
    115a:	f3 1f       	adc	r31, r19
    115c:	90 81       	ld	r25, Z
				if(tempObj == OBJEmpty){
    115e:	91 11       	cpse	r25, r1
    1160:	1c c0       	rjmp	.+56     	; 0x119a <TickGameLogic+0x5b2>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    1162:	fd 01       	movw	r30, r26
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	ea 1b       	sub	r30, r26
    1172:	fb 0b       	sbc	r31, r27
    1174:	eb 56       	subi	r30, 0x6B	; 107
    1176:	fb 4e       	sbci	r31, 0xEB	; 235
    1178:	e2 0f       	add	r30, r18
    117a:	f3 1f       	adc	r31, r19
    117c:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY - 1;
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1184:	a7 e0       	ldi	r26, 0x07	; 7
    1186:	8a 9f       	mul	r24, r26
    1188:	20 0d       	add	r18, r0
    118a:	31 1d       	adc	r19, r1
    118c:	11 24       	eor	r1, r1
    118e:	f9 01       	movw	r30, r18
    1190:	eb 56       	subi	r30, 0x6B	; 107
    1192:	fb 4e       	sbci	r31, 0xEB	; 235
    1194:	84 e0       	ldi	r24, 0x04	; 4
    1196:	80 83       	st	Z, r24
    1198:	7e c0       	rjmp	.+252    	; 0x1296 <TickGameLogic+0x6ae>
				}
				else if(tempObj == OBJDoor) {
    119a:	93 30       	cpi	r25, 0x03	; 3
    119c:	09 f0       	breq	.+2      	; 0x11a0 <TickGameLogic+0x5b8>
    119e:	7b c0       	rjmp	.+246    	; 0x1296 <TickGameLogic+0x6ae>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    11a0:	fd 01       	movw	r30, r26
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	ea 1b       	sub	r30, r26
    11b0:	fb 0b       	sbc	r31, r27
    11b2:	eb 56       	subi	r30, 0x6B	; 107
    11b4:	fb 4e       	sbci	r31, 0xEB	; 235
    11b6:	e2 0f       	add	r30, r18
    11b8:	f3 1f       	adc	r31, r19
    11ba:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY - 1;
    11bc:	81 50       	subi	r24, 0x01	; 1
    11be:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    11c2:	b7 e0       	ldi	r27, 0x07	; 7
    11c4:	8b 9f       	mul	r24, r27
    11c6:	20 0d       	add	r18, r0
    11c8:	31 1d       	adc	r19, r1
    11ca:	11 24       	eor	r1, r1
    11cc:	f9 01       	movw	r30, r18
    11ce:	eb 56       	subi	r30, 0x6B	; 107
    11d0:	fb 4e       	sbci	r31, 0xEB	; 235
    11d2:	84 e0       	ldi	r24, 0x04	; 4
    11d4:	80 83       	st	Z, r24
					levelFinish = 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <levelFinish>
    11dc:	5c c0       	rjmp	.+184    	; 0x1296 <TickGameLogic+0x6ae>
				}
			}
			else if(player1.playerPosY != 2 && (SNESOutput & 0x0400) == 0x0400) {
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <TickGameLogic+0x5fc>
    11e2:	59 c0       	rjmp	.+178    	; 0x1296 <TickGameLogic+0x6ae>
    11e4:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <SNESOutput>
    11e8:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <SNESOutput+0x1>
    11ec:	32 ff       	sbrs	r19, 2
    11ee:	53 c0       	rjmp	.+166    	; 0x1296 <TickGameLogic+0x6ae>
				tempObj = objectLocMatrix[player1.playerPosY + 1][(player1.playerPosX)];
    11f0:	a8 2f       	mov	r26, r24
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	26 2f       	mov	r18, r22
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	ad 01       	movw	r20, r26
    11fa:	4f 5f       	subi	r20, 0xFF	; 255
    11fc:	5f 4f       	sbci	r21, 0xFF	; 255
    11fe:	fa 01       	movw	r30, r20
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	e4 1b       	sub	r30, r20
    120e:	f5 0b       	sbc	r31, r21
    1210:	eb 56       	subi	r30, 0x6B	; 107
    1212:	fb 4e       	sbci	r31, 0xEB	; 235
    1214:	e2 0f       	add	r30, r18
    1216:	f3 1f       	adc	r31, r19
    1218:	90 81       	ld	r25, Z
				if(tempObj == OBJEmpty){
    121a:	91 11       	cpse	r25, r1
    121c:	1c c0       	rjmp	.+56     	; 0x1256 <TickGameLogic+0x66e>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    121e:	fd 01       	movw	r30, r26
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	ea 1b       	sub	r30, r26
    122e:	fb 0b       	sbc	r31, r27
    1230:	eb 56       	subi	r30, 0x6B	; 107
    1232:	fb 4e       	sbci	r31, 0xEB	; 235
    1234:	e2 0f       	add	r30, r18
    1236:	f3 1f       	adc	r31, r19
    1238:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY + 1;
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    1240:	97 e0       	ldi	r25, 0x07	; 7
    1242:	89 9f       	mul	r24, r25
    1244:	20 0d       	add	r18, r0
    1246:	31 1d       	adc	r19, r1
    1248:	11 24       	eor	r1, r1
    124a:	f9 01       	movw	r30, r18
    124c:	eb 56       	subi	r30, 0x6B	; 107
    124e:	fb 4e       	sbci	r31, 0xEB	; 235
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	80 83       	st	Z, r24
    1254:	20 c0       	rjmp	.+64     	; 0x1296 <TickGameLogic+0x6ae>
				}
				else if(tempObj == OBJDoor) {
    1256:	93 30       	cpi	r25, 0x03	; 3
    1258:	f1 f4       	brne	.+60     	; 0x1296 <TickGameLogic+0x6ae>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJEmpty;
    125a:	fd 01       	movw	r30, r26
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	ee 0f       	add	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	ee 0f       	add	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	ea 1b       	sub	r30, r26
    126a:	fb 0b       	sbc	r31, r27
    126c:	eb 56       	subi	r30, 0x6B	; 107
    126e:	fb 4e       	sbci	r31, 0xEB	; 235
    1270:	e2 0f       	add	r30, r18
    1272:	f3 1f       	adc	r31, r19
    1274:	10 82       	st	Z, r1
					player1.playerPosY = player1.playerPosY + 1;
    1276:	8f 5f       	subi	r24, 0xFF	; 255
    1278:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <player1+0x1>
					objectLocMatrix[player1.playerPosY][player1.playerPosX] = OBJPlayer;
    127c:	a7 e0       	ldi	r26, 0x07	; 7
    127e:	8a 9f       	mul	r24, r26
    1280:	20 0d       	add	r18, r0
    1282:	31 1d       	adc	r19, r1
    1284:	11 24       	eor	r1, r1
    1286:	f9 01       	movw	r30, r18
    1288:	eb 56       	subi	r30, 0x6B	; 107
    128a:	fb 4e       	sbci	r31, 0xEB	; 235
    128c:	84 e0       	ldi	r24, 0x04	; 4
    128e:	80 83       	st	Z, r24
					levelFinish = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <levelFinish>
				}
			}
			if((player1.playerPosX != player1.bombPosX || player1.playerPosY != player1.bombPosY) && player1.isBombPlaced != 0) {
    1296:	e9 ea       	ldi	r30, 0xA9	; 169
    1298:	f4 e0       	ldi	r31, 0x04	; 4
    129a:	24 81       	ldd	r18, Z+4	; 0x04
    129c:	80 81       	ld	r24, Z
    129e:	82 13       	cpse	r24, r18
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <TickGameLogic+0x6c2>
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	85 81       	ldd	r24, Z+5	; 0x05
    12a6:	98 17       	cp	r25, r24
    12a8:	81 f0       	breq	.+32     	; 0x12ca <TickGameLogic+0x6e2>
    12aa:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <player1+0x3>
    12ae:	88 23       	and	r24, r24
    12b0:	61 f0       	breq	.+24     	; 0x12ca <TickGameLogic+0x6e2>
				objectLocMatrix[player1.bombPosY][player1.bombPosX] = OBJBomb;
    12b2:	e0 91 ae 04 	lds	r30, 0x04AE	; 0x8004ae <player1+0x5>
    12b6:	b7 e0       	ldi	r27, 0x07	; 7
    12b8:	eb 9f       	mul	r30, r27
    12ba:	f0 01       	movw	r30, r0
    12bc:	11 24       	eor	r1, r1
    12be:	eb 56       	subi	r30, 0x6B	; 107
    12c0:	fb 4e       	sbci	r31, 0xEB	; 235
    12c2:	e2 0f       	add	r30, r18
    12c4:	f1 1d       	adc	r31, r1
    12c6:	86 e0       	ldi	r24, 0x06	; 6
    12c8:	80 83       	st	Z, r24
			}
			
			
			//Check Bomb And Explosion Objs
			while(explodeStackSize != 0) {
    12ca:	80 91 94 14 	lds	r24, 0x1494	; 0x801494 <explodeStackSize>
    12ce:	88 23       	and	r24, r24
    12d0:	b9 f0       	breq	.+46     	; 0x1300 <TickGameLogic+0x718>
				objectLocMatrix[explodeStack[explodeStackSize - 1].posY][explodeStack[explodeStackSize - 1].posX] = OBJEmpty;
    12d2:	a8 2f       	mov	r26, r24
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	aa 0f       	add	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	a7 54       	subi	r26, 0x47	; 71
    12dc:	bb 4f       	sbci	r27, 0xFB	; 251
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	ec 91       	ld	r30, X
    12e2:	11 97       	sbiw	r26, 0x01	; 1
    12e4:	9c 91       	ld	r25, X
    12e6:	37 e0       	ldi	r19, 0x07	; 7
    12e8:	e3 9f       	mul	r30, r19
    12ea:	f0 01       	movw	r30, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	eb 56       	subi	r30, 0x6B	; 107
    12f0:	fb 4e       	sbci	r31, 0xEB	; 235
    12f2:	e9 0f       	add	r30, r25
    12f4:	f1 1d       	adc	r31, r1
    12f6:	10 82       	st	Z, r1
				explodeStackSize = explodeStackSize - 1;
    12f8:	81 50       	subi	r24, 0x01	; 1
				objectLocMatrix[player1.bombPosY][player1.bombPosX] = OBJBomb;
			}
			
			
			//Check Bomb And Explosion Objs
			while(explodeStackSize != 0) {
    12fa:	59 f7       	brne	.-42     	; 0x12d2 <TickGameLogic+0x6ea>
    12fc:	10 92 94 14 	sts	0x1494, r1	; 0x801494 <explodeStackSize>
				objectLocMatrix[explodeStack[explodeStackSize - 1].posY][explodeStack[explodeStackSize - 1].posX] = OBJEmpty;
				explodeStackSize = explodeStackSize - 1;
			}
			
			if(player1.bombCount < BOMBPERIOD && player1.isBombPlaced != 0) {
    1300:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <player1+0x6>
    1304:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <player1+0x7>
    1308:	8e 31       	cpi	r24, 0x1E	; 30
    130a:	91 05       	cpc	r25, r1
    130c:	58 f4       	brcc	.+22     	; 0x1324 <TickGameLogic+0x73c>
    130e:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <player1+0x3>
    1312:	22 23       	and	r18, r18
    1314:	09 f4       	brne	.+2      	; 0x1318 <TickGameLogic+0x730>
    1316:	be c1       	rjmp	.+892    	; 0x1694 <TickGameLogic+0xaac>
				player1.bombCount += 1;
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <player1+0x7>
    131e:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <player1+0x6>
    1322:	b8 c1       	rjmp	.+880    	; 0x1694 <TickGameLogic+0xaac>
			}
			else if(player1.bombCount >= BOMBPERIOD && player1.isBombPlaced != 0) {
    1324:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <player1+0x3>
    1328:	88 23       	and	r24, r24
    132a:	09 f4       	brne	.+2      	; 0x132e <TickGameLogic+0x746>
    132c:	b3 c1       	rjmp	.+870    	; 0x1694 <TickGameLogic+0xaac>
				tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX)];
    132e:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <player1+0x5>
    1332:	42 2f       	mov	r20, r18
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	63 2f       	mov	r22, r19
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	fa 01       	movw	r30, r20
    133c:	87 e0       	ldi	r24, 0x07	; 7
    133e:	38 9f       	mul	r19, r24
    1340:	e0 0d       	add	r30, r0
    1342:	f1 1d       	adc	r31, r1
    1344:	11 24       	eor	r1, r1
    1346:	eb 56       	subi	r30, 0x6B	; 107
    1348:	fb 4e       	sbci	r31, 0xEB	; 235
    134a:	a0 81       	ld	r26, Z
				vibrateQueue[vibrateQueueEnd] = 10;
    134c:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <vibrateQueueEnd>
    1350:	e8 2f       	mov	r30, r24
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	ea 55       	subi	r30, 0x5A	; 90
    1356:	fb 4f       	sbci	r31, 0xFB	; 251
    1358:	9a e0       	ldi	r25, 0x0A	; 10
    135a:	90 83       	st	Z, r25
				if(vibrateQueueEnd >= 2) {
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	18 f0       	brcs	.+6      	; 0x1366 <TickGameLogic+0x77e>
					vibrateQueueEnd = 0;
    1360:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <vibrateQueueEnd>
    1364:	03 c0       	rjmp	.+6      	; 0x136c <TickGameLogic+0x784>
				}
				else {
					vibrateQueueEnd = vibrateQueueEnd + 1;
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <vibrateQueueEnd>
				}
				vibrateQueueSize = vibrateQueueSize + 1;
    136c:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <vibrateQueueSize>
    1370:	9f 5f       	subi	r25, 0xFF	; 255
    1372:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <vibrateQueueSize>
				
				if(tempObj == OBJPlayer){
    1376:	a4 30       	cpi	r26, 0x04	; 4
    1378:	21 f4       	brne	.+8      	; 0x1382 <TickGameLogic+0x79a>
					gameOver = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <gameOver>
    1380:	17 c0       	rjmp	.+46     	; 0x13b0 <TickGameLogic+0x7c8>
				}
				else {
					struct explodeNode tempExplo;
					tempExplo.posX = player1.bombPosX;
					tempExplo.posY = player1.bombPosY;
					objectLocMatrix[player1.bombPosY][(player1.bombPosX)] = OBJExplode;
    1382:	cb 01       	movw	r24, r22
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	86 1b       	sub	r24, r22
    1392:	97 0b       	sbc	r25, r23
    1394:	8b 56       	subi	r24, 0x6B	; 107
    1396:	9b 4e       	sbci	r25, 0xEB	; 235
    1398:	fc 01       	movw	r30, r24
    139a:	e4 0f       	add	r30, r20
    139c:	f5 1f       	adc	r31, r21
    139e:	48 e0       	ldi	r20, 0x08	; 8
    13a0:	40 83       	st	Z, r20
					explodeStack[explodeStackSize] = tempExplo;
    13a2:	eb eb       	ldi	r30, 0xBB	; 187
    13a4:	f4 e0       	ldi	r31, 0x04	; 4
    13a6:	20 83       	st	Z, r18
    13a8:	31 83       	std	Z+1, r19	; 0x01
					explodeStackSize = explodeStackSize + 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 94 14 	sts	0x1494, r24	; 0x801494 <explodeStackSize>
				}
				
				if(player1.bombPosX != 6) {
    13b0:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <player1+0x4>
    13b4:	86 30       	cpi	r24, 0x06	; 6
    13b6:	09 f4       	brne	.+2      	; 0x13ba <TickGameLogic+0x7d2>
    13b8:	5c c0       	rjmp	.+184    	; 0x1472 <TickGameLogic+0x88a>
					tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)];
    13ba:	40 91 ae 04 	lds	r20, 0x04AE	; 0x8004ae <player1+0x5>
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	2f 5f       	subi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	64 2f       	mov	r22, r20
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	97 e0       	ldi	r25, 0x07	; 7
    13ce:	49 9f       	mul	r20, r25
    13d0:	e0 0d       	add	r30, r0
    13d2:	f1 1d       	adc	r31, r1
    13d4:	11 24       	eor	r1, r1
    13d6:	eb 56       	subi	r30, 0x6B	; 107
    13d8:	fb 4e       	sbci	r31, 0xEB	; 235
    13da:	90 81       	ld	r25, Z
					if(tempObj == OBJEmpty || tempObj == OBJWall){
    13dc:	92 30       	cpi	r25, 0x02	; 2
    13de:	70 f5       	brcc	.+92     	; 0x143c <TickGameLogic+0x854>
						struct explodeNode tempExplo;
						tempExplo.posX = player1.bombPosX + 1;
						tempExplo.posY = player1.bombPosY;
						objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)] = OBJExplode;
    13e0:	fb 01       	movw	r30, r22
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	df 01       	movw	r26, r30
    13f0:	a6 1b       	sub	r26, r22
    13f2:	b7 0b       	sbc	r27, r23
    13f4:	bd 01       	movw	r22, r26
    13f6:	6b 56       	subi	r22, 0x6B	; 107
    13f8:	7b 4e       	sbci	r23, 0xEB	; 235
    13fa:	fb 01       	movw	r30, r22
    13fc:	e2 0f       	add	r30, r18
    13fe:	f3 1f       	adc	r31, r19
    1400:	58 e0       	ldi	r21, 0x08	; 8
    1402:	50 83       	st	Z, r21
						explodeStack[explodeStackSize] = tempExplo;
    1404:	20 91 94 14 	lds	r18, 0x1494	; 0x801494 <explodeStackSize>
    1408:	e2 2f       	mov	r30, r18
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	e5 54       	subi	r30, 0x45	; 69
    1412:	fb 4f       	sbci	r31, 0xFB	; 251
    1414:	31 e0       	ldi	r19, 0x01	; 1
    1416:	38 0f       	add	r19, r24
    1418:	30 83       	st	Z, r19
    141a:	41 83       	std	Z+1, r20	; 0x01
						explodeStackSize = explodeStackSize + 1;
    141c:	2f 5f       	subi	r18, 0xFF	; 255
    141e:	20 93 94 14 	sts	0x1494, r18	; 0x801494 <explodeStackSize>
						if(tempObj == OBJWall) {
    1422:	91 30       	cpi	r25, 0x01	; 1
    1424:	19 f5       	brne	.+70     	; 0x146c <TickGameLogic+0x884>
							tempScore = tempScore + 1;
    1426:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <tempScore>
    142a:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <tempScore+0x1>
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	30 93 a1 04 	sts	0x04A1, r19	; 0x8004a1 <tempScore+0x1>
    1436:	20 93 a0 04 	sts	0x04A0, r18	; 0x8004a0 <tempScore>
    143a:	18 c0       	rjmp	.+48     	; 0x146c <TickGameLogic+0x884>
						}
					}
					else if(tempObj == OBJHidden){
    143c:	92 30       	cpi	r25, 0x02	; 2
    143e:	89 f4       	brne	.+34     	; 0x1462 <TickGameLogic+0x87a>
						objectLocMatrix[player1.bombPosY][(player1.bombPosX + 1)] = OBJDoor;
    1440:	ab 01       	movw	r20, r22
    1442:	44 0f       	add	r20, r20
    1444:	55 1f       	adc	r21, r21
    1446:	44 0f       	add	r20, r20
    1448:	55 1f       	adc	r21, r21
    144a:	44 0f       	add	r20, r20
    144c:	55 1f       	adc	r21, r21
    144e:	46 1b       	sub	r20, r22
    1450:	57 0b       	sbc	r21, r23
    1452:	4b 56       	subi	r20, 0x6B	; 107
    1454:	5b 4e       	sbci	r21, 0xEB	; 235
    1456:	fa 01       	movw	r30, r20
    1458:	e2 0f       	add	r30, r18
    145a:	f3 1f       	adc	r31, r19
    145c:	93 e0       	ldi	r25, 0x03	; 3
    145e:	90 83       	st	Z, r25
    1460:	05 c0       	rjmp	.+10     	; 0x146c <TickGameLogic+0x884>
					}
					else if(tempObj == OBJPlayer){
    1462:	94 30       	cpi	r25, 0x04	; 4
    1464:	19 f4       	brne	.+6      	; 0x146c <TickGameLogic+0x884>
						gameOver = 1;
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <gameOver>
					}
				}
				if(player1.bombPosX != 0) {
    146c:	88 23       	and	r24, r24
    146e:	09 f4       	brne	.+2      	; 0x1472 <TickGameLogic+0x88a>
    1470:	56 c0       	rjmp	.+172    	; 0x151e <TickGameLogic+0x936>
					tempObj = objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)];
    1472:	20 91 ae 04 	lds	r18, 0x04AE	; 0x8004ae <player1+0x5>
    1476:	e8 2f       	mov	r30, r24
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	af 01       	movw	r20, r30
    147c:	41 50       	subi	r20, 0x01	; 1
    147e:	51 09       	sbc	r21, r1
    1480:	62 2f       	mov	r22, r18
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	fa 01       	movw	r30, r20
    1486:	b7 e0       	ldi	r27, 0x07	; 7
    1488:	2b 9f       	mul	r18, r27
    148a:	e0 0d       	add	r30, r0
    148c:	f1 1d       	adc	r31, r1
    148e:	11 24       	eor	r1, r1
    1490:	eb 56       	subi	r30, 0x6B	; 107
    1492:	fb 4e       	sbci	r31, 0xEB	; 235
    1494:	90 81       	ld	r25, Z
					if(tempObj == OBJEmpty || tempObj == OBJWall){
    1496:	92 30       	cpi	r25, 0x02	; 2
    1498:	58 f5       	brcc	.+86     	; 0x14f0 <TickGameLogic+0x908>
						struct explodeNode tempExplo;
						tempExplo.posX = player1.bombPosX - 1;
						tempExplo.posY = player1.bombPosY;
						objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)] = OBJExplode;
    149a:	fb 01       	movw	r30, r22
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	e6 1b       	sub	r30, r22
    14aa:	f7 0b       	sbc	r31, r23
    14ac:	eb 56       	subi	r30, 0x6B	; 107
    14ae:	fb 4e       	sbci	r31, 0xEB	; 235
    14b0:	e4 0f       	add	r30, r20
    14b2:	f5 1f       	adc	r31, r21
    14b4:	38 e0       	ldi	r19, 0x08	; 8
    14b6:	30 83       	st	Z, r19
						explodeStack[explodeStackSize] = tempExplo;
    14b8:	30 91 94 14 	lds	r19, 0x1494	; 0x801494 <explodeStackSize>
    14bc:	e3 2f       	mov	r30, r19
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	e5 54       	subi	r30, 0x45	; 69
    14c6:	fb 4f       	sbci	r31, 0xFB	; 251
    14c8:	4f ef       	ldi	r20, 0xFF	; 255
    14ca:	48 0f       	add	r20, r24
    14cc:	40 83       	st	Z, r20
    14ce:	21 83       	std	Z+1, r18	; 0x01
						explodeStackSize = explodeStackSize + 1;
    14d0:	3f 5f       	subi	r19, 0xFF	; 255
    14d2:	30 93 94 14 	sts	0x1494, r19	; 0x801494 <explodeStackSize>
						if(tempObj == OBJWall) {
    14d6:	91 30       	cpi	r25, 0x01	; 1
    14d8:	11 f5       	brne	.+68     	; 0x151e <TickGameLogic+0x936>
							tempScore = tempScore + 1;
    14da:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <tempScore>
    14de:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <tempScore+0x1>
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	30 93 a1 04 	sts	0x04A1, r19	; 0x8004a1 <tempScore+0x1>
    14ea:	20 93 a0 04 	sts	0x04A0, r18	; 0x8004a0 <tempScore>
    14ee:	17 c0       	rjmp	.+46     	; 0x151e <TickGameLogic+0x936>
						}
					}
					else if(tempObj == OBJHidden){
    14f0:	92 30       	cpi	r25, 0x02	; 2
    14f2:	81 f4       	brne	.+32     	; 0x1514 <TickGameLogic+0x92c>
						objectLocMatrix[player1.bombPosY][(player1.bombPosX - 1)] = OBJDoor;
    14f4:	fb 01       	movw	r30, r22
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	e6 1b       	sub	r30, r22
    1504:	f7 0b       	sbc	r31, r23
    1506:	eb 56       	subi	r30, 0x6B	; 107
    1508:	fb 4e       	sbci	r31, 0xEB	; 235
    150a:	e4 0f       	add	r30, r20
    150c:	f5 1f       	adc	r31, r21
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	90 83       	st	Z, r25
    1512:	05 c0       	rjmp	.+10     	; 0x151e <TickGameLogic+0x936>
					}
					else if(tempObj == OBJPlayer){
    1514:	94 30       	cpi	r25, 0x04	; 4
    1516:	19 f4       	brne	.+6      	; 0x151e <TickGameLogic+0x936>
						gameOver = 1;
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <gameOver>
					}
				}
				if(player1.bombPosY != 0) {
    151e:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <player1+0x5>
    1522:	99 23       	and	r25, r25
    1524:	09 f4       	brne	.+2      	; 0x1528 <TickGameLogic+0x940>
    1526:	5b c0       	rjmp	.+182    	; 0x15de <TickGameLogic+0x9f6>
					tempObj = objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)];
    1528:	29 2f       	mov	r18, r25
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	21 50       	subi	r18, 0x01	; 1
    152e:	31 09       	sbc	r19, r1
    1530:	68 2f       	mov	r22, r24
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	f9 01       	movw	r30, r18
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	e2 1b       	sub	r30, r18
    1544:	f3 0b       	sbc	r31, r19
    1546:	eb 56       	subi	r30, 0x6B	; 107
    1548:	fb 4e       	sbci	r31, 0xEB	; 235
    154a:	e6 0f       	add	r30, r22
    154c:	f7 1f       	adc	r31, r23
    154e:	40 81       	ld	r20, Z
					if(tempObj == OBJEmpty || tempObj == OBJWall){
    1550:	42 30       	cpi	r20, 0x02	; 2
    1552:	58 f5       	brcc	.+86     	; 0x15aa <TickGameLogic+0x9c2>
						struct explodeNode tempExplo;
						tempExplo.posX = player1.bombPosX;
						tempExplo.posY = player1.bombPosY - 1;
						objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)] = OBJExplode;
    1554:	f9 01       	movw	r30, r18
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	ee 0f       	add	r30, r30
    155c:	ff 1f       	adc	r31, r31
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	e2 1b       	sub	r30, r18
    1564:	f3 0b       	sbc	r31, r19
    1566:	eb 56       	subi	r30, 0x6B	; 107
    1568:	fb 4e       	sbci	r31, 0xEB	; 235
    156a:	e6 0f       	add	r30, r22
    156c:	f7 1f       	adc	r31, r23
    156e:	28 e0       	ldi	r18, 0x08	; 8
    1570:	20 83       	st	Z, r18
						explodeStack[explodeStackSize] = tempExplo;
    1572:	20 91 94 14 	lds	r18, 0x1494	; 0x801494 <explodeStackSize>
    1576:	e2 2f       	mov	r30, r18
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	e5 54       	subi	r30, 0x45	; 69
    1580:	fb 4f       	sbci	r31, 0xFB	; 251
    1582:	80 83       	st	Z, r24
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	39 0f       	add	r19, r25
    1588:	31 83       	std	Z+1, r19	; 0x01
						explodeStackSize = explodeStackSize + 1;
    158a:	2f 5f       	subi	r18, 0xFF	; 255
    158c:	20 93 94 14 	sts	0x1494, r18	; 0x801494 <explodeStackSize>
						if(tempObj == OBJWall) {
    1590:	41 30       	cpi	r20, 0x01	; 1
    1592:	11 f5       	brne	.+68     	; 0x15d8 <TickGameLogic+0x9f0>
							tempScore = tempScore + 1;
    1594:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <tempScore>
    1598:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <tempScore+0x1>
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	30 93 a1 04 	sts	0x04A1, r19	; 0x8004a1 <tempScore+0x1>
    15a4:	20 93 a0 04 	sts	0x04A0, r18	; 0x8004a0 <tempScore>
    15a8:	17 c0       	rjmp	.+46     	; 0x15d8 <TickGameLogic+0x9f0>
						}
					}
					else if(tempObj == OBJHidden){
    15aa:	42 30       	cpi	r20, 0x02	; 2
    15ac:	81 f4       	brne	.+32     	; 0x15ce <TickGameLogic+0x9e6>
						objectLocMatrix[player1.bombPosY - 1][(player1.bombPosX)] = OBJDoor;
    15ae:	f9 01       	movw	r30, r18
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	ee 0f       	add	r30, r30
    15b6:	ff 1f       	adc	r31, r31
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	e2 1b       	sub	r30, r18
    15be:	f3 0b       	sbc	r31, r19
    15c0:	eb 56       	subi	r30, 0x6B	; 107
    15c2:	fb 4e       	sbci	r31, 0xEB	; 235
    15c4:	e6 0f       	add	r30, r22
    15c6:	f7 1f       	adc	r31, r23
    15c8:	23 e0       	ldi	r18, 0x03	; 3
    15ca:	20 83       	st	Z, r18
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <TickGameLogic+0x9f0>
					}
					else if(tempObj == OBJPlayer){
    15ce:	44 30       	cpi	r20, 0x04	; 4
    15d0:	19 f4       	brne	.+6      	; 0x15d8 <TickGameLogic+0x9f0>
						gameOver = 1;
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	20 93 b3 04 	sts	0x04B3, r18	; 0x8004b3 <gameOver>
					}
				}
				if(player1.bombPosY != 2) {
    15d8:	92 30       	cpi	r25, 0x02	; 2
    15da:	09 f4       	brne	.+2      	; 0x15de <TickGameLogic+0x9f6>
    15dc:	56 c0       	rjmp	.+172    	; 0x168a <TickGameLogic+0xaa2>
					tempObj = objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)];
    15de:	29 2f       	mov	r18, r25
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	2f 5f       	subi	r18, 0xFF	; 255
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	68 2f       	mov	r22, r24
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	f9 01       	movw	r30, r18
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	e2 1b       	sub	r30, r18
    15fa:	f3 0b       	sbc	r31, r19
    15fc:	eb 56       	subi	r30, 0x6B	; 107
    15fe:	fb 4e       	sbci	r31, 0xEB	; 235
    1600:	e6 0f       	add	r30, r22
    1602:	f7 1f       	adc	r31, r23
    1604:	40 81       	ld	r20, Z
					if(tempObj == OBJEmpty || tempObj == OBJWall){
    1606:	42 30       	cpi	r20, 0x02	; 2
    1608:	48 f5       	brcc	.+82     	; 0x165c <TickGameLogic+0xa74>
						struct explodeNode tempExplo;
						tempExplo.posX = player1.bombPosX;
						tempExplo.posY = player1.bombPosY + 1;
						objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)] = OBJExplode;
    160a:	f9 01       	movw	r30, r18
    160c:	ee 0f       	add	r30, r30
    160e:	ff 1f       	adc	r31, r31
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	e2 1b       	sub	r30, r18
    161a:	f3 0b       	sbc	r31, r19
    161c:	eb 56       	subi	r30, 0x6B	; 107
    161e:	fb 4e       	sbci	r31, 0xEB	; 235
    1620:	e6 0f       	add	r30, r22
    1622:	f7 1f       	adc	r31, r23
    1624:	28 e0       	ldi	r18, 0x08	; 8
    1626:	20 83       	st	Z, r18
						explodeStack[explodeStackSize] = tempExplo;
    1628:	20 91 94 14 	lds	r18, 0x1494	; 0x801494 <explodeStackSize>
    162c:	e2 2f       	mov	r30, r18
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	e5 54       	subi	r30, 0x45	; 69
    1636:	fb 4f       	sbci	r31, 0xFB	; 251
    1638:	80 83       	st	Z, r24
    163a:	9f 5f       	subi	r25, 0xFF	; 255
    163c:	91 83       	std	Z+1, r25	; 0x01
						explodeStackSize = explodeStackSize + 1;
    163e:	2f 5f       	subi	r18, 0xFF	; 255
    1640:	20 93 94 14 	sts	0x1494, r18	; 0x801494 <explodeStackSize>
						if(tempObj == OBJWall) {
    1644:	41 30       	cpi	r20, 0x01	; 1
    1646:	09 f5       	brne	.+66     	; 0x168a <TickGameLogic+0xaa2>
							tempScore = tempScore + 1;
    1648:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <tempScore>
    164c:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <tempScore+0x1>
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <tempScore+0x1>
    1656:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <tempScore>
    165a:	17 c0       	rjmp	.+46     	; 0x168a <TickGameLogic+0xaa2>
						}
					}
					else if(tempObj == OBJHidden){
    165c:	42 30       	cpi	r20, 0x02	; 2
    165e:	81 f4       	brne	.+32     	; 0x1680 <TickGameLogic+0xa98>
						objectLocMatrix[player1.bombPosY + 1][(player1.bombPosX)] = OBJDoor;
    1660:	f9 01       	movw	r30, r18
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	e2 1b       	sub	r30, r18
    1670:	f3 0b       	sbc	r31, r19
    1672:	eb 56       	subi	r30, 0x6B	; 107
    1674:	fb 4e       	sbci	r31, 0xEB	; 235
    1676:	e6 0f       	add	r30, r22
    1678:	f7 1f       	adc	r31, r23
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	80 83       	st	Z, r24
    167e:	05 c0       	rjmp	.+10     	; 0x168a <TickGameLogic+0xaa2>
					}
					else if(tempObj == OBJPlayer){
    1680:	44 30       	cpi	r20, 0x04	; 4
    1682:	19 f4       	brne	.+6      	; 0x168a <TickGameLogic+0xaa2>
						gameOver = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <gameOver>
					}
				}
				player1.bombCount = 0;
    168a:	e9 ea       	ldi	r30, 0xA9	; 169
    168c:	f4 e0       	ldi	r31, 0x04	; 4
    168e:	17 82       	std	Z+7, r1	; 0x07
				player1.isBombPlaced = 0;
    1690:	16 82       	std	Z+6, r1	; 0x06
			}
			
			transferObjToDis();
    1692:	13 82       	std	Z+3, r1	; 0x03
    1694:	e9 d8       	rcall	.-3630   	; 0x868 <transferObjToDis>
			
			displayScore[2] = (tempScore % 10) + '0';
    1696:	c0 91 a0 04 	lds	r28, 0x04A0	; 0x8004a0 <tempScore>
    169a:	d0 91 a1 04 	lds	r29, 0x04A1	; 0x8004a1 <tempScore+0x1>
    169e:	e2 ea       	ldi	r30, 0xA2	; 162
    16a0:	f4 e0       	ldi	r31, 0x04	; 4
    16a2:	9e 01       	movw	r18, r28
    16a4:	ad ec       	ldi	r26, 0xCD	; 205
    16a6:	bc ec       	ldi	r27, 0xCC	; 204
    16a8:	24 d4       	rcall	.+2120   	; 0x1ef2 <__umulhisi3>
    16aa:	ac 01       	movw	r20, r24
    16ac:	56 95       	lsr	r21
    16ae:	47 95       	ror	r20
    16b0:	56 95       	lsr	r21
    16b2:	47 95       	ror	r20
    16b4:	56 95       	lsr	r21
    16b6:	47 95       	ror	r20
    16b8:	9a 01       	movw	r18, r20
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	ca 01       	movw	r24, r20
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	82 0f       	add	r24, r18
    16ce:	93 1f       	adc	r25, r19
    16d0:	9e 01       	movw	r18, r28
    16d2:	28 1b       	sub	r18, r24
    16d4:	39 0b       	sbc	r19, r25
    16d6:	c9 01       	movw	r24, r18
    16d8:	80 5d       	subi	r24, 0xD0	; 208
			displayScore[1] = ((tempScore / 10) % 10) + '0';
    16da:	82 83       	std	Z+2, r24	; 0x02
    16dc:	9a 01       	movw	r18, r20
    16de:	09 d4       	rcall	.+2066   	; 0x1ef2 <__umulhisi3>
    16e0:	96 95       	lsr	r25
    16e2:	87 95       	ror	r24
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	96 95       	lsr	r25
    16ea:	87 95       	ror	r24
    16ec:	9c 01       	movw	r18, r24
    16ee:	22 0f       	add	r18, r18
    16f0:	33 1f       	adc	r19, r19
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	82 0f       	add	r24, r18
    1700:	93 1f       	adc	r25, r19
    1702:	48 1b       	sub	r20, r24
    1704:	59 0b       	sbc	r21, r25
    1706:	40 5d       	subi	r20, 0xD0	; 208
    1708:	41 83       	std	Z+1, r20	; 0x01
			displayScore[0] = ((tempScore / 100) % 10) + '0';
    170a:	9e 01       	movw	r18, r28
    170c:	36 95       	lsr	r19
    170e:	27 95       	ror	r18
    1710:	36 95       	lsr	r19
    1712:	27 95       	ror	r18
    1714:	ab e7       	ldi	r26, 0x7B	; 123
    1716:	b4 e1       	ldi	r27, 0x14	; 20
    1718:	ec d3       	rcall	.+2008   	; 0x1ef2 <__umulhisi3>
    171a:	ac 01       	movw	r20, r24
    171c:	56 95       	lsr	r21
    171e:	47 95       	ror	r20
    1720:	9a 01       	movw	r18, r20
    1722:	ad ec       	ldi	r26, 0xCD	; 205
    1724:	bc ec       	ldi	r27, 0xCC	; 204
    1726:	e5 d3       	rcall	.+1994   	; 0x1ef2 <__umulhisi3>
    1728:	96 95       	lsr	r25
    172a:	87 95       	ror	r24
    172c:	96 95       	lsr	r25
    172e:	87 95       	ror	r24
    1730:	96 95       	lsr	r25
    1732:	87 95       	ror	r24
    1734:	9c 01       	movw	r18, r24
    1736:	22 0f       	add	r18, r18
    1738:	33 1f       	adc	r19, r19
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	82 0f       	add	r24, r18
    1748:	93 1f       	adc	r25, r19
    174a:	48 1b       	sub	r20, r24
    174c:	59 0b       	sbc	r21, r25
    174e:	40 5d       	subi	r20, 0xD0	; 208
    1750:	40 83       	st	Z, r20
			if(gameTimerCountSecond >= gameTimerCountSecondPeriod) {
    1752:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <gameTimerCountSecond>
    1756:	8a 30       	cpi	r24, 0x0A	; 10
    1758:	88 f0       	brcs	.+34     	; 0x177c <TickGameLogic+0xb94>
				gameTimer = gameTimer - 1;
    175a:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <gameTimer>
    175e:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <gameTimer+0x1>
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <gameTimer+0x1>
    1768:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <gameTimer>
				if(gameTimer == 0) {
    176c:	89 2b       	or	r24, r25
    176e:	19 f4       	brne	.+6      	; 0x1776 <TickGameLogic+0xb8e>
					gameOver = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <gameOver>
				}
				gameTimerCountSecond = 0;
    1776:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <gameTimerCountSecond>
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <TickGameLogic+0xb9a>
			}
			else {
				gameTimerCountSecond = gameTimerCountSecond + 1;
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <gameTimerCountSecond>
			}
			displayGameTimer[2] = (gameTimer % 10) + '0';
    1782:	c0 91 cf 04 	lds	r28, 0x04CF	; 0x8004cf <gameTimer>
    1786:	d0 91 d0 04 	lds	r29, 0x04D0	; 0x8004d0 <gameTimer+0x1>
    178a:	e4 eb       	ldi	r30, 0xB4	; 180
    178c:	f4 e0       	ldi	r31, 0x04	; 4
    178e:	9e 01       	movw	r18, r28
    1790:	ad ec       	ldi	r26, 0xCD	; 205
    1792:	bc ec       	ldi	r27, 0xCC	; 204
    1794:	ae d3       	rcall	.+1884   	; 0x1ef2 <__umulhisi3>
    1796:	ac 01       	movw	r20, r24
    1798:	56 95       	lsr	r21
    179a:	47 95       	ror	r20
    179c:	56 95       	lsr	r21
    179e:	47 95       	ror	r20
    17a0:	56 95       	lsr	r21
    17a2:	47 95       	ror	r20
    17a4:	9a 01       	movw	r18, r20
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	ca 01       	movw	r24, r20
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	82 0f       	add	r24, r18
    17ba:	93 1f       	adc	r25, r19
    17bc:	de 01       	movw	r26, r28
    17be:	a8 1b       	sub	r26, r24
    17c0:	b9 0b       	sbc	r27, r25
    17c2:	cd 01       	movw	r24, r26
    17c4:	80 5d       	subi	r24, 0xD0	; 208
			displayGameTimer[1] = ((gameTimer / 10) % 10) + '0';
    17c6:	82 83       	std	Z+2, r24	; 0x02
    17c8:	9a 01       	movw	r18, r20
    17ca:	ad ec       	ldi	r26, 0xCD	; 205
    17cc:	bc ec       	ldi	r27, 0xCC	; 204
    17ce:	91 d3       	rcall	.+1826   	; 0x1ef2 <__umulhisi3>
    17d0:	96 95       	lsr	r25
    17d2:	87 95       	ror	r24
    17d4:	96 95       	lsr	r25
    17d6:	87 95       	ror	r24
    17d8:	96 95       	lsr	r25
    17da:	87 95       	ror	r24
    17dc:	9c 01       	movw	r18, r24
    17de:	22 0f       	add	r18, r18
    17e0:	33 1f       	adc	r19, r19
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	82 0f       	add	r24, r18
    17f0:	93 1f       	adc	r25, r19
    17f2:	48 1b       	sub	r20, r24
    17f4:	59 0b       	sbc	r21, r25
    17f6:	40 5d       	subi	r20, 0xD0	; 208
			displayGameTimer[0] = ((gameTimer / 100) % 10) + '0';
    17f8:	41 83       	std	Z+1, r20	; 0x01
    17fa:	9e 01       	movw	r18, r28
    17fc:	36 95       	lsr	r19
    17fe:	27 95       	ror	r18
    1800:	36 95       	lsr	r19
    1802:	27 95       	ror	r18
    1804:	ab e7       	ldi	r26, 0x7B	; 123
    1806:	b4 e1       	ldi	r27, 0x14	; 20
    1808:	74 d3       	rcall	.+1768   	; 0x1ef2 <__umulhisi3>
    180a:	ac 01       	movw	r20, r24
    180c:	56 95       	lsr	r21
    180e:	47 95       	ror	r20
    1810:	9a 01       	movw	r18, r20
    1812:	ad ec       	ldi	r26, 0xCD	; 205
    1814:	bc ec       	ldi	r27, 0xCC	; 204
    1816:	6d d3       	rcall	.+1754   	; 0x1ef2 <__umulhisi3>
    1818:	96 95       	lsr	r25
    181a:	87 95       	ror	r24
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	96 95       	lsr	r25
    1822:	87 95       	ror	r24
    1824:	9c 01       	movw	r18, r24
    1826:	22 0f       	add	r18, r18
    1828:	33 1f       	adc	r19, r19
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	82 0f       	add	r24, r18
    1838:	93 1f       	adc	r25, r19
    183a:	48 1b       	sub	r20, r24
    183c:	59 0b       	sbc	r21, r25
    183e:	40 5d       	subi	r20, 0xD0	; 208
    1840:	40 83       	st	Z, r20
			
			
			break;
    1842:	84 e0       	ldi	r24, 0x04	; 4
    1844:	1b c0       	rjmp	.+54     	; 0x187c <TickGameLogic+0xc94>
			
			case GLogicGameOver:
			currentGameState = GLogicGameOver;
    1846:	85 e0       	ldi	r24, 0x05	; 5
    1848:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			if(highScore < tempScore) {
    184c:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <tempScore>
    1850:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <tempScore+0x1>
    1854:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <highScore>
    1858:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <highScore+0x1>
    185c:	28 17       	cp	r18, r24
    185e:	39 07       	cpc	r19, r25
    1860:	20 f4       	brcc	.+8      	; 0x186a <TickGameLogic+0xc82>
				highScore = tempScore;
    1862:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <highScore+0x1>
    1866:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <highScore>
			}
			menuInputDelayCount = 0;
    186a:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <menuInputDelayCount+0x1>
    186e:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <menuInputDelayCount>
			break;
    1872:	85 e0       	ldi	r24, 0x05	; 5
    1874:	03 c0       	rjmp	.+6      	; 0x187c <TickGameLogic+0xc94>
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	01 c0       	rjmp	.+2      	; 0x187c <TickGameLogic+0xc94>
			state = GLogicMenu;
		}
		break;
		
		default:
		state = GLogicStart;
    187a:	80 e0       	ldi	r24, 0x00	; 0
			
			default:
			break;
	}
	return state;
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <matrixToDisplay>:

void matrixToDisplay() {
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	0f 2e       	mov	r0, r31
    1894:	f4 ed       	ldi	r31, 0xD4	; 212
    1896:	ef 2e       	mov	r14, r31
    1898:	f4 e0       	ldi	r31, 0x04	; 4
    189a:	ff 2e       	mov	r15, r31
    189c:	f0 2d       	mov	r31, r0
	for(unsigned char y = 0; y < 48;y++) {
    189e:	d0 e0       	ldi	r29, 0x00	; 0
    18a0:	10 c0       	rjmp	.+32     	; 0x18c2 <matrixToDisplay+0x40>
		for(unsigned char x = 0; x < 84; x++) {
			nokia_lcd_set_pixel(x,y, displayMatrix[y][x]);
    18a2:	f8 01       	movw	r30, r16
    18a4:	41 91       	ld	r20, Z+
    18a6:	8f 01       	movw	r16, r30
    18a8:	6d 2f       	mov	r22, r29
    18aa:	8c 2f       	mov	r24, r28
    18ac:	0e 94 34 03 	call	0x668	; 0x668 <nokia_lcd_set_pixel>
	return state;
}

void matrixToDisplay() {
	for(unsigned char y = 0; y < 48;y++) {
		for(unsigned char x = 0; x < 84; x++) {
    18b0:	cf 5f       	subi	r28, 0xFF	; 255
    18b2:	c4 35       	cpi	r28, 0x54	; 84
    18b4:	b1 f7       	brne	.-20     	; 0x18a2 <matrixToDisplay+0x20>
	}
	return state;
}

void matrixToDisplay() {
	for(unsigned char y = 0; y < 48;y++) {
    18b6:	df 5f       	subi	r29, 0xFF	; 255
    18b8:	f4 e5       	ldi	r31, 0x54	; 84
    18ba:	ef 0e       	add	r14, r31
    18bc:	f1 1c       	adc	r15, r1
    18be:	d0 33       	cpi	r29, 0x30	; 48
    18c0:	19 f0       	breq	.+6      	; 0x18c8 <matrixToDisplay+0x46>
			break;
	}
	return state;
}

void matrixToDisplay() {
    18c2:	87 01       	movw	r16, r14
    18c4:	c0 e0       	ldi	r28, 0x00	; 0
    18c6:	ed cf       	rjmp	.-38     	; 0x18a2 <matrixToDisplay+0x20>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    18c8:	0f 2e       	mov	r0, r31
    18ca:	f8 e9       	ldi	r31, 0x98	; 152
    18cc:	ef 2e       	mov	r14, r31
    18ce:	f4 e0       	ldi	r31, 0x04	; 4
    18d0:	ff 2e       	mov	r15, r31
    18d2:	f0 2d       	mov	r31, r0
    18d4:	f7 01       	movw	r30, r14
    18d6:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    18d8:	c9 e9       	ldi	r28, 0x99	; 153
    18da:	d4 e0       	ldi	r29, 0x04	; 4
    18dc:	18 e2       	ldi	r17, 0x28	; 40
    18de:	18 83       	st	Y, r17
		for(unsigned char x = 0; x < 84; x++) {
			nokia_lcd_set_pixel(x,y, displayMatrix[y][x]);
		}
	}
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_char('S', 1);
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	83 e5       	ldi	r24, 0x53	; 83
    18e4:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    18e8:	8a e0       	ldi	r24, 0x0A	; 10
    18ea:	f7 01       	movw	r30, r14
    18ec:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    18ee:	18 83       	st	Y, r17
	nokia_lcd_set_cursor(10,40);
	nokia_lcd_write_char(displayScore[0], 1);
    18f0:	0f 2e       	mov	r0, r31
    18f2:	f2 ea       	ldi	r31, 0xA2	; 162
    18f4:	cf 2e       	mov	r12, r31
    18f6:	f4 e0       	ldi	r31, 0x04	; 4
    18f8:	df 2e       	mov	r13, r31
    18fa:	f0 2d       	mov	r31, r0
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	f6 01       	movw	r30, r12
    1900:	80 81       	ld	r24, Z
    1902:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1906:	8f e0       	ldi	r24, 0x0F	; 15
    1908:	f7 01       	movw	r30, r14
    190a:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    190c:	18 83       	st	Y, r17
	nokia_lcd_set_cursor(15,40);
	nokia_lcd_write_char(displayScore[1], 1);
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	f6 01       	movw	r30, r12
    1912:	81 81       	ldd	r24, Z+1	; 0x01
    1914:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1918:	84 e1       	ldi	r24, 0x14	; 20
    191a:	f7 01       	movw	r30, r14
    191c:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    191e:	18 83       	st	Y, r17
	nokia_lcd_set_cursor(20,40);
	nokia_lcd_write_char(displayScore[2], 1);
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	f6 01       	movw	r30, r12
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    192a:	87 e3       	ldi	r24, 0x37	; 55
    192c:	f7 01       	movw	r30, r14
    192e:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1930:	18 83       	st	Y, r17
	
	nokia_lcd_set_cursor(55,40);
	nokia_lcd_write_char('T', 1);
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	84 e5       	ldi	r24, 0x54	; 84
    1936:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    193a:	81 e4       	ldi	r24, 0x41	; 65
    193c:	f7 01       	movw	r30, r14
    193e:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1940:	18 83       	st	Y, r17
	nokia_lcd_set_cursor(65,40);
	nokia_lcd_write_char(displayGameTimer[0], 1);
    1942:	0f 2e       	mov	r0, r31
    1944:	f4 eb       	ldi	r31, 0xB4	; 180
    1946:	cf 2e       	mov	r12, r31
    1948:	f4 e0       	ldi	r31, 0x04	; 4
    194a:	df 2e       	mov	r13, r31
    194c:	f0 2d       	mov	r31, r0
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	f6 01       	movw	r30, r12
    1952:	80 81       	ld	r24, Z
    1954:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1958:	86 e4       	ldi	r24, 0x46	; 70
    195a:	f7 01       	movw	r30, r14
    195c:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    195e:	18 83       	st	Y, r17
	nokia_lcd_set_cursor(70,40);
	nokia_lcd_write_char(displayGameTimer[1], 1);
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	f6 01       	movw	r30, r12
    1964:	81 81       	ldd	r24, Z+1	; 0x01
    1966:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    196a:	8b e4       	ldi	r24, 0x4B	; 75
    196c:	f7 01       	movw	r30, r14
    196e:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1970:	18 83       	st	Y, r17
	nokia_lcd_set_cursor(75,40);
	nokia_lcd_write_char(displayGameTimer[2], 1);
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	f6 01       	movw	r30, r12
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	08 95       	ret

0000198e <menuDisplay>:

const char MENUMESSAGE1[] = "R:SAVE L:LOAD";
const char MENUMESSAGE2[] = "SEL: CLEAR";
const char RUMBLEMESSAGE1[] = "RUMBLING!";

void menuDisplay() {
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
	if(rumbleMes != 0) {
    199c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <rumbleMes>
    19a0:	88 23       	and	r24, r24
    19a2:	51 f0       	breq	.+20     	; 0x19b8 <menuDisplay+0x2a>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    19a4:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    19a8:	8a e0       	ldi	r24, 0x0A	; 10
    19aa:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <nokia_lcd+0x1f9>
		nokia_lcd_set_cursor(0,10);
		nokia_lcd_write_string(RUMBLEMESSAGE1,1);
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	88 e3       	ldi	r24, 0x38	; 56
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    19b8:	08 e9       	ldi	r16, 0x98	; 152
    19ba:	14 e0       	ldi	r17, 0x04	; 4
    19bc:	f8 01       	movw	r30, r16
    19be:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    19c0:	c9 e9       	ldi	r28, 0x99	; 153
    19c2:	d4 e0       	ldi	r29, 0x04	; 4
    19c4:	84 e1       	ldi	r24, 0x14	; 20
    19c6:	88 83       	st	Y, r24
	}
	nokia_lcd_set_cursor(0,20);
	nokia_lcd_write_string(MENUMESSAGE1,1);
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	8d e4       	ldi	r24, 0x4D	; 77
    19cc:	92 e0       	ldi	r25, 0x02	; 2
    19ce:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    19d2:	f8 01       	movw	r30, r16
    19d4:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    19d6:	0f 2e       	mov	r0, r31
    19d8:	fe e1       	ldi	r31, 0x1E	; 30
    19da:	df 2e       	mov	r13, r31
    19dc:	f0 2d       	mov	r31, r0
    19de:	d8 82       	st	Y, r13
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(MENUMESSAGE2,1);
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	82 e4       	ldi	r24, 0x42	; 66
    19e4:	92 e0       	ldi	r25, 0x02	; 2
    19e6:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    19ea:	f8 01       	movw	r30, r16
    19ec:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    19ee:	0f 2e       	mov	r0, r31
    19f0:	f8 e2       	ldi	r31, 0x28	; 40
    19f2:	ff 2e       	mov	r15, r31
    19f4:	f0 2d       	mov	r31, r0
    19f6:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_char('H', 1);
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	88 e4       	ldi	r24, 0x48	; 72
    19fc:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a00:	85 e0       	ldi	r24, 0x05	; 5
    1a02:	f8 01       	movw	r30, r16
    1a04:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1a06:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(5,40);
	nokia_lcd_write_char('i', 1);
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	89 e6       	ldi	r24, 0x69	; 105
    1a0c:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a10:	8a e0       	ldi	r24, 0x0A	; 10
    1a12:	f8 01       	movw	r30, r16
    1a14:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1a16:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(10,40);
	nokia_lcd_write_char('g', 1);
    1a18:	61 e0       	ldi	r22, 0x01	; 1
    1a1a:	87 e6       	ldi	r24, 0x67	; 103
    1a1c:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a20:	8f e0       	ldi	r24, 0x0F	; 15
    1a22:	f8 01       	movw	r30, r16
    1a24:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1a26:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(15,40);
	nokia_lcd_write_char('h', 1);
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	88 e6       	ldi	r24, 0x68	; 104
    1a2c:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a30:	89 e1       	ldi	r24, 0x19	; 25
    1a32:	f8 01       	movw	r30, r16
    1a34:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1a36:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(25,40);
	nokia_lcd_write_char('S', 1);
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	83 e5       	ldi	r24, 0x53	; 83
    1a3c:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a40:	f8 01       	movw	r30, r16
    1a42:	d0 82       	st	Z, r13
	nokia_lcd.cursor_y = y;
    1a44:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(30,40);
	nokia_lcd_write_char('c', 1);
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	83 e6       	ldi	r24, 0x63	; 99
    1a4a:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a4e:	83 e2       	ldi	r24, 0x23	; 35
    1a50:	f8 01       	movw	r30, r16
    1a52:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1a54:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(35,40);
	nokia_lcd_write_char('o', 1);
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	8f e6       	ldi	r24, 0x6F	; 111
    1a5a:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a5e:	f8 01       	movw	r30, r16
    1a60:	f0 82       	st	Z, r15
	nokia_lcd.cursor_y = y;
    1a62:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,40);
	nokia_lcd_write_char('r', 1);
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	82 e7       	ldi	r24, 0x72	; 114
    1a68:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a6c:	8d e2       	ldi	r24, 0x2D	; 45
    1a6e:	f8 01       	movw	r30, r16
    1a70:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1a72:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,40);
	nokia_lcd_write_char('e', 1);
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	85 e6       	ldi	r24, 0x65	; 101
    1a78:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a7c:	82 e3       	ldi	r24, 0x32	; 50
    1a7e:	f8 01       	movw	r30, r16
    1a80:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1a82:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,40);
	nokia_lcd_write_char(':', 1);
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	8a e3       	ldi	r24, 0x3A	; 58
    1a88:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1a8c:	8c e3       	ldi	r24, 0x3C	; 60
    1a8e:	f8 01       	movw	r30, r16
    1a90:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1a92:	f8 82       	st	Y, r15
	
	nokia_lcd_set_cursor(60,40);
	nokia_lcd_write_char(displayScore[0], 1);
    1a94:	0f 2e       	mov	r0, r31
    1a96:	f2 ea       	ldi	r31, 0xA2	; 162
    1a98:	cf 2e       	mov	r12, r31
    1a9a:	f4 e0       	ldi	r31, 0x04	; 4
    1a9c:	df 2e       	mov	r13, r31
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	80 81       	ld	r24, Z
    1aa6:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1aaa:	81 e4       	ldi	r24, 0x41	; 65
    1aac:	f8 01       	movw	r30, r16
    1aae:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1ab0:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(65,40);
	nokia_lcd_write_char(displayScore[1], 1);
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	f6 01       	movw	r30, r12
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1abc:	86 e4       	ldi	r24, 0x46	; 70
    1abe:	f8 01       	movw	r30, r16
    1ac0:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1ac2:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(70,40);
	nokia_lcd_write_char(displayScore[2], 1);
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	f6 01       	movw	r30, r12
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
}
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	ff 90       	pop	r15
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	08 95       	ret

00001ade <levelBeatDisplay>:

const char LEVELMESSAGE1[] = "Level";
const char LEVELMESSAGE2[] = "Completed";
const char LEVELMESSAGE3[] = "Press Start";

void levelBeatDisplay() {
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1ae8:	08 e9       	ldi	r16, 0x98	; 152
    1aea:	14 e0       	ldi	r17, 0x04	; 4
    1aec:	f8 01       	movw	r30, r16
    1aee:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1af0:	c9 e9       	ldi	r28, 0x99	; 153
    1af2:	d4 e0       	ldi	r29, 0x04	; 4
    1af4:	0f 2e       	mov	r0, r31
    1af6:	fa e0       	ldi	r31, 0x0A	; 10
    1af8:	ff 2e       	mov	r15, r31
    1afa:	f0 2d       	mov	r31, r0
    1afc:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,10);
	nokia_lcd_write_string(LEVELMESSAGE1,2);
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	82 e3       	ldi	r24, 0x32	; 50
    1b02:	92 e0       	ldi	r25, 0x02	; 2
    1b04:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1b08:	86 e4       	ldi	r24, 0x46	; 70
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1b0e:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(70,10);
	nokia_lcd_write_char('0'+levelCount, 2);
    1b10:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <levelCount>
    1b14:	62 e0       	ldi	r22, 0x02	; 2
    1b16:	80 5d       	subi	r24, 0xD0	; 208
    1b18:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1b20:	8e e1       	ldi	r24, 0x1E	; 30
    1b22:	88 83       	st	Y, r24
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(LEVELMESSAGE2,1);
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	88 e2       	ldi	r24, 0x28	; 40
    1b28:	92 e0       	ldi	r25, 0x02	; 2
    1b2a:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1b2e:	f8 01       	movw	r30, r16
    1b30:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1b32:	88 e2       	ldi	r24, 0x28	; 40
    1b34:	88 83       	st	Y, r24
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(LEVELMESSAGE3,1);
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	8c e1       	ldi	r24, 0x1C	; 28
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
}
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	08 95       	ret

00001b4c <gameOverDisplay>:

const char GAMEOVERMESSAGE1[] = "GAMEOVER";
const char GAMEOVERMESSAGE2[] = "Score:";
const char GAMEOVERMESSAGE3[] = "Press Start";
void gameOverDisplay() {
    1b4c:	cf 92       	push	r12
    1b4e:	df 92       	push	r13
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1b5c:	08 e9       	ldi	r16, 0x98	; 152
    1b5e:	14 e0       	ldi	r17, 0x04	; 4
    1b60:	f8 01       	movw	r30, r16
    1b62:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1b64:	c9 e9       	ldi	r28, 0x99	; 153
    1b66:	d4 e0       	ldi	r29, 0x04	; 4
    1b68:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_string(GAMEOVERMESSAGE1,2);
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	83 e1       	ldi	r24, 0x13	; 19
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1b74:	f8 01       	movw	r30, r16
    1b76:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1b78:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_char('G', 2);
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	87 e4       	ldi	r24, 0x47	; 71
    1b7e:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1b82:	f8 01       	movw	r30, r16
    1b84:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1b86:	0f 2e       	mov	r0, r31
    1b88:	fe e1       	ldi	r31, 0x1E	; 30
    1b8a:	ff 2e       	mov	r15, r31
    1b8c:	f0 2d       	mov	r31, r0
    1b8e:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(GAMEOVERMESSAGE2,1);
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	8c e0       	ldi	r24, 0x0C	; 12
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1b9a:	0f 2e       	mov	r0, r31
    1b9c:	f8 e2       	ldi	r31, 0x28	; 40
    1b9e:	ef 2e       	mov	r14, r31
    1ba0:	f0 2d       	mov	r31, r0
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	e0 82       	st	Z, r14
	nokia_lcd.cursor_y = y;
    1ba6:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,30);
	nokia_lcd_write_char(displayScore[0], 1);
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	f2 ea       	ldi	r31, 0xA2	; 162
    1bac:	cf 2e       	mov	r12, r31
    1bae:	f4 e0       	ldi	r31, 0x04	; 4
    1bb0:	df 2e       	mov	r13, r31
    1bb2:	f0 2d       	mov	r31, r0
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	f6 01       	movw	r30, r12
    1bb8:	80 81       	ld	r24, Z
    1bba:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1bbe:	8d e2       	ldi	r24, 0x2D	; 45
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1bc4:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,30);
	nokia_lcd_write_char(displayScore[1], 1);
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	f6 01       	movw	r30, r12
    1bca:	81 81       	ldd	r24, Z+1	; 0x01
    1bcc:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1bd0:	82 e3       	ldi	r24, 0x32	; 50
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1bd6:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,30);
	nokia_lcd_write_char(displayScore[2], 1);
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	f6 01       	movw	r30, r12
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1be2:	f8 01       	movw	r30, r16
    1be4:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1be6:	e8 82       	st	Y, r14
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(GAMEOVERMESSAGE3,1);
    1be8:	61 e0       	ldi	r22, 0x01	; 1
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	92 e0       	ldi	r25, 0x02	; 2
    1bee:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
}
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	08 95       	ret

00001c04 <winDisplay>:

const char WINMESSAGE1[] = "YOU WIN";
void winDisplay() {
    1c04:	cf 92       	push	r12
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1c14:	08 e9       	ldi	r16, 0x98	; 152
    1c16:	14 e0       	ldi	r17, 0x04	; 4
    1c18:	f8 01       	movw	r30, r16
    1c1a:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1c1c:	c9 e9       	ldi	r28, 0x99	; 153
    1c1e:	d4 e0       	ldi	r29, 0x04	; 4
    1c20:	18 82       	st	Y, r1
	nokia_lcd_set_cursor(0,0);
	nokia_lcd_write_string(WINMESSAGE1,2);
    1c22:	62 e0       	ldi	r22, 0x02	; 2
    1c24:	88 ef       	ldi	r24, 0xF8	; 248
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1c30:	0f 2e       	mov	r0, r31
    1c32:	fe e1       	ldi	r31, 0x1E	; 30
    1c34:	ff 2e       	mov	r15, r31
    1c36:	f0 2d       	mov	r31, r0
    1c38:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(0,30);
	nokia_lcd_write_string(GAMEOVERMESSAGE2,1);
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	8c e0       	ldi	r24, 0x0C	; 12
    1c3e:	92 e0       	ldi	r25, 0x02	; 2
    1c40:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1c44:	0f 2e       	mov	r0, r31
    1c46:	f8 e2       	ldi	r31, 0x28	; 40
    1c48:	ef 2e       	mov	r14, r31
    1c4a:	f0 2d       	mov	r31, r0
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	e0 82       	st	Z, r14
	nokia_lcd.cursor_y = y;
    1c50:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(40,30);
	nokia_lcd_write_char(displayScore[0], 1);
    1c52:	0f 2e       	mov	r0, r31
    1c54:	f2 ea       	ldi	r31, 0xA2	; 162
    1c56:	cf 2e       	mov	r12, r31
    1c58:	f4 e0       	ldi	r31, 0x04	; 4
    1c5a:	df 2e       	mov	r13, r31
    1c5c:	f0 2d       	mov	r31, r0
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	f6 01       	movw	r30, r12
    1c62:	80 81       	ld	r24, Z
    1c64:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1c68:	8d e2       	ldi	r24, 0x2D	; 45
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1c6e:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(45,30);
	nokia_lcd_write_char(displayScore[1], 1);
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	f6 01       	movw	r30, r12
    1c74:	81 81       	ldd	r24, Z+1	; 0x01
    1c76:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1c7a:	82 e3       	ldi	r24, 0x32	; 50
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 83       	st	Z, r24
	nokia_lcd.cursor_y = y;
    1c80:	f8 82       	st	Y, r15
	nokia_lcd_set_cursor(50,30);
	nokia_lcd_write_char(displayScore[2], 1);
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	f6 01       	movw	r30, r12
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	0e 94 5f 03 	call	0x6be	; 0x6be <nokia_lcd_write_char>
		nokia_lcd_write_char(*str++, scale);
}

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	10 82       	st	Z, r1
	nokia_lcd.cursor_y = y;
    1c90:	e8 82       	st	Y, r14
	nokia_lcd_set_cursor(0,40);
	nokia_lcd_write_string(GAMEOVERMESSAGE3,1);
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	0e 94 0b 04 	call	0x816	; 0x816 <nokia_lcd_write_string>
}
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	cf 90       	pop	r12
    1cac:	08 95       	ret

00001cae <TickLCDDisplay>:
enum LCDDisplayState{LCDDisplayStart, LCDDisplayInit,LCDDisplayMenu, LCDDisplayRunning, LCDDisplayGameOver,LCDDisplayNextLevel, LCDDisplayWin};
	
unsigned char TickLCDDisplay (unsigned char state) {
	switch(state) {
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	87 30       	cpi	r24, 0x07	; 7
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	20 f4       	brcc	.+8      	; 0x1cbe <TickLCDDisplay+0x10>
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	e7 5a       	subi	r30, 0xA7	; 167
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	11 c1       	rjmp	.+546    	; 0x1ee0 <__tablejump2__>
			state = LCDDisplayMenu;
		}
		break;
		
		default:
		state = LCDDisplayStart;
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	08 95       	ret
		case LCDDisplayInit:
		state = LCDDisplayMenu;
		break;
		
		case LCDDisplayMenu:
		if(currentGameState == GLogicPlaying) {
    1cc2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	d1 f4       	brne	.+52     	; 0x1cfe <TickLCDDisplay+0x50>
    1cca:	2e c0       	rjmp	.+92     	; 0x1d28 <TickLCDDisplay+0x7a>
			state = LCDDisplayRunning;
		}
		break;
		
		case LCDDisplayRunning:
		if(currentGameState == GLogicMenu) {
    1ccc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	a9 f0       	breq	.+42     	; 0x1cfe <TickLCDDisplay+0x50>
			state = LCDDisplayMenu;
		}
		else if(currentGameState == GLogicGameOver) {
    1cd4:	85 30       	cpi	r24, 0x05	; 5
    1cd6:	d1 f0       	breq	.+52     	; 0x1d0c <TickLCDDisplay+0x5e>
			state = LCDDisplayGameOver;
		}
		else if(currentGameState == GLogicLevelComplete) {
    1cd8:	86 30       	cpi	r24, 0x06	; 6
    1cda:	69 f1       	breq	.+90     	; 0x1d36 <TickLCDDisplay+0x88>
			state = LCDDisplayNextLevel;
		}
		else if(currentGameState == GLogicWin) {
    1cdc:	89 30       	cpi	r24, 0x09	; 9
    1cde:	21 f5       	brne	.+72     	; 0x1d28 <TickLCDDisplay+0x7a>
    1ce0:	1c c0       	rjmp	.+56     	; 0x1d1a <TickLCDDisplay+0x6c>
			state = LCDDisplayWin;
		}
		break;
		
		case LCDDisplayWin:
		if(currentGameState == GLogicMenu) {
    1ce2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1ce6:	82 30       	cpi	r24, 0x02	; 2
    1ce8:	c1 f4       	brne	.+48     	; 0x1d1a <TickLCDDisplay+0x6c>
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <TickLCDDisplay+0x50>
			state = LCDDisplayMenu;
		}
		break;
		
		case LCDDisplayNextLevel:
		if(currentGameState == GLogicPlaying){
    1cec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1cf0:	84 30       	cpi	r24, 0x04	; 4
    1cf2:	09 f5       	brne	.+66     	; 0x1d36 <TickLCDDisplay+0x88>
    1cf4:	19 c0       	rjmp	.+50     	; 0x1d28 <TickLCDDisplay+0x7a>
			state = LCDDisplayRunning;
		}
		break;
		
		case LCDDisplayGameOver:
		if(currentGameState == GLogicMenu) {
    1cf6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	39 f4       	brne	.+14     	; 0x1d0c <TickLCDDisplay+0x5e>
	switch(state) {
		case LCDDisplayInit:
		break;
		
		case LCDDisplayMenu:
		nokia_lcd_clear();
    1cfe:	0e 94 23 03 	call	0x646	; 0x646 <nokia_lcd_clear>
		menuDisplay();
    1d02:	45 de       	rcall	.-886    	; 0x198e <menuDisplay>
		nokia_lcd_render();
    1d04:	0e 94 1d 04 	call	0x83a	; 0x83a <nokia_lcd_render>
		break;
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	08 95       	ret
		
		case LCDDisplayGameOver:
		nokia_lcd_clear();
    1d0c:	0e 94 23 03 	call	0x646	; 0x646 <nokia_lcd_clear>
		gameOverDisplay();
    1d10:	1d df       	rcall	.-454    	; 0x1b4c <gameOverDisplay>
		nokia_lcd_render();
    1d12:	0e 94 1d 04 	call	0x83a	; 0x83a <nokia_lcd_render>
		break;
    1d16:	84 e0       	ldi	r24, 0x04	; 4
		
		case LCDDisplayWin:
		nokia_lcd_clear();
    1d18:	08 95       	ret
    1d1a:	0e 94 23 03 	call	0x646	; 0x646 <nokia_lcd_clear>
		winDisplay();
    1d1e:	72 df       	rcall	.-284    	; 0x1c04 <winDisplay>
		nokia_lcd_render();
    1d20:	0e 94 1d 04 	call	0x83a	; 0x83a <nokia_lcd_render>
		break;
    1d24:	86 e0       	ldi	r24, 0x06	; 6
		
		case LCDDisplayRunning:
		nokia_lcd_clear();
    1d26:	08 95       	ret
    1d28:	0e 94 23 03 	call	0x646	; 0x646 <nokia_lcd_clear>
		matrixToDisplay();
    1d2c:	aa dd       	rcall	.-1196   	; 0x1882 <matrixToDisplay>
		nokia_lcd_render();
    1d2e:	0e 94 1d 04 	call	0x83a	; 0x83a <nokia_lcd_render>
		break;
    1d32:	83 e0       	ldi	r24, 0x03	; 3
		
		case LCDDisplayNextLevel:
		nokia_lcd_clear();
    1d34:	08 95       	ret
    1d36:	0e 94 23 03 	call	0x646	; 0x646 <nokia_lcd_clear>
		levelBeatDisplay();
    1d3a:	d1 de       	rcall	.-606    	; 0x1ade <levelBeatDisplay>
		nokia_lcd_render();
    1d3c:	0e 94 1d 04 	call	0x83a	; 0x83a <nokia_lcd_render>
		break;
    1d40:	85 e0       	ldi	r24, 0x05	; 5
    1d42:	08 95       	ret
enum LCDDisplayState{LCDDisplayStart, LCDDisplayInit,LCDDisplayMenu, LCDDisplayRunning, LCDDisplayGameOver,LCDDisplayNextLevel, LCDDisplayWin};
	
unsigned char TickLCDDisplay (unsigned char state) {
	switch(state) {
		case LCDDisplayStart:
		state = LCDDisplayInit;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
		
		default:
		break;
	}
	return state;
}
    1d46:	08 95       	ret

00001d48 <main>:

// --------END User defined FSMs-----------------------------------------------


// Implement scheduler code from PES.
int main(){
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	2a 97       	sbiw	r28, 0x0a	; 10
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0x03; PORTA = 0xFC;
    1d5c:	83 e0       	ldi	r24, 0x03	; 3
    1d5e:	81 b9       	out	0x01, r24	; 1
    1d60:	8c ef       	ldi	r24, 0xFC	; 252
    1d62:	82 b9       	out	0x02, r24	; 2
	
	DDRB = 0xFF; PORTB = 0x00;
    1d64:	1f ef       	ldi	r17, 0xFF	; 255
    1d66:	14 b9       	out	0x04, r17	; 4
    1d68:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
    1d6a:	1a b9       	out	0x0a, r17	; 10
    1d6c:	1b b8       	out	0x0b, r1	; 11
	
	nokia_lcd_init();
    1d6e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <nokia_lcd_init>
	nokia_lcd_clear();
    1d72:	0e 94 23 03 	call	0x646	; 0x646 <nokia_lcd_clear>
	nokia_lcd_render();
    1d76:	0e 94 1d 04 	call	0x83a	; 0x83a <nokia_lcd_render>
	SNES_init();
    1d7a:	0e 94 bd 02 	call	0x57a	; 0x57a <SNES_init>
	unsigned long int SMTickPWMMotor_period = SMTickPWMMotor_calc/GCD;
	unsigned long int SMTickPWMMotorManager_period = SMTickPWMMotorManager_calc/GCD;
	
	//Declare an array of tasks 
	static task task1, task2, task3, task4, task5;
	task *tasks[] = {&task1, &task2, &task3, &task4, &task5};
    1d7e:	8a e0       	ldi	r24, 0x0A	; 10
    1d80:	ee ee       	ldi	r30, 0xEE	; 238
    1d82:	f1 e0       	ldi	r31, 0x01	; 1
    1d84:	de 01       	movw	r26, r28
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	01 90       	ld	r0, Z+
    1d8a:	0d 92       	st	X+, r0
    1d8c:	8a 95       	dec	r24
    1d8e:	e1 f7       	brne	.-8      	; 0x1d88 <main+0x40>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = -1;//Task initial state.
    1d90:	e8 e8       	ldi	r30, 0x88	; 136
    1d92:	f2 e0       	ldi	r31, 0x02	; 2
    1d94:	10 83       	st	Z, r17
	task1.period = SMTickSNES_period;//Task Period.
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	81 83       	std	Z+1, r24	; 0x01
    1da0:	92 83       	std	Z+2, r25	; 0x02
    1da2:	a3 83       	std	Z+3, r26	; 0x03
    1da4:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTickSNES_period;//Task current elapsed time.
    1da6:	85 83       	std	Z+5, r24	; 0x05
    1da8:	96 83       	std	Z+6, r25	; 0x06
    1daa:	a7 83       	std	Z+7, r26	; 0x07
    1dac:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &TickSNESControl;//Function pointer for the tick.
    1dae:	2f ed       	ldi	r18, 0xDF	; 223
    1db0:	32 e0       	ldi	r19, 0x02	; 2
    1db2:	32 87       	std	Z+10, r19	; 0x0a
    1db4:	21 87       	std	Z+9, r18	; 0x09
	
	task2.state = -1;//Task initial state.
    1db6:	ed e7       	ldi	r30, 0x7D	; 125
    1db8:	f2 e0       	ldi	r31, 0x02	; 2
    1dba:	10 83       	st	Z, r17
	task2.period = SMTickLCD_calc;//Task Period.
    1dbc:	4a e0       	ldi	r20, 0x0A	; 10
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	41 83       	std	Z+1, r20	; 0x01
    1dc6:	52 83       	std	Z+2, r21	; 0x02
    1dc8:	63 83       	std	Z+3, r22	; 0x03
    1dca:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = SMTickLCD_period;//Task current elapsed time.
    1dcc:	85 83       	std	Z+5, r24	; 0x05
    1dce:	96 83       	std	Z+6, r25	; 0x06
    1dd0:	a7 83       	std	Z+7, r26	; 0x07
    1dd2:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &TickLCDDisplay;//Function pointer for the tick.
    1dd4:	27 e5       	ldi	r18, 0x57	; 87
    1dd6:	3e e0       	ldi	r19, 0x0E	; 14
    1dd8:	32 87       	std	Z+10, r19	; 0x0a
    1dda:	21 87       	std	Z+9, r18	; 0x09
	
	task3.state = -1;//Task initial state.
    1ddc:	e2 e7       	ldi	r30, 0x72	; 114
    1dde:	f2 e0       	ldi	r31, 0x02	; 2
    1de0:	10 83       	st	Z, r17
	task3.period = SMTickLogic_calc;//Task Period.
    1de2:	41 83       	std	Z+1, r20	; 0x01
    1de4:	52 83       	std	Z+2, r21	; 0x02
    1de6:	63 83       	std	Z+3, r22	; 0x03
    1de8:	74 83       	std	Z+4, r23	; 0x04
	task3.elapsedTime = SMTickLogic_period;//Task current elapsed time.
    1dea:	85 83       	std	Z+5, r24	; 0x05
    1dec:	96 83       	std	Z+6, r25	; 0x06
    1dee:	a7 83       	std	Z+7, r26	; 0x07
    1df0:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &TickGameLogic;//Function pointer for the tick.
    1df2:	24 ef       	ldi	r18, 0xF4	; 244
    1df4:	35 e0       	ldi	r19, 0x05	; 5
    1df6:	32 87       	std	Z+10, r19	; 0x0a
    1df8:	21 87       	std	Z+9, r18	; 0x09
	
	task4.state = -1;
    1dfa:	e7 e6       	ldi	r30, 0x67	; 103
    1dfc:	f2 e0       	ldi	r31, 0x02	; 2
    1dfe:	10 83       	st	Z, r17
	task4.period = SMTickPWMMotor_calc;
    1e00:	41 83       	std	Z+1, r20	; 0x01
    1e02:	52 83       	std	Z+2, r21	; 0x02
    1e04:	63 83       	std	Z+3, r22	; 0x03
    1e06:	74 83       	std	Z+4, r23	; 0x04
	task4.elapsedTime = SMTickPWMMotor_period;
    1e08:	85 83       	std	Z+5, r24	; 0x05
    1e0a:	96 83       	std	Z+6, r25	; 0x06
    1e0c:	a7 83       	std	Z+7, r26	; 0x07
    1e0e:	b0 87       	std	Z+8, r27	; 0x08
	task4.TickFct = &TickPWMMotor;
    1e10:	21 e9       	ldi	r18, 0x91	; 145
    1e12:	31 e0       	ldi	r19, 0x01	; 1
    1e14:	32 87       	std	Z+10, r19	; 0x0a
    1e16:	21 87       	std	Z+9, r18	; 0x09
	
	task5.state = -1;
    1e18:	ec e5       	ldi	r30, 0x5C	; 92
    1e1a:	f2 e0       	ldi	r31, 0x02	; 2
    1e1c:	10 83       	st	Z, r17
	task5.period = SMTickPWMMotorManager_calc;
    1e1e:	41 83       	std	Z+1, r20	; 0x01
    1e20:	52 83       	std	Z+2, r21	; 0x02
    1e22:	63 83       	std	Z+3, r22	; 0x03
    1e24:	74 83       	std	Z+4, r23	; 0x04
	task5.elapsedTime = SMTickPWMMotorManager_period;
    1e26:	85 83       	std	Z+5, r24	; 0x05
    1e28:	96 83       	std	Z+6, r25	; 0x06
    1e2a:	a7 83       	std	Z+7, r26	; 0x07
    1e2c:	b0 87       	std	Z+8, r27	; 0x08
	task5.TickFct = &TickPWMMotorManager;
    1e2e:	85 ee       	ldi	r24, 0xE5	; 229
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	92 87       	std	Z+10, r25	; 0x0a
    1e34:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
    1e36:	6a e0       	ldi	r22, 0x0A	; 10
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 4c 02 	call	0x498	; 0x498 <TimerSet>
	TimerOn();
    1e42:	0e 94 5d 02 	call	0x4ba	; 0x4ba <TimerOn>
    1e46:	7e 01       	movw	r14, r28
    1e48:	8b e0       	ldi	r24, 0x0B	; 11
    1e4a:	e8 0e       	add	r14, r24
    1e4c:	f1 1c       	adc	r15, r1
    1e4e:	de 01       	movw	r26, r28
    1e50:	11 96       	adiw	r26, 0x01	; 1
    1e52:	6d 01       	movw	r12, r26
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    1e54:	f6 01       	movw	r30, r12
    1e56:	01 91       	ld	r16, Z+
    1e58:	11 91       	ld	r17, Z+
    1e5a:	6f 01       	movw	r12, r30
    1e5c:	d8 01       	movw	r26, r16
    1e5e:	15 96       	adiw	r26, 0x05	; 5
    1e60:	4d 91       	ld	r20, X+
    1e62:	5d 91       	ld	r21, X+
    1e64:	6d 91       	ld	r22, X+
    1e66:	7c 91       	ld	r23, X
    1e68:	18 97       	sbiw	r26, 0x08	; 8
    1e6a:	11 96       	adiw	r26, 0x01	; 1
    1e6c:	8d 91       	ld	r24, X+
    1e6e:	9d 91       	ld	r25, X+
    1e70:	0d 90       	ld	r0, X+
    1e72:	bc 91       	ld	r27, X
    1e74:	a0 2d       	mov	r26, r0
    1e76:	48 17       	cp	r20, r24
    1e78:	59 07       	cpc	r21, r25
    1e7a:	6a 07       	cpc	r22, r26
    1e7c:	7b 07       	cpc	r23, r27
    1e7e:	71 f4       	brne	.+28     	; 0x1e9c <main+0x154>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    1e80:	f8 01       	movw	r30, r16
    1e82:	80 81       	ld	r24, Z
    1e84:	01 84       	ldd	r0, Z+9	; 0x09
    1e86:	f2 85       	ldd	r31, Z+10	; 0x0a
    1e88:	e0 2d       	mov	r30, r0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	09 95       	icall
    1e8e:	d8 01       	movw	r26, r16
    1e90:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    1e92:	f8 01       	movw	r30, r16
    1e94:	15 82       	std	Z+5, r1	; 0x05
    1e96:	16 82       	std	Z+6, r1	; 0x06
    1e98:	17 82       	std	Z+7, r1	; 0x07
    1e9a:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	85 81       	ldd	r24, Z+5	; 0x05
    1ea0:	96 81       	ldd	r25, Z+6	; 0x06
    1ea2:	a7 81       	ldd	r26, Z+7	; 0x07
    1ea4:	b0 85       	ldd	r27, Z+8	; 0x08
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	a1 1d       	adc	r26, r1
    1eaa:	b1 1d       	adc	r27, r1
    1eac:	85 83       	std	Z+5, r24	; 0x05
    1eae:	96 83       	std	Z+6, r25	; 0x06
    1eb0:	a7 83       	std	Z+7, r26	; 0x07
    1eb2:	b0 87       	std	Z+8, r27	; 0x08
	TimerOn();
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    1eb4:	ec 14       	cp	r14, r12
    1eb6:	fd 04       	cpc	r15, r13
    1eb8:	69 f6       	brne	.-102    	; 0x1e54 <main+0x10c>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
    1eba:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <TimerFlag>
    1ebe:	88 23       	and	r24, r24
    1ec0:	e1 f3       	breq	.-8      	; 0x1eba <main+0x172>
		TimerFlag = 0;
    1ec2:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <TimerFlag>
	}
    1ec6:	c3 cf       	rjmp	.-122    	; 0x1e4e <main+0x106>

00001ec8 <__udivmodqi4>:
    1ec8:	99 1b       	sub	r25, r25
    1eca:	79 e0       	ldi	r23, 0x09	; 9
    1ecc:	04 c0       	rjmp	.+8      	; 0x1ed6 <__udivmodqi4_ep>

00001ece <__udivmodqi4_loop>:
    1ece:	99 1f       	adc	r25, r25
    1ed0:	96 17       	cp	r25, r22
    1ed2:	08 f0       	brcs	.+2      	; 0x1ed6 <__udivmodqi4_ep>
    1ed4:	96 1b       	sub	r25, r22

00001ed6 <__udivmodqi4_ep>:
    1ed6:	88 1f       	adc	r24, r24
    1ed8:	7a 95       	dec	r23
    1eda:	c9 f7       	brne	.-14     	; 0x1ece <__udivmodqi4_loop>
    1edc:	80 95       	com	r24
    1ede:	08 95       	ret

00001ee0 <__tablejump2__>:
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	00 24       	eor	r0, r0
    1ee6:	00 1c       	adc	r0, r0
    1ee8:	0b be       	out	0x3b, r0	; 59
    1eea:	07 90       	elpm	r0, Z+
    1eec:	f6 91       	elpm	r31, Z
    1eee:	e0 2d       	mov	r30, r0
    1ef0:	09 94       	ijmp

00001ef2 <__umulhisi3>:
    1ef2:	a2 9f       	mul	r26, r18
    1ef4:	b0 01       	movw	r22, r0
    1ef6:	b3 9f       	mul	r27, r19
    1ef8:	c0 01       	movw	r24, r0
    1efa:	a3 9f       	mul	r26, r19
    1efc:	70 0d       	add	r23, r0
    1efe:	81 1d       	adc	r24, r1
    1f00:	11 24       	eor	r1, r1
    1f02:	91 1d       	adc	r25, r1
    1f04:	b2 9f       	mul	r27, r18
    1f06:	70 0d       	add	r23, r0
    1f08:	81 1d       	adc	r24, r1
    1f0a:	11 24       	eor	r1, r1
    1f0c:	91 1d       	adc	r25, r1
    1f0e:	08 95       	ret

00001f10 <eeprom_read_word>:
    1f10:	a8 e1       	ldi	r26, 0x18	; 24
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	42 e0       	ldi	r20, 0x02	; 2
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	05 c0       	rjmp	.+10     	; 0x1f24 <eeprom_read_blraw>

00001f1a <eeprom_write_word>:
    1f1a:	12 d0       	rcall	.+36     	; 0x1f40 <eeprom_write_byte>
    1f1c:	27 2f       	mov	r18, r23
    1f1e:	11 c0       	rjmp	.+34     	; 0x1f42 <eeprom_write_r18>

00001f20 <eeprom_read_block>:
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22

00001f24 <eeprom_read_blraw>:
    1f24:	fc 01       	movw	r30, r24
    1f26:	f9 99       	sbic	0x1f, 1	; 31
    1f28:	fe cf       	rjmp	.-4      	; 0x1f26 <eeprom_read_blraw+0x2>
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <eeprom_read_blraw+0x14>
    1f2c:	f2 bd       	out	0x22, r31	; 34
    1f2e:	e1 bd       	out	0x21, r30	; 33
    1f30:	f8 9a       	sbi	0x1f, 0	; 31
    1f32:	31 96       	adiw	r30, 0x01	; 1
    1f34:	00 b4       	in	r0, 0x20	; 32
    1f36:	0d 92       	st	X+, r0
    1f38:	41 50       	subi	r20, 0x01	; 1
    1f3a:	50 40       	sbci	r21, 0x00	; 0
    1f3c:	b8 f7       	brcc	.-18     	; 0x1f2c <eeprom_read_blraw+0x8>
    1f3e:	08 95       	ret

00001f40 <eeprom_write_byte>:
    1f40:	26 2f       	mov	r18, r22

00001f42 <eeprom_write_r18>:
    1f42:	f9 99       	sbic	0x1f, 1	; 31
    1f44:	fe cf       	rjmp	.-4      	; 0x1f42 <eeprom_write_r18>
    1f46:	1f ba       	out	0x1f, r1	; 31
    1f48:	92 bd       	out	0x22, r25	; 34
    1f4a:	81 bd       	out	0x21, r24	; 33
    1f4c:	20 bd       	out	0x20, r18	; 32
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	fa 9a       	sbi	0x1f, 2	; 31
    1f54:	f9 9a       	sbi	0x1f, 1	; 31
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	08 95       	ret

00001f5c <_exit>:
    1f5c:	f8 94       	cli

00001f5e <__stop_program>:
    1f5e:	ff cf       	rjmp	.-2      	; 0x1f5e <__stop_program>
